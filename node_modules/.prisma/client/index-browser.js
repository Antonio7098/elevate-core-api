
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserMemoryScalarFieldEnum = {
  id: 'id',
  cognitiveApproach: 'cognitiveApproach',
  explanationStyles: 'explanationStyles',
  interactionStyle: 'interactionStyle',
  primaryGoal: 'primaryGoal',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  dailyStudyTimeMinutes: 'dailyStudyTimeMinutes'
};

exports.Prisma.FolderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  currentMasteryScore: 'currentMasteryScore',
  masteryHistory: 'masteryHistory',
  parentId: 'parentId',
  imageUrls: 'imageUrls',
  isPinned: 'isPinned'
};

exports.Prisma.LearningBlueprintScalarFieldEnum = {
  id: 'id',
  sourceText: 'sourceText',
  blueprintJson: 'blueprintJson',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.QuestionSetScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  currentIntervalDays: 'currentIntervalDays',
  exploreScore: 'exploreScore',
  lastReviewedAt: 'lastReviewedAt',
  nextReviewAt: 'nextReviewAt',
  reviewCount: 'reviewCount',
  understandScore: 'understandScore',
  useScore: 'useScore',
  currentForgottenPercentage: 'currentForgottenPercentage',
  currentTotalMasteryScore: 'currentTotalMasteryScore',
  currentUUESetStage: 'currentUUESetStage',
  forgettingCurveParams: 'forgettingCurveParams',
  masteryHistory: 'masteryHistory',
  instructions: 'instructions',
  isTracked: 'isTracked',
  isPinned: 'isPinned',
  folderId: 'folderId',
  srStage: 'srStage',
  easeFactor: 'easeFactor',
  lapses: 'lapses',
  trackingMode: 'trackingMode',
  generatedFromBlueprintId: 'generatedFromBlueprintId'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  answer: 'answer',
  questionSetId: 'questionSetId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  options: 'options',
  questionType: 'questionType',
  text: 'text',
  conceptTags: 'conceptTags',
  lastAnswerCorrect: 'lastAnswerCorrect',
  uueFocus: 'uueFocus',
  totalMarksAvailable: 'totalMarksAvailable',
  markingCriteria: 'markingCriteria',
  currentMasteryScore: 'currentMasteryScore',
  difficultyScore: 'difficultyScore',
  timesAnsweredCorrectly: 'timesAnsweredCorrectly',
  timesAnsweredIncorrectly: 'timesAnsweredIncorrectly',
  selfMark: 'selfMark',
  autoMark: 'autoMark',
  aiGenerated: 'aiGenerated',
  inCat: 'inCat',
  imageUrls: 'imageUrls'
};

exports.Prisma.UserQuestionAnswerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  questionId: 'questionId',
  isCorrect: 'isCorrect',
  confidence: 'confidence',
  timeSpent: 'timeSpent',
  answeredAt: 'answeredAt',
  userAnswerText: 'userAnswerText',
  scoreAchieved: 'scoreAchieved',
  questionSetId: 'questionSetId',
  questionSetStudySessionId: 'questionSetStudySessionId'
};

exports.Prisma.UserStudySessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionStartedAt: 'sessionStartedAt',
  sessionEndedAt: 'sessionEndedAt',
  timeSpentSeconds: 'timeSpentSeconds',
  answeredQuestionsCount: 'answeredQuestionsCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionSetStudySessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionId: 'sessionId',
  questionSetId: 'questionSetId',
  sessionMarksAchieved: 'sessionMarksAchieved',
  sessionMarksAvailable: 'sessionMarksAvailable',
  srStageBefore: 'srStageBefore',
  createdAt: 'createdAt'
};

exports.Prisma.NoteScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  plainText: 'plainText',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  folderId: 'folderId',
  questionSetId: 'questionSetId',
  generatedFromBlueprintId: 'generatedFromBlueprintId'
};

exports.Prisma.InsightCatalystScalarFieldEnum = {
  id: 'id',
  type: 'type',
  text: 'text',
  explanation: 'explanation',
  imageUrls: 'imageUrls',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  noteId: 'noteId',
  questionId: 'questionId'
};

exports.Prisma.ScheduledReviewScalarFieldEnum = {
  id: 'id',
  reviewDate: 'reviewDate',
  type: 'type',
  status: 'status',
  userId: 'userId',
  questionSetId: 'questionSetId',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.CognitiveApproach = exports.$Enums.CognitiveApproach = {
  TOP_DOWN: 'TOP_DOWN',
  BOTTOM_UP: 'BOTTOM_UP',
  ADAPTIVE: 'ADAPTIVE'
};

exports.InteractionStyle = exports.$Enums.InteractionStyle = {
  DIRECT: 'DIRECT',
  SOCRATIC: 'SOCRATIC'
};

exports.ExplanationStyle = exports.$Enums.ExplanationStyle = {
  ANALOGY_DRIVEN: 'ANALOGY_DRIVEN',
  PRACTICAL_EXAMPLES: 'PRACTICAL_EXAMPLES',
  TEXTUAL_DETAILED: 'TEXTUAL_DETAILED'
};

exports.Prisma.ModelName = {
  UserMemory: 'UserMemory',
  User: 'User',
  Folder: 'Folder',
  LearningBlueprint: 'LearningBlueprint',
  QuestionSet: 'QuestionSet',
  Question: 'Question',
  UserQuestionAnswer: 'UserQuestionAnswer',
  UserStudySession: 'UserStudySession',
  QuestionSetStudySession: 'QuestionSetStudySession',
  Note: 'Note',
  InsightCatalyst: 'InsightCatalyst',
  ScheduledReview: 'ScheduledReview'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
