
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Folder
 * 
 */
export type Folder = $Result.DefaultSelection<Prisma.$FolderPayload>
/**
 * Model QuestionSet
 * 
 */
export type QuestionSet = $Result.DefaultSelection<Prisma.$QuestionSetPayload>
/**
 * Model Question
 * 
 */
export type Question = $Result.DefaultSelection<Prisma.$QuestionPayload>
/**
 * Model UserQuestionAnswer
 * 
 */
export type UserQuestionAnswer = $Result.DefaultSelection<Prisma.$UserQuestionAnswerPayload>
/**
 * Model UserStudySession
 * 
 */
export type UserStudySession = $Result.DefaultSelection<Prisma.$UserStudySessionPayload>
/**
 * Model Note
 * 
 */
export type Note = $Result.DefaultSelection<Prisma.$NotePayload>
/**
 * Model InsightCatalyst
 * 
 */
export type InsightCatalyst = $Result.DefaultSelection<Prisma.$InsightCatalystPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.folder`: Exposes CRUD operations for the **Folder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Folders
    * const folders = await prisma.folder.findMany()
    * ```
    */
  get folder(): Prisma.FolderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questionSet`: Exposes CRUD operations for the **QuestionSet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionSets
    * const questionSets = await prisma.questionSet.findMany()
    * ```
    */
  get questionSet(): Prisma.QuestionSetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.question`: Exposes CRUD operations for the **Question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.question.findMany()
    * ```
    */
  get question(): Prisma.QuestionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userQuestionAnswer`: Exposes CRUD operations for the **UserQuestionAnswer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserQuestionAnswers
    * const userQuestionAnswers = await prisma.userQuestionAnswer.findMany()
    * ```
    */
  get userQuestionAnswer(): Prisma.UserQuestionAnswerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userStudySession`: Exposes CRUD operations for the **UserStudySession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserStudySessions
    * const userStudySessions = await prisma.userStudySession.findMany()
    * ```
    */
  get userStudySession(): Prisma.UserStudySessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.note`: Exposes CRUD operations for the **Note** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notes
    * const notes = await prisma.note.findMany()
    * ```
    */
  get note(): Prisma.NoteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.insightCatalyst`: Exposes CRUD operations for the **InsightCatalyst** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InsightCatalysts
    * const insightCatalysts = await prisma.insightCatalyst.findMany()
    * ```
    */
  get insightCatalyst(): Prisma.InsightCatalystDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Folder: 'Folder',
    QuestionSet: 'QuestionSet',
    Question: 'Question',
    UserQuestionAnswer: 'UserQuestionAnswer',
    UserStudySession: 'UserStudySession',
    Note: 'Note',
    InsightCatalyst: 'InsightCatalyst'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "folder" | "questionSet" | "question" | "userQuestionAnswer" | "userStudySession" | "note" | "insightCatalyst"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Folder: {
        payload: Prisma.$FolderPayload<ExtArgs>
        fields: Prisma.FolderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FolderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FolderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>
          }
          findFirst: {
            args: Prisma.FolderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FolderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>
          }
          findMany: {
            args: Prisma.FolderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>[]
          }
          create: {
            args: Prisma.FolderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>
          }
          createMany: {
            args: Prisma.FolderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FolderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>[]
          }
          delete: {
            args: Prisma.FolderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>
          }
          update: {
            args: Prisma.FolderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>
          }
          deleteMany: {
            args: Prisma.FolderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FolderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FolderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>[]
          }
          upsert: {
            args: Prisma.FolderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FolderPayload>
          }
          aggregate: {
            args: Prisma.FolderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFolder>
          }
          groupBy: {
            args: Prisma.FolderGroupByArgs<ExtArgs>
            result: $Utils.Optional<FolderGroupByOutputType>[]
          }
          count: {
            args: Prisma.FolderCountArgs<ExtArgs>
            result: $Utils.Optional<FolderCountAggregateOutputType> | number
          }
        }
      }
      QuestionSet: {
        payload: Prisma.$QuestionSetPayload<ExtArgs>
        fields: Prisma.QuestionSetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionSetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionSetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>
          }
          findFirst: {
            args: Prisma.QuestionSetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionSetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>
          }
          findMany: {
            args: Prisma.QuestionSetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>[]
          }
          create: {
            args: Prisma.QuestionSetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>
          }
          createMany: {
            args: Prisma.QuestionSetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionSetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>[]
          }
          delete: {
            args: Prisma.QuestionSetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>
          }
          update: {
            args: Prisma.QuestionSetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>
          }
          deleteMany: {
            args: Prisma.QuestionSetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionSetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionSetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>[]
          }
          upsert: {
            args: Prisma.QuestionSetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>
          }
          aggregate: {
            args: Prisma.QuestionSetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionSet>
          }
          groupBy: {
            args: Prisma.QuestionSetGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionSetGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionSetCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionSetCountAggregateOutputType> | number
          }
        }
      }
      Question: {
        payload: Prisma.$QuestionPayload<ExtArgs>
        fields: Prisma.QuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findFirst: {
            args: Prisma.QuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findMany: {
            args: Prisma.QuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          create: {
            args: Prisma.QuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          createMany: {
            args: Prisma.QuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          delete: {
            args: Prisma.QuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          update: {
            args: Prisma.QuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          deleteMany: {
            args: Prisma.QuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          upsert: {
            args: Prisma.QuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          aggregate: {
            args: Prisma.QuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestion>
          }
          groupBy: {
            args: Prisma.QuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionCountAggregateOutputType> | number
          }
        }
      }
      UserQuestionAnswer: {
        payload: Prisma.$UserQuestionAnswerPayload<ExtArgs>
        fields: Prisma.UserQuestionAnswerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserQuestionAnswerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserQuestionAnswerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload>
          }
          findFirst: {
            args: Prisma.UserQuestionAnswerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserQuestionAnswerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload>
          }
          findMany: {
            args: Prisma.UserQuestionAnswerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload>[]
          }
          create: {
            args: Prisma.UserQuestionAnswerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload>
          }
          createMany: {
            args: Prisma.UserQuestionAnswerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserQuestionAnswerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload>[]
          }
          delete: {
            args: Prisma.UserQuestionAnswerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload>
          }
          update: {
            args: Prisma.UserQuestionAnswerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload>
          }
          deleteMany: {
            args: Prisma.UserQuestionAnswerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserQuestionAnswerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserQuestionAnswerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload>[]
          }
          upsert: {
            args: Prisma.UserQuestionAnswerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload>
          }
          aggregate: {
            args: Prisma.UserQuestionAnswerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserQuestionAnswer>
          }
          groupBy: {
            args: Prisma.UserQuestionAnswerGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserQuestionAnswerGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserQuestionAnswerCountArgs<ExtArgs>
            result: $Utils.Optional<UserQuestionAnswerCountAggregateOutputType> | number
          }
        }
      }
      UserStudySession: {
        payload: Prisma.$UserStudySessionPayload<ExtArgs>
        fields: Prisma.UserStudySessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserStudySessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStudySessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserStudySessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStudySessionPayload>
          }
          findFirst: {
            args: Prisma.UserStudySessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStudySessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserStudySessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStudySessionPayload>
          }
          findMany: {
            args: Prisma.UserStudySessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStudySessionPayload>[]
          }
          create: {
            args: Prisma.UserStudySessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStudySessionPayload>
          }
          createMany: {
            args: Prisma.UserStudySessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserStudySessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStudySessionPayload>[]
          }
          delete: {
            args: Prisma.UserStudySessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStudySessionPayload>
          }
          update: {
            args: Prisma.UserStudySessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStudySessionPayload>
          }
          deleteMany: {
            args: Prisma.UserStudySessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserStudySessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserStudySessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStudySessionPayload>[]
          }
          upsert: {
            args: Prisma.UserStudySessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStudySessionPayload>
          }
          aggregate: {
            args: Prisma.UserStudySessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserStudySession>
          }
          groupBy: {
            args: Prisma.UserStudySessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserStudySessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserStudySessionCountArgs<ExtArgs>
            result: $Utils.Optional<UserStudySessionCountAggregateOutputType> | number
          }
        }
      }
      Note: {
        payload: Prisma.$NotePayload<ExtArgs>
        fields: Prisma.NoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          findFirst: {
            args: Prisma.NoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          findMany: {
            args: Prisma.NoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          create: {
            args: Prisma.NoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          createMany: {
            args: Prisma.NoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          delete: {
            args: Prisma.NoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          update: {
            args: Prisma.NoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          deleteMany: {
            args: Prisma.NoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NoteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          upsert: {
            args: Prisma.NoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          aggregate: {
            args: Prisma.NoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNote>
          }
          groupBy: {
            args: Prisma.NoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<NoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.NoteCountArgs<ExtArgs>
            result: $Utils.Optional<NoteCountAggregateOutputType> | number
          }
        }
      }
      InsightCatalyst: {
        payload: Prisma.$InsightCatalystPayload<ExtArgs>
        fields: Prisma.InsightCatalystFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InsightCatalystFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightCatalystPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InsightCatalystFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightCatalystPayload>
          }
          findFirst: {
            args: Prisma.InsightCatalystFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightCatalystPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InsightCatalystFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightCatalystPayload>
          }
          findMany: {
            args: Prisma.InsightCatalystFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightCatalystPayload>[]
          }
          create: {
            args: Prisma.InsightCatalystCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightCatalystPayload>
          }
          createMany: {
            args: Prisma.InsightCatalystCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InsightCatalystCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightCatalystPayload>[]
          }
          delete: {
            args: Prisma.InsightCatalystDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightCatalystPayload>
          }
          update: {
            args: Prisma.InsightCatalystUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightCatalystPayload>
          }
          deleteMany: {
            args: Prisma.InsightCatalystDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InsightCatalystUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InsightCatalystUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightCatalystPayload>[]
          }
          upsert: {
            args: Prisma.InsightCatalystUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightCatalystPayload>
          }
          aggregate: {
            args: Prisma.InsightCatalystAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInsightCatalyst>
          }
          groupBy: {
            args: Prisma.InsightCatalystGroupByArgs<ExtArgs>
            result: $Utils.Optional<InsightCatalystGroupByOutputType>[]
          }
          count: {
            args: Prisma.InsightCatalystCountArgs<ExtArgs>
            result: $Utils.Optional<InsightCatalystCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    folder?: FolderOmit
    questionSet?: QuestionSetOmit
    question?: QuestionOmit
    userQuestionAnswer?: UserQuestionAnswerOmit
    userStudySession?: UserStudySessionOmit
    note?: NoteOmit
    insightCatalyst?: InsightCatalystOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    folders: number
    questionAnswers: number
    studySessions: number
    notes: number
    insightCatalysts: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    folders?: boolean | UserCountOutputTypeCountFoldersArgs
    questionAnswers?: boolean | UserCountOutputTypeCountQuestionAnswersArgs
    studySessions?: boolean | UserCountOutputTypeCountStudySessionsArgs
    notes?: boolean | UserCountOutputTypeCountNotesArgs
    insightCatalysts?: boolean | UserCountOutputTypeCountInsightCatalystsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFoldersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FolderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountQuestionAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserQuestionAnswerWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStudySessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStudySessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInsightCatalystsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InsightCatalystWhereInput
  }


  /**
   * Count Type FolderCountOutputType
   */

  export type FolderCountOutputType = {
    questionSets: number
    notes: number
    children: number
  }

  export type FolderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questionSets?: boolean | FolderCountOutputTypeCountQuestionSetsArgs
    notes?: boolean | FolderCountOutputTypeCountNotesArgs
    children?: boolean | FolderCountOutputTypeCountChildrenArgs
  }

  // Custom InputTypes
  /**
   * FolderCountOutputType without action
   */
  export type FolderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FolderCountOutputType
     */
    select?: FolderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FolderCountOutputType without action
   */
  export type FolderCountOutputTypeCountQuestionSetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionSetWhereInput
  }

  /**
   * FolderCountOutputType without action
   */
  export type FolderCountOutputTypeCountNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
  }

  /**
   * FolderCountOutputType without action
   */
  export type FolderCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FolderWhereInput
  }


  /**
   * Count Type QuestionSetCountOutputType
   */

  export type QuestionSetCountOutputType = {
    notes: number
    questions: number
    userAnswers: number
  }

  export type QuestionSetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notes?: boolean | QuestionSetCountOutputTypeCountNotesArgs
    questions?: boolean | QuestionSetCountOutputTypeCountQuestionsArgs
    userAnswers?: boolean | QuestionSetCountOutputTypeCountUserAnswersArgs
  }

  // Custom InputTypes
  /**
   * QuestionSetCountOutputType without action
   */
  export type QuestionSetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSetCountOutputType
     */
    select?: QuestionSetCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionSetCountOutputType without action
   */
  export type QuestionSetCountOutputTypeCountNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
  }

  /**
   * QuestionSetCountOutputType without action
   */
  export type QuestionSetCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
  }

  /**
   * QuestionSetCountOutputType without action
   */
  export type QuestionSetCountOutputTypeCountUserAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserQuestionAnswerWhereInput
  }


  /**
   * Count Type QuestionCountOutputType
   */

  export type QuestionCountOutputType = {
    userAnswers: number
    insightCatalysts: number
  }

  export type QuestionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userAnswers?: boolean | QuestionCountOutputTypeCountUserAnswersArgs
    insightCatalysts?: boolean | QuestionCountOutputTypeCountInsightCatalystsArgs
  }

  // Custom InputTypes
  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCountOutputType
     */
    select?: QuestionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountUserAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserQuestionAnswerWhereInput
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountInsightCatalystsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InsightCatalystWhereInput
  }


  /**
   * Count Type UserStudySessionCountOutputType
   */

  export type UserStudySessionCountOutputType = {
    userQuestionAnswers: number
  }

  export type UserStudySessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userQuestionAnswers?: boolean | UserStudySessionCountOutputTypeCountUserQuestionAnswersArgs
  }

  // Custom InputTypes
  /**
   * UserStudySessionCountOutputType without action
   */
  export type UserStudySessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudySessionCountOutputType
     */
    select?: UserStudySessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserStudySessionCountOutputType without action
   */
  export type UserStudySessionCountOutputTypeCountUserQuestionAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserQuestionAnswerWhereInput
  }


  /**
   * Count Type NoteCountOutputType
   */

  export type NoteCountOutputType = {
    insightCatalysts: number
  }

  export type NoteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    insightCatalysts?: boolean | NoteCountOutputTypeCountInsightCatalystsArgs
  }

  // Custom InputTypes
  /**
   * NoteCountOutputType without action
   */
  export type NoteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoteCountOutputType
     */
    select?: NoteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NoteCountOutputType without action
   */
  export type NoteCountOutputTypeCountInsightCatalystsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InsightCatalystWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    dailyStudyTimeMinutes: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    dailyStudyTimeMinutes: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
    dailyStudyTimeMinutes: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
    dailyStudyTimeMinutes: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    createdAt: number
    updatedAt: number
    dailyStudyTimeMinutes: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    dailyStudyTimeMinutes?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    dailyStudyTimeMinutes?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    dailyStudyTimeMinutes?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    dailyStudyTimeMinutes?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    dailyStudyTimeMinutes?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    createdAt: Date
    updatedAt: Date
    dailyStudyTimeMinutes: number
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dailyStudyTimeMinutes?: boolean
    folders?: boolean | User$foldersArgs<ExtArgs>
    questionAnswers?: boolean | User$questionAnswersArgs<ExtArgs>
    studySessions?: boolean | User$studySessionsArgs<ExtArgs>
    notes?: boolean | User$notesArgs<ExtArgs>
    insightCatalysts?: boolean | User$insightCatalystsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dailyStudyTimeMinutes?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dailyStudyTimeMinutes?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dailyStudyTimeMinutes?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "createdAt" | "updatedAt" | "dailyStudyTimeMinutes", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    folders?: boolean | User$foldersArgs<ExtArgs>
    questionAnswers?: boolean | User$questionAnswersArgs<ExtArgs>
    studySessions?: boolean | User$studySessionsArgs<ExtArgs>
    notes?: boolean | User$notesArgs<ExtArgs>
    insightCatalysts?: boolean | User$insightCatalystsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      folders: Prisma.$FolderPayload<ExtArgs>[]
      questionAnswers: Prisma.$UserQuestionAnswerPayload<ExtArgs>[]
      studySessions: Prisma.$UserStudySessionPayload<ExtArgs>[]
      notes: Prisma.$NotePayload<ExtArgs>[]
      insightCatalysts: Prisma.$InsightCatalystPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      createdAt: Date
      updatedAt: Date
      dailyStudyTimeMinutes: number
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    folders<T extends User$foldersArgs<ExtArgs> = {}>(args?: Subset<T, User$foldersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    questionAnswers<T extends User$questionAnswersArgs<ExtArgs> = {}>(args?: Subset<T, User$questionAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studySessions<T extends User$studySessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$studySessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStudySessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notes<T extends User$notesArgs<ExtArgs> = {}>(args?: Subset<T, User$notesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    insightCatalysts<T extends User$insightCatalystsArgs<ExtArgs> = {}>(args?: Subset<T, User$insightCatalystsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsightCatalystPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly dailyStudyTimeMinutes: FieldRef<"User", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.folders
   */
  export type User$foldersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    where?: FolderWhereInput
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    cursor?: FolderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FolderScalarFieldEnum | FolderScalarFieldEnum[]
  }

  /**
   * User.questionAnswers
   */
  export type User$questionAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    where?: UserQuestionAnswerWhereInput
    orderBy?: UserQuestionAnswerOrderByWithRelationInput | UserQuestionAnswerOrderByWithRelationInput[]
    cursor?: UserQuestionAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserQuestionAnswerScalarFieldEnum | UserQuestionAnswerScalarFieldEnum[]
  }

  /**
   * User.studySessions
   */
  export type User$studySessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudySession
     */
    select?: UserStudySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStudySession
     */
    omit?: UserStudySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudySessionInclude<ExtArgs> | null
    where?: UserStudySessionWhereInput
    orderBy?: UserStudySessionOrderByWithRelationInput | UserStudySessionOrderByWithRelationInput[]
    cursor?: UserStudySessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserStudySessionScalarFieldEnum | UserStudySessionScalarFieldEnum[]
  }

  /**
   * User.notes
   */
  export type User$notesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    cursor?: NoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * User.insightCatalysts
   */
  export type User$insightCatalystsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsightCatalyst
     */
    select?: InsightCatalystSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsightCatalyst
     */
    omit?: InsightCatalystOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightCatalystInclude<ExtArgs> | null
    where?: InsightCatalystWhereInput
    orderBy?: InsightCatalystOrderByWithRelationInput | InsightCatalystOrderByWithRelationInput[]
    cursor?: InsightCatalystWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InsightCatalystScalarFieldEnum | InsightCatalystScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Folder
   */

  export type AggregateFolder = {
    _count: FolderCountAggregateOutputType | null
    _avg: FolderAvgAggregateOutputType | null
    _sum: FolderSumAggregateOutputType | null
    _min: FolderMinAggregateOutputType | null
    _max: FolderMaxAggregateOutputType | null
  }

  export type FolderAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    currentMasteryScore: number | null
    parentId: number | null
  }

  export type FolderSumAggregateOutputType = {
    id: number | null
    userId: number | null
    currentMasteryScore: number | null
    parentId: number | null
  }

  export type FolderMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    currentMasteryScore: number | null
    parentId: number | null
    isPinned: boolean | null
  }

  export type FolderMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    currentMasteryScore: number | null
    parentId: number | null
    isPinned: boolean | null
  }

  export type FolderCountAggregateOutputType = {
    id: number
    name: number
    description: number
    userId: number
    createdAt: number
    updatedAt: number
    currentMasteryScore: number
    masteryHistory: number
    parentId: number
    imageUrls: number
    isPinned: number
    _all: number
  }


  export type FolderAvgAggregateInputType = {
    id?: true
    userId?: true
    currentMasteryScore?: true
    parentId?: true
  }

  export type FolderSumAggregateInputType = {
    id?: true
    userId?: true
    currentMasteryScore?: true
    parentId?: true
  }

  export type FolderMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    currentMasteryScore?: true
    parentId?: true
    isPinned?: true
  }

  export type FolderMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    currentMasteryScore?: true
    parentId?: true
    isPinned?: true
  }

  export type FolderCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    currentMasteryScore?: true
    masteryHistory?: true
    parentId?: true
    imageUrls?: true
    isPinned?: true
    _all?: true
  }

  export type FolderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Folder to aggregate.
     */
    where?: FolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Folders to fetch.
     */
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Folders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Folders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Folders
    **/
    _count?: true | FolderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FolderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FolderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FolderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FolderMaxAggregateInputType
  }

  export type GetFolderAggregateType<T extends FolderAggregateArgs> = {
        [P in keyof T & keyof AggregateFolder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFolder[P]>
      : GetScalarType<T[P], AggregateFolder[P]>
  }




  export type FolderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FolderWhereInput
    orderBy?: FolderOrderByWithAggregationInput | FolderOrderByWithAggregationInput[]
    by: FolderScalarFieldEnum[] | FolderScalarFieldEnum
    having?: FolderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FolderCountAggregateInputType | true
    _avg?: FolderAvgAggregateInputType
    _sum?: FolderSumAggregateInputType
    _min?: FolderMinAggregateInputType
    _max?: FolderMaxAggregateInputType
  }

  export type FolderGroupByOutputType = {
    id: number
    name: string
    description: string | null
    userId: number
    createdAt: Date
    updatedAt: Date
    currentMasteryScore: number | null
    masteryHistory: JsonValue[]
    parentId: number | null
    imageUrls: string[]
    isPinned: boolean
    _count: FolderCountAggregateOutputType | null
    _avg: FolderAvgAggregateOutputType | null
    _sum: FolderSumAggregateOutputType | null
    _min: FolderMinAggregateOutputType | null
    _max: FolderMaxAggregateOutputType | null
  }

  type GetFolderGroupByPayload<T extends FolderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FolderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FolderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FolderGroupByOutputType[P]>
            : GetScalarType<T[P], FolderGroupByOutputType[P]>
        }
      >
    >


  export type FolderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    currentMasteryScore?: boolean
    masteryHistory?: boolean
    parentId?: boolean
    imageUrls?: boolean
    isPinned?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    questionSets?: boolean | Folder$questionSetsArgs<ExtArgs>
    notes?: boolean | Folder$notesArgs<ExtArgs>
    parent?: boolean | Folder$parentArgs<ExtArgs>
    children?: boolean | Folder$childrenArgs<ExtArgs>
    _count?: boolean | FolderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["folder"]>

  export type FolderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    currentMasteryScore?: boolean
    masteryHistory?: boolean
    parentId?: boolean
    imageUrls?: boolean
    isPinned?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    parent?: boolean | Folder$parentArgs<ExtArgs>
  }, ExtArgs["result"]["folder"]>

  export type FolderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    currentMasteryScore?: boolean
    masteryHistory?: boolean
    parentId?: boolean
    imageUrls?: boolean
    isPinned?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    parent?: boolean | Folder$parentArgs<ExtArgs>
  }, ExtArgs["result"]["folder"]>

  export type FolderSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    currentMasteryScore?: boolean
    masteryHistory?: boolean
    parentId?: boolean
    imageUrls?: boolean
    isPinned?: boolean
  }

  export type FolderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "userId" | "createdAt" | "updatedAt" | "currentMasteryScore" | "masteryHistory" | "parentId" | "imageUrls" | "isPinned", ExtArgs["result"]["folder"]>
  export type FolderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    questionSets?: boolean | Folder$questionSetsArgs<ExtArgs>
    notes?: boolean | Folder$notesArgs<ExtArgs>
    parent?: boolean | Folder$parentArgs<ExtArgs>
    children?: boolean | Folder$childrenArgs<ExtArgs>
    _count?: boolean | FolderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FolderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    parent?: boolean | Folder$parentArgs<ExtArgs>
  }
  export type FolderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    parent?: boolean | Folder$parentArgs<ExtArgs>
  }

  export type $FolderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Folder"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      questionSets: Prisma.$QuestionSetPayload<ExtArgs>[]
      notes: Prisma.$NotePayload<ExtArgs>[]
      parent: Prisma.$FolderPayload<ExtArgs> | null
      children: Prisma.$FolderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      userId: number
      createdAt: Date
      updatedAt: Date
      currentMasteryScore: number | null
      masteryHistory: Prisma.JsonValue[]
      parentId: number | null
      imageUrls: string[]
      isPinned: boolean
    }, ExtArgs["result"]["folder"]>
    composites: {}
  }

  type FolderGetPayload<S extends boolean | null | undefined | FolderDefaultArgs> = $Result.GetResult<Prisma.$FolderPayload, S>

  type FolderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FolderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FolderCountAggregateInputType | true
    }

  export interface FolderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Folder'], meta: { name: 'Folder' } }
    /**
     * Find zero or one Folder that matches the filter.
     * @param {FolderFindUniqueArgs} args - Arguments to find a Folder
     * @example
     * // Get one Folder
     * const folder = await prisma.folder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FolderFindUniqueArgs>(args: SelectSubset<T, FolderFindUniqueArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Folder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FolderFindUniqueOrThrowArgs} args - Arguments to find a Folder
     * @example
     * // Get one Folder
     * const folder = await prisma.folder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FolderFindUniqueOrThrowArgs>(args: SelectSubset<T, FolderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Folder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderFindFirstArgs} args - Arguments to find a Folder
     * @example
     * // Get one Folder
     * const folder = await prisma.folder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FolderFindFirstArgs>(args?: SelectSubset<T, FolderFindFirstArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Folder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderFindFirstOrThrowArgs} args - Arguments to find a Folder
     * @example
     * // Get one Folder
     * const folder = await prisma.folder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FolderFindFirstOrThrowArgs>(args?: SelectSubset<T, FolderFindFirstOrThrowArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Folders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Folders
     * const folders = await prisma.folder.findMany()
     * 
     * // Get first 10 Folders
     * const folders = await prisma.folder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const folderWithIdOnly = await prisma.folder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FolderFindManyArgs>(args?: SelectSubset<T, FolderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Folder.
     * @param {FolderCreateArgs} args - Arguments to create a Folder.
     * @example
     * // Create one Folder
     * const Folder = await prisma.folder.create({
     *   data: {
     *     // ... data to create a Folder
     *   }
     * })
     * 
     */
    create<T extends FolderCreateArgs>(args: SelectSubset<T, FolderCreateArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Folders.
     * @param {FolderCreateManyArgs} args - Arguments to create many Folders.
     * @example
     * // Create many Folders
     * const folder = await prisma.folder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FolderCreateManyArgs>(args?: SelectSubset<T, FolderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Folders and returns the data saved in the database.
     * @param {FolderCreateManyAndReturnArgs} args - Arguments to create many Folders.
     * @example
     * // Create many Folders
     * const folder = await prisma.folder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Folders and only return the `id`
     * const folderWithIdOnly = await prisma.folder.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FolderCreateManyAndReturnArgs>(args?: SelectSubset<T, FolderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Folder.
     * @param {FolderDeleteArgs} args - Arguments to delete one Folder.
     * @example
     * // Delete one Folder
     * const Folder = await prisma.folder.delete({
     *   where: {
     *     // ... filter to delete one Folder
     *   }
     * })
     * 
     */
    delete<T extends FolderDeleteArgs>(args: SelectSubset<T, FolderDeleteArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Folder.
     * @param {FolderUpdateArgs} args - Arguments to update one Folder.
     * @example
     * // Update one Folder
     * const folder = await prisma.folder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FolderUpdateArgs>(args: SelectSubset<T, FolderUpdateArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Folders.
     * @param {FolderDeleteManyArgs} args - Arguments to filter Folders to delete.
     * @example
     * // Delete a few Folders
     * const { count } = await prisma.folder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FolderDeleteManyArgs>(args?: SelectSubset<T, FolderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Folders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Folders
     * const folder = await prisma.folder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FolderUpdateManyArgs>(args: SelectSubset<T, FolderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Folders and returns the data updated in the database.
     * @param {FolderUpdateManyAndReturnArgs} args - Arguments to update many Folders.
     * @example
     * // Update many Folders
     * const folder = await prisma.folder.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Folders and only return the `id`
     * const folderWithIdOnly = await prisma.folder.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FolderUpdateManyAndReturnArgs>(args: SelectSubset<T, FolderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Folder.
     * @param {FolderUpsertArgs} args - Arguments to update or create a Folder.
     * @example
     * // Update or create a Folder
     * const folder = await prisma.folder.upsert({
     *   create: {
     *     // ... data to create a Folder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Folder we want to update
     *   }
     * })
     */
    upsert<T extends FolderUpsertArgs>(args: SelectSubset<T, FolderUpsertArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Folders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderCountArgs} args - Arguments to filter Folders to count.
     * @example
     * // Count the number of Folders
     * const count = await prisma.folder.count({
     *   where: {
     *     // ... the filter for the Folders we want to count
     *   }
     * })
    **/
    count<T extends FolderCountArgs>(
      args?: Subset<T, FolderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FolderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Folder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FolderAggregateArgs>(args: Subset<T, FolderAggregateArgs>): Prisma.PrismaPromise<GetFolderAggregateType<T>>

    /**
     * Group by Folder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FolderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FolderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FolderGroupByArgs['orderBy'] }
        : { orderBy?: FolderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FolderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFolderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Folder model
   */
  readonly fields: FolderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Folder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FolderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    questionSets<T extends Folder$questionSetsArgs<ExtArgs> = {}>(args?: Subset<T, Folder$questionSetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notes<T extends Folder$notesArgs<ExtArgs> = {}>(args?: Subset<T, Folder$notesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    parent<T extends Folder$parentArgs<ExtArgs> = {}>(args?: Subset<T, Folder$parentArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    children<T extends Folder$childrenArgs<ExtArgs> = {}>(args?: Subset<T, Folder$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Folder model
   */
  interface FolderFieldRefs {
    readonly id: FieldRef<"Folder", 'Int'>
    readonly name: FieldRef<"Folder", 'String'>
    readonly description: FieldRef<"Folder", 'String'>
    readonly userId: FieldRef<"Folder", 'Int'>
    readonly createdAt: FieldRef<"Folder", 'DateTime'>
    readonly updatedAt: FieldRef<"Folder", 'DateTime'>
    readonly currentMasteryScore: FieldRef<"Folder", 'Float'>
    readonly masteryHistory: FieldRef<"Folder", 'Json[]'>
    readonly parentId: FieldRef<"Folder", 'Int'>
    readonly imageUrls: FieldRef<"Folder", 'String[]'>
    readonly isPinned: FieldRef<"Folder", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Folder findUnique
   */
  export type FolderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter, which Folder to fetch.
     */
    where: FolderWhereUniqueInput
  }

  /**
   * Folder findUniqueOrThrow
   */
  export type FolderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter, which Folder to fetch.
     */
    where: FolderWhereUniqueInput
  }

  /**
   * Folder findFirst
   */
  export type FolderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter, which Folder to fetch.
     */
    where?: FolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Folders to fetch.
     */
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Folders.
     */
    cursor?: FolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Folders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Folders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Folders.
     */
    distinct?: FolderScalarFieldEnum | FolderScalarFieldEnum[]
  }

  /**
   * Folder findFirstOrThrow
   */
  export type FolderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter, which Folder to fetch.
     */
    where?: FolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Folders to fetch.
     */
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Folders.
     */
    cursor?: FolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Folders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Folders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Folders.
     */
    distinct?: FolderScalarFieldEnum | FolderScalarFieldEnum[]
  }

  /**
   * Folder findMany
   */
  export type FolderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter, which Folders to fetch.
     */
    where?: FolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Folders to fetch.
     */
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Folders.
     */
    cursor?: FolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Folders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Folders.
     */
    skip?: number
    distinct?: FolderScalarFieldEnum | FolderScalarFieldEnum[]
  }

  /**
   * Folder create
   */
  export type FolderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * The data needed to create a Folder.
     */
    data: XOR<FolderCreateInput, FolderUncheckedCreateInput>
  }

  /**
   * Folder createMany
   */
  export type FolderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Folders.
     */
    data: FolderCreateManyInput | FolderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Folder createManyAndReturn
   */
  export type FolderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * The data used to create many Folders.
     */
    data: FolderCreateManyInput | FolderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Folder update
   */
  export type FolderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * The data needed to update a Folder.
     */
    data: XOR<FolderUpdateInput, FolderUncheckedUpdateInput>
    /**
     * Choose, which Folder to update.
     */
    where: FolderWhereUniqueInput
  }

  /**
   * Folder updateMany
   */
  export type FolderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Folders.
     */
    data: XOR<FolderUpdateManyMutationInput, FolderUncheckedUpdateManyInput>
    /**
     * Filter which Folders to update
     */
    where?: FolderWhereInput
    /**
     * Limit how many Folders to update.
     */
    limit?: number
  }

  /**
   * Folder updateManyAndReturn
   */
  export type FolderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * The data used to update Folders.
     */
    data: XOR<FolderUpdateManyMutationInput, FolderUncheckedUpdateManyInput>
    /**
     * Filter which Folders to update
     */
    where?: FolderWhereInput
    /**
     * Limit how many Folders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Folder upsert
   */
  export type FolderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * The filter to search for the Folder to update in case it exists.
     */
    where: FolderWhereUniqueInput
    /**
     * In case the Folder found by the `where` argument doesn't exist, create a new Folder with this data.
     */
    create: XOR<FolderCreateInput, FolderUncheckedCreateInput>
    /**
     * In case the Folder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FolderUpdateInput, FolderUncheckedUpdateInput>
  }

  /**
   * Folder delete
   */
  export type FolderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    /**
     * Filter which Folder to delete.
     */
    where: FolderWhereUniqueInput
  }

  /**
   * Folder deleteMany
   */
  export type FolderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Folders to delete
     */
    where?: FolderWhereInput
    /**
     * Limit how many Folders to delete.
     */
    limit?: number
  }

  /**
   * Folder.questionSets
   */
  export type Folder$questionSetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    where?: QuestionSetWhereInput
    orderBy?: QuestionSetOrderByWithRelationInput | QuestionSetOrderByWithRelationInput[]
    cursor?: QuestionSetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionSetScalarFieldEnum | QuestionSetScalarFieldEnum[]
  }

  /**
   * Folder.notes
   */
  export type Folder$notesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    cursor?: NoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Folder.parent
   */
  export type Folder$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    where?: FolderWhereInput
  }

  /**
   * Folder.children
   */
  export type Folder$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    where?: FolderWhereInput
    orderBy?: FolderOrderByWithRelationInput | FolderOrderByWithRelationInput[]
    cursor?: FolderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FolderScalarFieldEnum | FolderScalarFieldEnum[]
  }

  /**
   * Folder without action
   */
  export type FolderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
  }


  /**
   * Model QuestionSet
   */

  export type AggregateQuestionSet = {
    _count: QuestionSetCountAggregateOutputType | null
    _avg: QuestionSetAvgAggregateOutputType | null
    _sum: QuestionSetSumAggregateOutputType | null
    _min: QuestionSetMinAggregateOutputType | null
    _max: QuestionSetMaxAggregateOutputType | null
  }

  export type QuestionSetAvgAggregateOutputType = {
    id: number | null
    folderId: number | null
    currentIntervalDays: number | null
    exploreScore: number | null
    reviewCount: number | null
    understandScore: number | null
    useScore: number | null
    currentForgottenPercentage: number | null
    currentTotalMasteryScore: number | null
  }

  export type QuestionSetSumAggregateOutputType = {
    id: number | null
    folderId: number | null
    currentIntervalDays: number | null
    exploreScore: number | null
    reviewCount: number | null
    understandScore: number | null
    useScore: number | null
    currentForgottenPercentage: number | null
    currentTotalMasteryScore: number | null
  }

  export type QuestionSetMinAggregateOutputType = {
    id: number | null
    name: string | null
    folderId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    currentIntervalDays: number | null
    exploreScore: number | null
    lastReviewedAt: Date | null
    nextReviewAt: Date | null
    reviewCount: number | null
    understandScore: number | null
    useScore: number | null
    currentForgottenPercentage: number | null
    currentTotalMasteryScore: number | null
    currentUUESetStage: string | null
    source: string | null
    instructions: string | null
    isTracked: boolean | null
    isPinned: boolean | null
  }

  export type QuestionSetMaxAggregateOutputType = {
    id: number | null
    name: string | null
    folderId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    currentIntervalDays: number | null
    exploreScore: number | null
    lastReviewedAt: Date | null
    nextReviewAt: Date | null
    reviewCount: number | null
    understandScore: number | null
    useScore: number | null
    currentForgottenPercentage: number | null
    currentTotalMasteryScore: number | null
    currentUUESetStage: string | null
    source: string | null
    instructions: string | null
    isTracked: boolean | null
    isPinned: boolean | null
  }

  export type QuestionSetCountAggregateOutputType = {
    id: number
    name: number
    folderId: number
    createdAt: number
    updatedAt: number
    currentIntervalDays: number
    exploreScore: number
    lastReviewedAt: number
    nextReviewAt: number
    reviewCount: number
    understandScore: number
    useScore: number
    currentForgottenPercentage: number
    currentTotalMasteryScore: number
    currentUUESetStage: number
    forgettingCurveParams: number
    masteryHistory: number
    source: number
    instructions: number
    isTracked: number
    imageUrls: number
    isPinned: number
    _all: number
  }


  export type QuestionSetAvgAggregateInputType = {
    id?: true
    folderId?: true
    currentIntervalDays?: true
    exploreScore?: true
    reviewCount?: true
    understandScore?: true
    useScore?: true
    currentForgottenPercentage?: true
    currentTotalMasteryScore?: true
  }

  export type QuestionSetSumAggregateInputType = {
    id?: true
    folderId?: true
    currentIntervalDays?: true
    exploreScore?: true
    reviewCount?: true
    understandScore?: true
    useScore?: true
    currentForgottenPercentage?: true
    currentTotalMasteryScore?: true
  }

  export type QuestionSetMinAggregateInputType = {
    id?: true
    name?: true
    folderId?: true
    createdAt?: true
    updatedAt?: true
    currentIntervalDays?: true
    exploreScore?: true
    lastReviewedAt?: true
    nextReviewAt?: true
    reviewCount?: true
    understandScore?: true
    useScore?: true
    currentForgottenPercentage?: true
    currentTotalMasteryScore?: true
    currentUUESetStage?: true
    source?: true
    instructions?: true
    isTracked?: true
    isPinned?: true
  }

  export type QuestionSetMaxAggregateInputType = {
    id?: true
    name?: true
    folderId?: true
    createdAt?: true
    updatedAt?: true
    currentIntervalDays?: true
    exploreScore?: true
    lastReviewedAt?: true
    nextReviewAt?: true
    reviewCount?: true
    understandScore?: true
    useScore?: true
    currentForgottenPercentage?: true
    currentTotalMasteryScore?: true
    currentUUESetStage?: true
    source?: true
    instructions?: true
    isTracked?: true
    isPinned?: true
  }

  export type QuestionSetCountAggregateInputType = {
    id?: true
    name?: true
    folderId?: true
    createdAt?: true
    updatedAt?: true
    currentIntervalDays?: true
    exploreScore?: true
    lastReviewedAt?: true
    nextReviewAt?: true
    reviewCount?: true
    understandScore?: true
    useScore?: true
    currentForgottenPercentage?: true
    currentTotalMasteryScore?: true
    currentUUESetStage?: true
    forgettingCurveParams?: true
    masteryHistory?: true
    source?: true
    instructions?: true
    isTracked?: true
    imageUrls?: true
    isPinned?: true
    _all?: true
  }

  export type QuestionSetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionSet to aggregate.
     */
    where?: QuestionSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionSets to fetch.
     */
    orderBy?: QuestionSetOrderByWithRelationInput | QuestionSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionSets
    **/
    _count?: true | QuestionSetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionSetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionSetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionSetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionSetMaxAggregateInputType
  }

  export type GetQuestionSetAggregateType<T extends QuestionSetAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionSet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionSet[P]>
      : GetScalarType<T[P], AggregateQuestionSet[P]>
  }




  export type QuestionSetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionSetWhereInput
    orderBy?: QuestionSetOrderByWithAggregationInput | QuestionSetOrderByWithAggregationInput[]
    by: QuestionSetScalarFieldEnum[] | QuestionSetScalarFieldEnum
    having?: QuestionSetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionSetCountAggregateInputType | true
    _avg?: QuestionSetAvgAggregateInputType
    _sum?: QuestionSetSumAggregateInputType
    _min?: QuestionSetMinAggregateInputType
    _max?: QuestionSetMaxAggregateInputType
  }

  export type QuestionSetGroupByOutputType = {
    id: number
    name: string
    folderId: number
    createdAt: Date
    updatedAt: Date
    currentIntervalDays: number | null
    exploreScore: number
    lastReviewedAt: Date | null
    nextReviewAt: Date | null
    reviewCount: number
    understandScore: number
    useScore: number
    currentForgottenPercentage: number | null
    currentTotalMasteryScore: number
    currentUUESetStage: string
    forgettingCurveParams: JsonValue | null
    masteryHistory: JsonValue[]
    source: string | null
    instructions: string | null
    isTracked: boolean
    imageUrls: string[]
    isPinned: boolean
    _count: QuestionSetCountAggregateOutputType | null
    _avg: QuestionSetAvgAggregateOutputType | null
    _sum: QuestionSetSumAggregateOutputType | null
    _min: QuestionSetMinAggregateOutputType | null
    _max: QuestionSetMaxAggregateOutputType | null
  }

  type GetQuestionSetGroupByPayload<T extends QuestionSetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionSetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionSetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionSetGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionSetGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    folderId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    currentIntervalDays?: boolean
    exploreScore?: boolean
    lastReviewedAt?: boolean
    nextReviewAt?: boolean
    reviewCount?: boolean
    understandScore?: boolean
    useScore?: boolean
    currentForgottenPercentage?: boolean
    currentTotalMasteryScore?: boolean
    currentUUESetStage?: boolean
    forgettingCurveParams?: boolean
    masteryHistory?: boolean
    source?: boolean
    instructions?: boolean
    isTracked?: boolean
    imageUrls?: boolean
    isPinned?: boolean
    notes?: boolean | QuestionSet$notesArgs<ExtArgs>
    questions?: boolean | QuestionSet$questionsArgs<ExtArgs>
    folder?: boolean | FolderDefaultArgs<ExtArgs>
    userAnswers?: boolean | QuestionSet$userAnswersArgs<ExtArgs>
    _count?: boolean | QuestionSetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionSet"]>

  export type QuestionSetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    folderId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    currentIntervalDays?: boolean
    exploreScore?: boolean
    lastReviewedAt?: boolean
    nextReviewAt?: boolean
    reviewCount?: boolean
    understandScore?: boolean
    useScore?: boolean
    currentForgottenPercentage?: boolean
    currentTotalMasteryScore?: boolean
    currentUUESetStage?: boolean
    forgettingCurveParams?: boolean
    masteryHistory?: boolean
    source?: boolean
    instructions?: boolean
    isTracked?: boolean
    imageUrls?: boolean
    isPinned?: boolean
    folder?: boolean | FolderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionSet"]>

  export type QuestionSetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    folderId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    currentIntervalDays?: boolean
    exploreScore?: boolean
    lastReviewedAt?: boolean
    nextReviewAt?: boolean
    reviewCount?: boolean
    understandScore?: boolean
    useScore?: boolean
    currentForgottenPercentage?: boolean
    currentTotalMasteryScore?: boolean
    currentUUESetStage?: boolean
    forgettingCurveParams?: boolean
    masteryHistory?: boolean
    source?: boolean
    instructions?: boolean
    isTracked?: boolean
    imageUrls?: boolean
    isPinned?: boolean
    folder?: boolean | FolderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionSet"]>

  export type QuestionSetSelectScalar = {
    id?: boolean
    name?: boolean
    folderId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    currentIntervalDays?: boolean
    exploreScore?: boolean
    lastReviewedAt?: boolean
    nextReviewAt?: boolean
    reviewCount?: boolean
    understandScore?: boolean
    useScore?: boolean
    currentForgottenPercentage?: boolean
    currentTotalMasteryScore?: boolean
    currentUUESetStage?: boolean
    forgettingCurveParams?: boolean
    masteryHistory?: boolean
    source?: boolean
    instructions?: boolean
    isTracked?: boolean
    imageUrls?: boolean
    isPinned?: boolean
  }

  export type QuestionSetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "folderId" | "createdAt" | "updatedAt" | "currentIntervalDays" | "exploreScore" | "lastReviewedAt" | "nextReviewAt" | "reviewCount" | "understandScore" | "useScore" | "currentForgottenPercentage" | "currentTotalMasteryScore" | "currentUUESetStage" | "forgettingCurveParams" | "masteryHistory" | "source" | "instructions" | "isTracked" | "imageUrls" | "isPinned", ExtArgs["result"]["questionSet"]>
  export type QuestionSetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notes?: boolean | QuestionSet$notesArgs<ExtArgs>
    questions?: boolean | QuestionSet$questionsArgs<ExtArgs>
    folder?: boolean | FolderDefaultArgs<ExtArgs>
    userAnswers?: boolean | QuestionSet$userAnswersArgs<ExtArgs>
    _count?: boolean | QuestionSetCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestionSetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    folder?: boolean | FolderDefaultArgs<ExtArgs>
  }
  export type QuestionSetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    folder?: boolean | FolderDefaultArgs<ExtArgs>
  }

  export type $QuestionSetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionSet"
    objects: {
      notes: Prisma.$NotePayload<ExtArgs>[]
      questions: Prisma.$QuestionPayload<ExtArgs>[]
      folder: Prisma.$FolderPayload<ExtArgs>
      userAnswers: Prisma.$UserQuestionAnswerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      folderId: number
      createdAt: Date
      updatedAt: Date
      currentIntervalDays: number | null
      exploreScore: number
      lastReviewedAt: Date | null
      nextReviewAt: Date | null
      reviewCount: number
      understandScore: number
      useScore: number
      currentForgottenPercentage: number | null
      currentTotalMasteryScore: number
      currentUUESetStage: string
      forgettingCurveParams: Prisma.JsonValue | null
      masteryHistory: Prisma.JsonValue[]
      source: string | null
      instructions: string | null
      isTracked: boolean
      imageUrls: string[]
      isPinned: boolean
    }, ExtArgs["result"]["questionSet"]>
    composites: {}
  }

  type QuestionSetGetPayload<S extends boolean | null | undefined | QuestionSetDefaultArgs> = $Result.GetResult<Prisma.$QuestionSetPayload, S>

  type QuestionSetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionSetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionSetCountAggregateInputType | true
    }

  export interface QuestionSetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionSet'], meta: { name: 'QuestionSet' } }
    /**
     * Find zero or one QuestionSet that matches the filter.
     * @param {QuestionSetFindUniqueArgs} args - Arguments to find a QuestionSet
     * @example
     * // Get one QuestionSet
     * const questionSet = await prisma.questionSet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionSetFindUniqueArgs>(args: SelectSubset<T, QuestionSetFindUniqueArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuestionSet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionSetFindUniqueOrThrowArgs} args - Arguments to find a QuestionSet
     * @example
     * // Get one QuestionSet
     * const questionSet = await prisma.questionSet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionSetFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionSetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionSet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSetFindFirstArgs} args - Arguments to find a QuestionSet
     * @example
     * // Get one QuestionSet
     * const questionSet = await prisma.questionSet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionSetFindFirstArgs>(args?: SelectSubset<T, QuestionSetFindFirstArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionSet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSetFindFirstOrThrowArgs} args - Arguments to find a QuestionSet
     * @example
     * // Get one QuestionSet
     * const questionSet = await prisma.questionSet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionSetFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionSetFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuestionSets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionSets
     * const questionSets = await prisma.questionSet.findMany()
     * 
     * // Get first 10 QuestionSets
     * const questionSets = await prisma.questionSet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionSetWithIdOnly = await prisma.questionSet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionSetFindManyArgs>(args?: SelectSubset<T, QuestionSetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuestionSet.
     * @param {QuestionSetCreateArgs} args - Arguments to create a QuestionSet.
     * @example
     * // Create one QuestionSet
     * const QuestionSet = await prisma.questionSet.create({
     *   data: {
     *     // ... data to create a QuestionSet
     *   }
     * })
     * 
     */
    create<T extends QuestionSetCreateArgs>(args: SelectSubset<T, QuestionSetCreateArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuestionSets.
     * @param {QuestionSetCreateManyArgs} args - Arguments to create many QuestionSets.
     * @example
     * // Create many QuestionSets
     * const questionSet = await prisma.questionSet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionSetCreateManyArgs>(args?: SelectSubset<T, QuestionSetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuestionSets and returns the data saved in the database.
     * @param {QuestionSetCreateManyAndReturnArgs} args - Arguments to create many QuestionSets.
     * @example
     * // Create many QuestionSets
     * const questionSet = await prisma.questionSet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuestionSets and only return the `id`
     * const questionSetWithIdOnly = await prisma.questionSet.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionSetCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionSetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuestionSet.
     * @param {QuestionSetDeleteArgs} args - Arguments to delete one QuestionSet.
     * @example
     * // Delete one QuestionSet
     * const QuestionSet = await prisma.questionSet.delete({
     *   where: {
     *     // ... filter to delete one QuestionSet
     *   }
     * })
     * 
     */
    delete<T extends QuestionSetDeleteArgs>(args: SelectSubset<T, QuestionSetDeleteArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuestionSet.
     * @param {QuestionSetUpdateArgs} args - Arguments to update one QuestionSet.
     * @example
     * // Update one QuestionSet
     * const questionSet = await prisma.questionSet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionSetUpdateArgs>(args: SelectSubset<T, QuestionSetUpdateArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuestionSets.
     * @param {QuestionSetDeleteManyArgs} args - Arguments to filter QuestionSets to delete.
     * @example
     * // Delete a few QuestionSets
     * const { count } = await prisma.questionSet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionSetDeleteManyArgs>(args?: SelectSubset<T, QuestionSetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionSets
     * const questionSet = await prisma.questionSet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionSetUpdateManyArgs>(args: SelectSubset<T, QuestionSetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionSets and returns the data updated in the database.
     * @param {QuestionSetUpdateManyAndReturnArgs} args - Arguments to update many QuestionSets.
     * @example
     * // Update many QuestionSets
     * const questionSet = await prisma.questionSet.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuestionSets and only return the `id`
     * const questionSetWithIdOnly = await prisma.questionSet.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionSetUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionSetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuestionSet.
     * @param {QuestionSetUpsertArgs} args - Arguments to update or create a QuestionSet.
     * @example
     * // Update or create a QuestionSet
     * const questionSet = await prisma.questionSet.upsert({
     *   create: {
     *     // ... data to create a QuestionSet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionSet we want to update
     *   }
     * })
     */
    upsert<T extends QuestionSetUpsertArgs>(args: SelectSubset<T, QuestionSetUpsertArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuestionSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSetCountArgs} args - Arguments to filter QuestionSets to count.
     * @example
     * // Count the number of QuestionSets
     * const count = await prisma.questionSet.count({
     *   where: {
     *     // ... the filter for the QuestionSets we want to count
     *   }
     * })
    **/
    count<T extends QuestionSetCountArgs>(
      args?: Subset<T, QuestionSetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionSetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionSetAggregateArgs>(args: Subset<T, QuestionSetAggregateArgs>): Prisma.PrismaPromise<GetQuestionSetAggregateType<T>>

    /**
     * Group by QuestionSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionSetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionSetGroupByArgs['orderBy'] }
        : { orderBy?: QuestionSetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionSetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionSetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionSet model
   */
  readonly fields: QuestionSetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionSet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionSetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    notes<T extends QuestionSet$notesArgs<ExtArgs> = {}>(args?: Subset<T, QuestionSet$notesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    questions<T extends QuestionSet$questionsArgs<ExtArgs> = {}>(args?: Subset<T, QuestionSet$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    folder<T extends FolderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FolderDefaultArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    userAnswers<T extends QuestionSet$userAnswersArgs<ExtArgs> = {}>(args?: Subset<T, QuestionSet$userAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionSet model
   */
  interface QuestionSetFieldRefs {
    readonly id: FieldRef<"QuestionSet", 'Int'>
    readonly name: FieldRef<"QuestionSet", 'String'>
    readonly folderId: FieldRef<"QuestionSet", 'Int'>
    readonly createdAt: FieldRef<"QuestionSet", 'DateTime'>
    readonly updatedAt: FieldRef<"QuestionSet", 'DateTime'>
    readonly currentIntervalDays: FieldRef<"QuestionSet", 'Float'>
    readonly exploreScore: FieldRef<"QuestionSet", 'Float'>
    readonly lastReviewedAt: FieldRef<"QuestionSet", 'DateTime'>
    readonly nextReviewAt: FieldRef<"QuestionSet", 'DateTime'>
    readonly reviewCount: FieldRef<"QuestionSet", 'Int'>
    readonly understandScore: FieldRef<"QuestionSet", 'Float'>
    readonly useScore: FieldRef<"QuestionSet", 'Float'>
    readonly currentForgottenPercentage: FieldRef<"QuestionSet", 'Float'>
    readonly currentTotalMasteryScore: FieldRef<"QuestionSet", 'Float'>
    readonly currentUUESetStage: FieldRef<"QuestionSet", 'String'>
    readonly forgettingCurveParams: FieldRef<"QuestionSet", 'Json'>
    readonly masteryHistory: FieldRef<"QuestionSet", 'Json[]'>
    readonly source: FieldRef<"QuestionSet", 'String'>
    readonly instructions: FieldRef<"QuestionSet", 'String'>
    readonly isTracked: FieldRef<"QuestionSet", 'Boolean'>
    readonly imageUrls: FieldRef<"QuestionSet", 'String[]'>
    readonly isPinned: FieldRef<"QuestionSet", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * QuestionSet findUnique
   */
  export type QuestionSetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * Filter, which QuestionSet to fetch.
     */
    where: QuestionSetWhereUniqueInput
  }

  /**
   * QuestionSet findUniqueOrThrow
   */
  export type QuestionSetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * Filter, which QuestionSet to fetch.
     */
    where: QuestionSetWhereUniqueInput
  }

  /**
   * QuestionSet findFirst
   */
  export type QuestionSetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * Filter, which QuestionSet to fetch.
     */
    where?: QuestionSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionSets to fetch.
     */
    orderBy?: QuestionSetOrderByWithRelationInput | QuestionSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionSets.
     */
    cursor?: QuestionSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionSets.
     */
    distinct?: QuestionSetScalarFieldEnum | QuestionSetScalarFieldEnum[]
  }

  /**
   * QuestionSet findFirstOrThrow
   */
  export type QuestionSetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * Filter, which QuestionSet to fetch.
     */
    where?: QuestionSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionSets to fetch.
     */
    orderBy?: QuestionSetOrderByWithRelationInput | QuestionSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionSets.
     */
    cursor?: QuestionSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionSets.
     */
    distinct?: QuestionSetScalarFieldEnum | QuestionSetScalarFieldEnum[]
  }

  /**
   * QuestionSet findMany
   */
  export type QuestionSetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * Filter, which QuestionSets to fetch.
     */
    where?: QuestionSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionSets to fetch.
     */
    orderBy?: QuestionSetOrderByWithRelationInput | QuestionSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionSets.
     */
    cursor?: QuestionSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionSets.
     */
    skip?: number
    distinct?: QuestionSetScalarFieldEnum | QuestionSetScalarFieldEnum[]
  }

  /**
   * QuestionSet create
   */
  export type QuestionSetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionSet.
     */
    data: XOR<QuestionSetCreateInput, QuestionSetUncheckedCreateInput>
  }

  /**
   * QuestionSet createMany
   */
  export type QuestionSetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionSets.
     */
    data: QuestionSetCreateManyInput | QuestionSetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionSet createManyAndReturn
   */
  export type QuestionSetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * The data used to create many QuestionSets.
     */
    data: QuestionSetCreateManyInput | QuestionSetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionSet update
   */
  export type QuestionSetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionSet.
     */
    data: XOR<QuestionSetUpdateInput, QuestionSetUncheckedUpdateInput>
    /**
     * Choose, which QuestionSet to update.
     */
    where: QuestionSetWhereUniqueInput
  }

  /**
   * QuestionSet updateMany
   */
  export type QuestionSetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionSets.
     */
    data: XOR<QuestionSetUpdateManyMutationInput, QuestionSetUncheckedUpdateManyInput>
    /**
     * Filter which QuestionSets to update
     */
    where?: QuestionSetWhereInput
    /**
     * Limit how many QuestionSets to update.
     */
    limit?: number
  }

  /**
   * QuestionSet updateManyAndReturn
   */
  export type QuestionSetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * The data used to update QuestionSets.
     */
    data: XOR<QuestionSetUpdateManyMutationInput, QuestionSetUncheckedUpdateManyInput>
    /**
     * Filter which QuestionSets to update
     */
    where?: QuestionSetWhereInput
    /**
     * Limit how many QuestionSets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionSet upsert
   */
  export type QuestionSetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionSet to update in case it exists.
     */
    where: QuestionSetWhereUniqueInput
    /**
     * In case the QuestionSet found by the `where` argument doesn't exist, create a new QuestionSet with this data.
     */
    create: XOR<QuestionSetCreateInput, QuestionSetUncheckedCreateInput>
    /**
     * In case the QuestionSet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionSetUpdateInput, QuestionSetUncheckedUpdateInput>
  }

  /**
   * QuestionSet delete
   */
  export type QuestionSetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * Filter which QuestionSet to delete.
     */
    where: QuestionSetWhereUniqueInput
  }

  /**
   * QuestionSet deleteMany
   */
  export type QuestionSetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionSets to delete
     */
    where?: QuestionSetWhereInput
    /**
     * Limit how many QuestionSets to delete.
     */
    limit?: number
  }

  /**
   * QuestionSet.notes
   */
  export type QuestionSet$notesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    cursor?: NoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * QuestionSet.questions
   */
  export type QuestionSet$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    cursor?: QuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * QuestionSet.userAnswers
   */
  export type QuestionSet$userAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    where?: UserQuestionAnswerWhereInput
    orderBy?: UserQuestionAnswerOrderByWithRelationInput | UserQuestionAnswerOrderByWithRelationInput[]
    cursor?: UserQuestionAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserQuestionAnswerScalarFieldEnum | UserQuestionAnswerScalarFieldEnum[]
  }

  /**
   * QuestionSet without action
   */
  export type QuestionSetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
  }


  /**
   * Model Question
   */

  export type AggregateQuestion = {
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  export type QuestionAvgAggregateOutputType = {
    id: number | null
    questionSetId: number | null
    totalMarksAvailable: number | null
    currentMasteryScore: number | null
    difficultyScore: number | null
    timesAnsweredCorrectly: number | null
    timesAnsweredIncorrectly: number | null
  }

  export type QuestionSumAggregateOutputType = {
    id: number | null
    questionSetId: number | null
    totalMarksAvailable: number | null
    currentMasteryScore: number | null
    difficultyScore: number | null
    timesAnsweredCorrectly: number | null
    timesAnsweredIncorrectly: number | null
  }

  export type QuestionMinAggregateOutputType = {
    id: number | null
    answer: string | null
    questionSetId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    questionType: string | null
    text: string | null
    lastAnswerCorrect: boolean | null
    uueFocus: string | null
    totalMarksAvailable: number | null
    currentMasteryScore: number | null
    difficultyScore: number | null
    timesAnsweredCorrectly: number | null
    timesAnsweredIncorrectly: number | null
    selfMark: boolean | null
    autoMark: boolean | null
    aiGenerated: boolean | null
    inCat: string | null
  }

  export type QuestionMaxAggregateOutputType = {
    id: number | null
    answer: string | null
    questionSetId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    questionType: string | null
    text: string | null
    lastAnswerCorrect: boolean | null
    uueFocus: string | null
    totalMarksAvailable: number | null
    currentMasteryScore: number | null
    difficultyScore: number | null
    timesAnsweredCorrectly: number | null
    timesAnsweredIncorrectly: number | null
    selfMark: boolean | null
    autoMark: boolean | null
    aiGenerated: boolean | null
    inCat: string | null
  }

  export type QuestionCountAggregateOutputType = {
    id: number
    answer: number
    questionSetId: number
    createdAt: number
    updatedAt: number
    options: number
    questionType: number
    text: number
    conceptTags: number
    lastAnswerCorrect: number
    uueFocus: number
    totalMarksAvailable: number
    markingCriteria: number
    currentMasteryScore: number
    difficultyScore: number
    timesAnsweredCorrectly: number
    timesAnsweredIncorrectly: number
    selfMark: number
    autoMark: number
    aiGenerated: number
    inCat: number
    imageUrls: number
    _all: number
  }


  export type QuestionAvgAggregateInputType = {
    id?: true
    questionSetId?: true
    totalMarksAvailable?: true
    currentMasteryScore?: true
    difficultyScore?: true
    timesAnsweredCorrectly?: true
    timesAnsweredIncorrectly?: true
  }

  export type QuestionSumAggregateInputType = {
    id?: true
    questionSetId?: true
    totalMarksAvailable?: true
    currentMasteryScore?: true
    difficultyScore?: true
    timesAnsweredCorrectly?: true
    timesAnsweredIncorrectly?: true
  }

  export type QuestionMinAggregateInputType = {
    id?: true
    answer?: true
    questionSetId?: true
    createdAt?: true
    updatedAt?: true
    questionType?: true
    text?: true
    lastAnswerCorrect?: true
    uueFocus?: true
    totalMarksAvailable?: true
    currentMasteryScore?: true
    difficultyScore?: true
    timesAnsweredCorrectly?: true
    timesAnsweredIncorrectly?: true
    selfMark?: true
    autoMark?: true
    aiGenerated?: true
    inCat?: true
  }

  export type QuestionMaxAggregateInputType = {
    id?: true
    answer?: true
    questionSetId?: true
    createdAt?: true
    updatedAt?: true
    questionType?: true
    text?: true
    lastAnswerCorrect?: true
    uueFocus?: true
    totalMarksAvailable?: true
    currentMasteryScore?: true
    difficultyScore?: true
    timesAnsweredCorrectly?: true
    timesAnsweredIncorrectly?: true
    selfMark?: true
    autoMark?: true
    aiGenerated?: true
    inCat?: true
  }

  export type QuestionCountAggregateInputType = {
    id?: true
    answer?: true
    questionSetId?: true
    createdAt?: true
    updatedAt?: true
    options?: true
    questionType?: true
    text?: true
    conceptTags?: true
    lastAnswerCorrect?: true
    uueFocus?: true
    totalMarksAvailable?: true
    markingCriteria?: true
    currentMasteryScore?: true
    difficultyScore?: true
    timesAnsweredCorrectly?: true
    timesAnsweredIncorrectly?: true
    selfMark?: true
    autoMark?: true
    aiGenerated?: true
    inCat?: true
    imageUrls?: true
    _all?: true
  }

  export type QuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Question to aggregate.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questions
    **/
    _count?: true | QuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMaxAggregateInputType
  }

  export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion[P]>
      : GetScalarType<T[P], AggregateQuestion[P]>
  }




  export type QuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithAggregationInput | QuestionOrderByWithAggregationInput[]
    by: QuestionScalarFieldEnum[] | QuestionScalarFieldEnum
    having?: QuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCountAggregateInputType | true
    _avg?: QuestionAvgAggregateInputType
    _sum?: QuestionSumAggregateInputType
    _min?: QuestionMinAggregateInputType
    _max?: QuestionMaxAggregateInputType
  }

  export type QuestionGroupByOutputType = {
    id: number
    answer: string | null
    questionSetId: number
    createdAt: Date
    updatedAt: Date
    options: string[]
    questionType: string
    text: string
    conceptTags: string[]
    lastAnswerCorrect: boolean | null
    uueFocus: string
    totalMarksAvailable: number
    markingCriteria: JsonValue | null
    currentMasteryScore: number | null
    difficultyScore: number | null
    timesAnsweredCorrectly: number
    timesAnsweredIncorrectly: number
    selfMark: boolean
    autoMark: boolean
    aiGenerated: boolean
    inCat: string | null
    imageUrls: string[]
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  type GetQuestionGroupByPayload<T extends QuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    answer?: boolean
    questionSetId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    options?: boolean
    questionType?: boolean
    text?: boolean
    conceptTags?: boolean
    lastAnswerCorrect?: boolean
    uueFocus?: boolean
    totalMarksAvailable?: boolean
    markingCriteria?: boolean
    currentMasteryScore?: boolean
    difficultyScore?: boolean
    timesAnsweredCorrectly?: boolean
    timesAnsweredIncorrectly?: boolean
    selfMark?: boolean
    autoMark?: boolean
    aiGenerated?: boolean
    inCat?: boolean
    imageUrls?: boolean
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    userAnswers?: boolean | Question$userAnswersArgs<ExtArgs>
    insightCatalysts?: boolean | Question$insightCatalystsArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    answer?: boolean
    questionSetId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    options?: boolean
    questionType?: boolean
    text?: boolean
    conceptTags?: boolean
    lastAnswerCorrect?: boolean
    uueFocus?: boolean
    totalMarksAvailable?: boolean
    markingCriteria?: boolean
    currentMasteryScore?: boolean
    difficultyScore?: boolean
    timesAnsweredCorrectly?: boolean
    timesAnsweredIncorrectly?: boolean
    selfMark?: boolean
    autoMark?: boolean
    aiGenerated?: boolean
    inCat?: boolean
    imageUrls?: boolean
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    answer?: boolean
    questionSetId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    options?: boolean
    questionType?: boolean
    text?: boolean
    conceptTags?: boolean
    lastAnswerCorrect?: boolean
    uueFocus?: boolean
    totalMarksAvailable?: boolean
    markingCriteria?: boolean
    currentMasteryScore?: boolean
    difficultyScore?: boolean
    timesAnsweredCorrectly?: boolean
    timesAnsweredIncorrectly?: boolean
    selfMark?: boolean
    autoMark?: boolean
    aiGenerated?: boolean
    inCat?: boolean
    imageUrls?: boolean
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectScalar = {
    id?: boolean
    answer?: boolean
    questionSetId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    options?: boolean
    questionType?: boolean
    text?: boolean
    conceptTags?: boolean
    lastAnswerCorrect?: boolean
    uueFocus?: boolean
    totalMarksAvailable?: boolean
    markingCriteria?: boolean
    currentMasteryScore?: boolean
    difficultyScore?: boolean
    timesAnsweredCorrectly?: boolean
    timesAnsweredIncorrectly?: boolean
    selfMark?: boolean
    autoMark?: boolean
    aiGenerated?: boolean
    inCat?: boolean
    imageUrls?: boolean
  }

  export type QuestionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "answer" | "questionSetId" | "createdAt" | "updatedAt" | "options" | "questionType" | "text" | "conceptTags" | "lastAnswerCorrect" | "uueFocus" | "totalMarksAvailable" | "markingCriteria" | "currentMasteryScore" | "difficultyScore" | "timesAnsweredCorrectly" | "timesAnsweredIncorrectly" | "selfMark" | "autoMark" | "aiGenerated" | "inCat" | "imageUrls", ExtArgs["result"]["question"]>
  export type QuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    userAnswers?: boolean | Question$userAnswersArgs<ExtArgs>
    insightCatalysts?: boolean | Question$insightCatalystsArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
  }
  export type QuestionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
  }

  export type $QuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Question"
    objects: {
      questionSet: Prisma.$QuestionSetPayload<ExtArgs>
      userAnswers: Prisma.$UserQuestionAnswerPayload<ExtArgs>[]
      insightCatalysts: Prisma.$InsightCatalystPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      answer: string | null
      questionSetId: number
      createdAt: Date
      updatedAt: Date
      options: string[]
      questionType: string
      text: string
      conceptTags: string[]
      lastAnswerCorrect: boolean | null
      uueFocus: string
      totalMarksAvailable: number
      markingCriteria: Prisma.JsonValue | null
      currentMasteryScore: number | null
      difficultyScore: number | null
      timesAnsweredCorrectly: number
      timesAnsweredIncorrectly: number
      selfMark: boolean
      autoMark: boolean
      aiGenerated: boolean
      inCat: string | null
      imageUrls: string[]
    }, ExtArgs["result"]["question"]>
    composites: {}
  }

  type QuestionGetPayload<S extends boolean | null | undefined | QuestionDefaultArgs> = $Result.GetResult<Prisma.$QuestionPayload, S>

  type QuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionCountAggregateInputType | true
    }

  export interface QuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Question'], meta: { name: 'Question' } }
    /**
     * Find zero or one Question that matches the filter.
     * @param {QuestionFindUniqueArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionFindUniqueArgs>(args: SelectSubset<T, QuestionFindUniqueArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Question that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionFindUniqueOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionFindFirstArgs>(args?: SelectSubset<T, QuestionFindFirstArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.question.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.question.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionWithIdOnly = await prisma.question.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionFindManyArgs>(args?: SelectSubset<T, QuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Question.
     * @param {QuestionCreateArgs} args - Arguments to create a Question.
     * @example
     * // Create one Question
     * const Question = await prisma.question.create({
     *   data: {
     *     // ... data to create a Question
     *   }
     * })
     * 
     */
    create<T extends QuestionCreateArgs>(args: SelectSubset<T, QuestionCreateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Questions.
     * @param {QuestionCreateManyArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionCreateManyArgs>(args?: SelectSubset<T, QuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Questions and returns the data saved in the database.
     * @param {QuestionCreateManyAndReturnArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Questions and only return the `id`
     * const questionWithIdOnly = await prisma.question.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Question.
     * @param {QuestionDeleteArgs} args - Arguments to delete one Question.
     * @example
     * // Delete one Question
     * const Question = await prisma.question.delete({
     *   where: {
     *     // ... filter to delete one Question
     *   }
     * })
     * 
     */
    delete<T extends QuestionDeleteArgs>(args: SelectSubset<T, QuestionDeleteArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Question.
     * @param {QuestionUpdateArgs} args - Arguments to update one Question.
     * @example
     * // Update one Question
     * const question = await prisma.question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionUpdateArgs>(args: SelectSubset<T, QuestionUpdateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Questions.
     * @param {QuestionDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionDeleteManyArgs>(args?: SelectSubset<T, QuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionUpdateManyArgs>(args: SelectSubset<T, QuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions and returns the data updated in the database.
     * @param {QuestionUpdateManyAndReturnArgs} args - Arguments to update many Questions.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Questions and only return the `id`
     * const questionWithIdOnly = await prisma.question.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Question.
     * @param {QuestionUpsertArgs} args - Arguments to update or create a Question.
     * @example
     * // Update or create a Question
     * const question = await prisma.question.upsert({
     *   create: {
     *     // ... data to create a Question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question we want to update
     *   }
     * })
     */
    upsert<T extends QuestionUpsertArgs>(args: SelectSubset<T, QuestionUpsertArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.question.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends QuestionCountArgs>(
      args?: Subset<T, QuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAggregateArgs>(args: Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

    /**
     * Group by Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Question model
   */
  readonly fields: QuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    questionSet<T extends QuestionSetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionSetDefaultArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    userAnswers<T extends Question$userAnswersArgs<ExtArgs> = {}>(args?: Subset<T, Question$userAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    insightCatalysts<T extends Question$insightCatalystsArgs<ExtArgs> = {}>(args?: Subset<T, Question$insightCatalystsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsightCatalystPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Question model
   */
  interface QuestionFieldRefs {
    readonly id: FieldRef<"Question", 'Int'>
    readonly answer: FieldRef<"Question", 'String'>
    readonly questionSetId: FieldRef<"Question", 'Int'>
    readonly createdAt: FieldRef<"Question", 'DateTime'>
    readonly updatedAt: FieldRef<"Question", 'DateTime'>
    readonly options: FieldRef<"Question", 'String[]'>
    readonly questionType: FieldRef<"Question", 'String'>
    readonly text: FieldRef<"Question", 'String'>
    readonly conceptTags: FieldRef<"Question", 'String[]'>
    readonly lastAnswerCorrect: FieldRef<"Question", 'Boolean'>
    readonly uueFocus: FieldRef<"Question", 'String'>
    readonly totalMarksAvailable: FieldRef<"Question", 'Int'>
    readonly markingCriteria: FieldRef<"Question", 'Json'>
    readonly currentMasteryScore: FieldRef<"Question", 'Float'>
    readonly difficultyScore: FieldRef<"Question", 'Float'>
    readonly timesAnsweredCorrectly: FieldRef<"Question", 'Int'>
    readonly timesAnsweredIncorrectly: FieldRef<"Question", 'Int'>
    readonly selfMark: FieldRef<"Question", 'Boolean'>
    readonly autoMark: FieldRef<"Question", 'Boolean'>
    readonly aiGenerated: FieldRef<"Question", 'Boolean'>
    readonly inCat: FieldRef<"Question", 'String'>
    readonly imageUrls: FieldRef<"Question", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * Question findUnique
   */
  export type QuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findUniqueOrThrow
   */
  export type QuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findFirst
   */
  export type QuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findFirstOrThrow
   */
  export type QuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findMany
   */
  export type QuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question create
   */
  export type QuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a Question.
     */
    data: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
  }

  /**
   * Question createMany
   */
  export type QuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Question createManyAndReturn
   */
  export type QuestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question update
   */
  export type QuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a Question.
     */
    data: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
    /**
     * Choose, which Question to update.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question updateMany
   */
  export type QuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to update.
     */
    limit?: number
  }

  /**
   * Question updateManyAndReturn
   */
  export type QuestionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question upsert
   */
  export type QuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the Question to update in case it exists.
     */
    where: QuestionWhereUniqueInput
    /**
     * In case the Question found by the `where` argument doesn't exist, create a new Question with this data.
     */
    create: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
    /**
     * In case the Question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
  }

  /**
   * Question delete
   */
  export type QuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter which Question to delete.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question deleteMany
   */
  export type QuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questions to delete
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to delete.
     */
    limit?: number
  }

  /**
   * Question.userAnswers
   */
  export type Question$userAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    where?: UserQuestionAnswerWhereInput
    orderBy?: UserQuestionAnswerOrderByWithRelationInput | UserQuestionAnswerOrderByWithRelationInput[]
    cursor?: UserQuestionAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserQuestionAnswerScalarFieldEnum | UserQuestionAnswerScalarFieldEnum[]
  }

  /**
   * Question.insightCatalysts
   */
  export type Question$insightCatalystsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsightCatalyst
     */
    select?: InsightCatalystSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsightCatalyst
     */
    omit?: InsightCatalystOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightCatalystInclude<ExtArgs> | null
    where?: InsightCatalystWhereInput
    orderBy?: InsightCatalystOrderByWithRelationInput | InsightCatalystOrderByWithRelationInput[]
    cursor?: InsightCatalystWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InsightCatalystScalarFieldEnum | InsightCatalystScalarFieldEnum[]
  }

  /**
   * Question without action
   */
  export type QuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
  }


  /**
   * Model UserQuestionAnswer
   */

  export type AggregateUserQuestionAnswer = {
    _count: UserQuestionAnswerCountAggregateOutputType | null
    _avg: UserQuestionAnswerAvgAggregateOutputType | null
    _sum: UserQuestionAnswerSumAggregateOutputType | null
    _min: UserQuestionAnswerMinAggregateOutputType | null
    _max: UserQuestionAnswerMaxAggregateOutputType | null
  }

  export type UserQuestionAnswerAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    questionId: number | null
    confidence: number | null
    timeSpent: number | null
    scoreAchieved: number | null
    questionSetId: number | null
    userStudySessionId: number | null
  }

  export type UserQuestionAnswerSumAggregateOutputType = {
    id: number | null
    userId: number | null
    questionId: number | null
    confidence: number | null
    timeSpent: number | null
    scoreAchieved: number | null
    questionSetId: number | null
    userStudySessionId: number | null
  }

  export type UserQuestionAnswerMinAggregateOutputType = {
    id: number | null
    userId: number | null
    questionId: number | null
    isCorrect: boolean | null
    confidence: number | null
    timeSpent: number | null
    answeredAt: Date | null
    scoreAchieved: number | null
    createdAt: Date | null
    feedbackFromAI: string | null
    questionSetId: number | null
    updatedAt: Date | null
    userAnswerText: string | null
    uueFocusTested: string | null
    userStudySessionId: number | null
  }

  export type UserQuestionAnswerMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    questionId: number | null
    isCorrect: boolean | null
    confidence: number | null
    timeSpent: number | null
    answeredAt: Date | null
    scoreAchieved: number | null
    createdAt: Date | null
    feedbackFromAI: string | null
    questionSetId: number | null
    updatedAt: Date | null
    userAnswerText: string | null
    uueFocusTested: string | null
    userStudySessionId: number | null
  }

  export type UserQuestionAnswerCountAggregateOutputType = {
    id: number
    userId: number
    questionId: number
    isCorrect: number
    confidence: number
    timeSpent: number
    answeredAt: number
    scoreAchieved: number
    createdAt: number
    feedbackFromAI: number
    questionSetId: number
    updatedAt: number
    userAnswerText: number
    uueFocusTested: number
    userStudySessionId: number
    _all: number
  }


  export type UserQuestionAnswerAvgAggregateInputType = {
    id?: true
    userId?: true
    questionId?: true
    confidence?: true
    timeSpent?: true
    scoreAchieved?: true
    questionSetId?: true
    userStudySessionId?: true
  }

  export type UserQuestionAnswerSumAggregateInputType = {
    id?: true
    userId?: true
    questionId?: true
    confidence?: true
    timeSpent?: true
    scoreAchieved?: true
    questionSetId?: true
    userStudySessionId?: true
  }

  export type UserQuestionAnswerMinAggregateInputType = {
    id?: true
    userId?: true
    questionId?: true
    isCorrect?: true
    confidence?: true
    timeSpent?: true
    answeredAt?: true
    scoreAchieved?: true
    createdAt?: true
    feedbackFromAI?: true
    questionSetId?: true
    updatedAt?: true
    userAnswerText?: true
    uueFocusTested?: true
    userStudySessionId?: true
  }

  export type UserQuestionAnswerMaxAggregateInputType = {
    id?: true
    userId?: true
    questionId?: true
    isCorrect?: true
    confidence?: true
    timeSpent?: true
    answeredAt?: true
    scoreAchieved?: true
    createdAt?: true
    feedbackFromAI?: true
    questionSetId?: true
    updatedAt?: true
    userAnswerText?: true
    uueFocusTested?: true
    userStudySessionId?: true
  }

  export type UserQuestionAnswerCountAggregateInputType = {
    id?: true
    userId?: true
    questionId?: true
    isCorrect?: true
    confidence?: true
    timeSpent?: true
    answeredAt?: true
    scoreAchieved?: true
    createdAt?: true
    feedbackFromAI?: true
    questionSetId?: true
    updatedAt?: true
    userAnswerText?: true
    uueFocusTested?: true
    userStudySessionId?: true
    _all?: true
  }

  export type UserQuestionAnswerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserQuestionAnswer to aggregate.
     */
    where?: UserQuestionAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserQuestionAnswers to fetch.
     */
    orderBy?: UserQuestionAnswerOrderByWithRelationInput | UserQuestionAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserQuestionAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserQuestionAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserQuestionAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserQuestionAnswers
    **/
    _count?: true | UserQuestionAnswerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserQuestionAnswerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserQuestionAnswerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserQuestionAnswerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserQuestionAnswerMaxAggregateInputType
  }

  export type GetUserQuestionAnswerAggregateType<T extends UserQuestionAnswerAggregateArgs> = {
        [P in keyof T & keyof AggregateUserQuestionAnswer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserQuestionAnswer[P]>
      : GetScalarType<T[P], AggregateUserQuestionAnswer[P]>
  }




  export type UserQuestionAnswerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserQuestionAnswerWhereInput
    orderBy?: UserQuestionAnswerOrderByWithAggregationInput | UserQuestionAnswerOrderByWithAggregationInput[]
    by: UserQuestionAnswerScalarFieldEnum[] | UserQuestionAnswerScalarFieldEnum
    having?: UserQuestionAnswerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserQuestionAnswerCountAggregateInputType | true
    _avg?: UserQuestionAnswerAvgAggregateInputType
    _sum?: UserQuestionAnswerSumAggregateInputType
    _min?: UserQuestionAnswerMinAggregateInputType
    _max?: UserQuestionAnswerMaxAggregateInputType
  }

  export type UserQuestionAnswerGroupByOutputType = {
    id: number
    userId: number
    questionId: number
    isCorrect: boolean
    confidence: number | null
    timeSpent: number
    answeredAt: Date
    scoreAchieved: number
    createdAt: Date
    feedbackFromAI: string | null
    questionSetId: number | null
    updatedAt: Date
    userAnswerText: string | null
    uueFocusTested: string | null
    userStudySessionId: number | null
    _count: UserQuestionAnswerCountAggregateOutputType | null
    _avg: UserQuestionAnswerAvgAggregateOutputType | null
    _sum: UserQuestionAnswerSumAggregateOutputType | null
    _min: UserQuestionAnswerMinAggregateOutputType | null
    _max: UserQuestionAnswerMaxAggregateOutputType | null
  }

  type GetUserQuestionAnswerGroupByPayload<T extends UserQuestionAnswerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserQuestionAnswerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserQuestionAnswerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserQuestionAnswerGroupByOutputType[P]>
            : GetScalarType<T[P], UserQuestionAnswerGroupByOutputType[P]>
        }
      >
    >


  export type UserQuestionAnswerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    questionId?: boolean
    isCorrect?: boolean
    confidence?: boolean
    timeSpent?: boolean
    answeredAt?: boolean
    scoreAchieved?: boolean
    createdAt?: boolean
    feedbackFromAI?: boolean
    questionSetId?: boolean
    updatedAt?: boolean
    userAnswerText?: boolean
    uueFocusTested?: boolean
    userStudySessionId?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    questionSet?: boolean | UserQuestionAnswer$questionSetArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    studySession?: boolean | UserQuestionAnswer$studySessionArgs<ExtArgs>
  }, ExtArgs["result"]["userQuestionAnswer"]>

  export type UserQuestionAnswerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    questionId?: boolean
    isCorrect?: boolean
    confidence?: boolean
    timeSpent?: boolean
    answeredAt?: boolean
    scoreAchieved?: boolean
    createdAt?: boolean
    feedbackFromAI?: boolean
    questionSetId?: boolean
    updatedAt?: boolean
    userAnswerText?: boolean
    uueFocusTested?: boolean
    userStudySessionId?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    questionSet?: boolean | UserQuestionAnswer$questionSetArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    studySession?: boolean | UserQuestionAnswer$studySessionArgs<ExtArgs>
  }, ExtArgs["result"]["userQuestionAnswer"]>

  export type UserQuestionAnswerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    questionId?: boolean
    isCorrect?: boolean
    confidence?: boolean
    timeSpent?: boolean
    answeredAt?: boolean
    scoreAchieved?: boolean
    createdAt?: boolean
    feedbackFromAI?: boolean
    questionSetId?: boolean
    updatedAt?: boolean
    userAnswerText?: boolean
    uueFocusTested?: boolean
    userStudySessionId?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    questionSet?: boolean | UserQuestionAnswer$questionSetArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    studySession?: boolean | UserQuestionAnswer$studySessionArgs<ExtArgs>
  }, ExtArgs["result"]["userQuestionAnswer"]>

  export type UserQuestionAnswerSelectScalar = {
    id?: boolean
    userId?: boolean
    questionId?: boolean
    isCorrect?: boolean
    confidence?: boolean
    timeSpent?: boolean
    answeredAt?: boolean
    scoreAchieved?: boolean
    createdAt?: boolean
    feedbackFromAI?: boolean
    questionSetId?: boolean
    updatedAt?: boolean
    userAnswerText?: boolean
    uueFocusTested?: boolean
    userStudySessionId?: boolean
  }

  export type UserQuestionAnswerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "questionId" | "isCorrect" | "confidence" | "timeSpent" | "answeredAt" | "scoreAchieved" | "createdAt" | "feedbackFromAI" | "questionSetId" | "updatedAt" | "userAnswerText" | "uueFocusTested" | "userStudySessionId", ExtArgs["result"]["userQuestionAnswer"]>
  export type UserQuestionAnswerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    questionSet?: boolean | UserQuestionAnswer$questionSetArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    studySession?: boolean | UserQuestionAnswer$studySessionArgs<ExtArgs>
  }
  export type UserQuestionAnswerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    questionSet?: boolean | UserQuestionAnswer$questionSetArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    studySession?: boolean | UserQuestionAnswer$studySessionArgs<ExtArgs>
  }
  export type UserQuestionAnswerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    questionSet?: boolean | UserQuestionAnswer$questionSetArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    studySession?: boolean | UserQuestionAnswer$studySessionArgs<ExtArgs>
  }

  export type $UserQuestionAnswerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserQuestionAnswer"
    objects: {
      question: Prisma.$QuestionPayload<ExtArgs>
      questionSet: Prisma.$QuestionSetPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
      studySession: Prisma.$UserStudySessionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      questionId: number
      isCorrect: boolean
      confidence: number | null
      timeSpent: number
      answeredAt: Date
      scoreAchieved: number
      createdAt: Date
      feedbackFromAI: string | null
      questionSetId: number | null
      updatedAt: Date
      userAnswerText: string | null
      uueFocusTested: string | null
      userStudySessionId: number | null
    }, ExtArgs["result"]["userQuestionAnswer"]>
    composites: {}
  }

  type UserQuestionAnswerGetPayload<S extends boolean | null | undefined | UserQuestionAnswerDefaultArgs> = $Result.GetResult<Prisma.$UserQuestionAnswerPayload, S>

  type UserQuestionAnswerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserQuestionAnswerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserQuestionAnswerCountAggregateInputType | true
    }

  export interface UserQuestionAnswerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserQuestionAnswer'], meta: { name: 'UserQuestionAnswer' } }
    /**
     * Find zero or one UserQuestionAnswer that matches the filter.
     * @param {UserQuestionAnswerFindUniqueArgs} args - Arguments to find a UserQuestionAnswer
     * @example
     * // Get one UserQuestionAnswer
     * const userQuestionAnswer = await prisma.userQuestionAnswer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserQuestionAnswerFindUniqueArgs>(args: SelectSubset<T, UserQuestionAnswerFindUniqueArgs<ExtArgs>>): Prisma__UserQuestionAnswerClient<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserQuestionAnswer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserQuestionAnswerFindUniqueOrThrowArgs} args - Arguments to find a UserQuestionAnswer
     * @example
     * // Get one UserQuestionAnswer
     * const userQuestionAnswer = await prisma.userQuestionAnswer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserQuestionAnswerFindUniqueOrThrowArgs>(args: SelectSubset<T, UserQuestionAnswerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserQuestionAnswerClient<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserQuestionAnswer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionAnswerFindFirstArgs} args - Arguments to find a UserQuestionAnswer
     * @example
     * // Get one UserQuestionAnswer
     * const userQuestionAnswer = await prisma.userQuestionAnswer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserQuestionAnswerFindFirstArgs>(args?: SelectSubset<T, UserQuestionAnswerFindFirstArgs<ExtArgs>>): Prisma__UserQuestionAnswerClient<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserQuestionAnswer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionAnswerFindFirstOrThrowArgs} args - Arguments to find a UserQuestionAnswer
     * @example
     * // Get one UserQuestionAnswer
     * const userQuestionAnswer = await prisma.userQuestionAnswer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserQuestionAnswerFindFirstOrThrowArgs>(args?: SelectSubset<T, UserQuestionAnswerFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserQuestionAnswerClient<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserQuestionAnswers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionAnswerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserQuestionAnswers
     * const userQuestionAnswers = await prisma.userQuestionAnswer.findMany()
     * 
     * // Get first 10 UserQuestionAnswers
     * const userQuestionAnswers = await prisma.userQuestionAnswer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userQuestionAnswerWithIdOnly = await prisma.userQuestionAnswer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserQuestionAnswerFindManyArgs>(args?: SelectSubset<T, UserQuestionAnswerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserQuestionAnswer.
     * @param {UserQuestionAnswerCreateArgs} args - Arguments to create a UserQuestionAnswer.
     * @example
     * // Create one UserQuestionAnswer
     * const UserQuestionAnswer = await prisma.userQuestionAnswer.create({
     *   data: {
     *     // ... data to create a UserQuestionAnswer
     *   }
     * })
     * 
     */
    create<T extends UserQuestionAnswerCreateArgs>(args: SelectSubset<T, UserQuestionAnswerCreateArgs<ExtArgs>>): Prisma__UserQuestionAnswerClient<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserQuestionAnswers.
     * @param {UserQuestionAnswerCreateManyArgs} args - Arguments to create many UserQuestionAnswers.
     * @example
     * // Create many UserQuestionAnswers
     * const userQuestionAnswer = await prisma.userQuestionAnswer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserQuestionAnswerCreateManyArgs>(args?: SelectSubset<T, UserQuestionAnswerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserQuestionAnswers and returns the data saved in the database.
     * @param {UserQuestionAnswerCreateManyAndReturnArgs} args - Arguments to create many UserQuestionAnswers.
     * @example
     * // Create many UserQuestionAnswers
     * const userQuestionAnswer = await prisma.userQuestionAnswer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserQuestionAnswers and only return the `id`
     * const userQuestionAnswerWithIdOnly = await prisma.userQuestionAnswer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserQuestionAnswerCreateManyAndReturnArgs>(args?: SelectSubset<T, UserQuestionAnswerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserQuestionAnswer.
     * @param {UserQuestionAnswerDeleteArgs} args - Arguments to delete one UserQuestionAnswer.
     * @example
     * // Delete one UserQuestionAnswer
     * const UserQuestionAnswer = await prisma.userQuestionAnswer.delete({
     *   where: {
     *     // ... filter to delete one UserQuestionAnswer
     *   }
     * })
     * 
     */
    delete<T extends UserQuestionAnswerDeleteArgs>(args: SelectSubset<T, UserQuestionAnswerDeleteArgs<ExtArgs>>): Prisma__UserQuestionAnswerClient<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserQuestionAnswer.
     * @param {UserQuestionAnswerUpdateArgs} args - Arguments to update one UserQuestionAnswer.
     * @example
     * // Update one UserQuestionAnswer
     * const userQuestionAnswer = await prisma.userQuestionAnswer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserQuestionAnswerUpdateArgs>(args: SelectSubset<T, UserQuestionAnswerUpdateArgs<ExtArgs>>): Prisma__UserQuestionAnswerClient<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserQuestionAnswers.
     * @param {UserQuestionAnswerDeleteManyArgs} args - Arguments to filter UserQuestionAnswers to delete.
     * @example
     * // Delete a few UserQuestionAnswers
     * const { count } = await prisma.userQuestionAnswer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserQuestionAnswerDeleteManyArgs>(args?: SelectSubset<T, UserQuestionAnswerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserQuestionAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionAnswerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserQuestionAnswers
     * const userQuestionAnswer = await prisma.userQuestionAnswer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserQuestionAnswerUpdateManyArgs>(args: SelectSubset<T, UserQuestionAnswerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserQuestionAnswers and returns the data updated in the database.
     * @param {UserQuestionAnswerUpdateManyAndReturnArgs} args - Arguments to update many UserQuestionAnswers.
     * @example
     * // Update many UserQuestionAnswers
     * const userQuestionAnswer = await prisma.userQuestionAnswer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserQuestionAnswers and only return the `id`
     * const userQuestionAnswerWithIdOnly = await prisma.userQuestionAnswer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserQuestionAnswerUpdateManyAndReturnArgs>(args: SelectSubset<T, UserQuestionAnswerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserQuestionAnswer.
     * @param {UserQuestionAnswerUpsertArgs} args - Arguments to update or create a UserQuestionAnswer.
     * @example
     * // Update or create a UserQuestionAnswer
     * const userQuestionAnswer = await prisma.userQuestionAnswer.upsert({
     *   create: {
     *     // ... data to create a UserQuestionAnswer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserQuestionAnswer we want to update
     *   }
     * })
     */
    upsert<T extends UserQuestionAnswerUpsertArgs>(args: SelectSubset<T, UserQuestionAnswerUpsertArgs<ExtArgs>>): Prisma__UserQuestionAnswerClient<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserQuestionAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionAnswerCountArgs} args - Arguments to filter UserQuestionAnswers to count.
     * @example
     * // Count the number of UserQuestionAnswers
     * const count = await prisma.userQuestionAnswer.count({
     *   where: {
     *     // ... the filter for the UserQuestionAnswers we want to count
     *   }
     * })
    **/
    count<T extends UserQuestionAnswerCountArgs>(
      args?: Subset<T, UserQuestionAnswerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserQuestionAnswerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserQuestionAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionAnswerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserQuestionAnswerAggregateArgs>(args: Subset<T, UserQuestionAnswerAggregateArgs>): Prisma.PrismaPromise<GetUserQuestionAnswerAggregateType<T>>

    /**
     * Group by UserQuestionAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionAnswerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserQuestionAnswerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserQuestionAnswerGroupByArgs['orderBy'] }
        : { orderBy?: UserQuestionAnswerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserQuestionAnswerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserQuestionAnswerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserQuestionAnswer model
   */
  readonly fields: UserQuestionAnswerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserQuestionAnswer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserQuestionAnswerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    questionSet<T extends UserQuestionAnswer$questionSetArgs<ExtArgs> = {}>(args?: Subset<T, UserQuestionAnswer$questionSetArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    studySession<T extends UserQuestionAnswer$studySessionArgs<ExtArgs> = {}>(args?: Subset<T, UserQuestionAnswer$studySessionArgs<ExtArgs>>): Prisma__UserStudySessionClient<$Result.GetResult<Prisma.$UserStudySessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserQuestionAnswer model
   */
  interface UserQuestionAnswerFieldRefs {
    readonly id: FieldRef<"UserQuestionAnswer", 'Int'>
    readonly userId: FieldRef<"UserQuestionAnswer", 'Int'>
    readonly questionId: FieldRef<"UserQuestionAnswer", 'Int'>
    readonly isCorrect: FieldRef<"UserQuestionAnswer", 'Boolean'>
    readonly confidence: FieldRef<"UserQuestionAnswer", 'Int'>
    readonly timeSpent: FieldRef<"UserQuestionAnswer", 'Int'>
    readonly answeredAt: FieldRef<"UserQuestionAnswer", 'DateTime'>
    readonly scoreAchieved: FieldRef<"UserQuestionAnswer", 'Float'>
    readonly createdAt: FieldRef<"UserQuestionAnswer", 'DateTime'>
    readonly feedbackFromAI: FieldRef<"UserQuestionAnswer", 'String'>
    readonly questionSetId: FieldRef<"UserQuestionAnswer", 'Int'>
    readonly updatedAt: FieldRef<"UserQuestionAnswer", 'DateTime'>
    readonly userAnswerText: FieldRef<"UserQuestionAnswer", 'String'>
    readonly uueFocusTested: FieldRef<"UserQuestionAnswer", 'String'>
    readonly userStudySessionId: FieldRef<"UserQuestionAnswer", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserQuestionAnswer findUnique
   */
  export type UserQuestionAnswerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter, which UserQuestionAnswer to fetch.
     */
    where: UserQuestionAnswerWhereUniqueInput
  }

  /**
   * UserQuestionAnswer findUniqueOrThrow
   */
  export type UserQuestionAnswerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter, which UserQuestionAnswer to fetch.
     */
    where: UserQuestionAnswerWhereUniqueInput
  }

  /**
   * UserQuestionAnswer findFirst
   */
  export type UserQuestionAnswerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter, which UserQuestionAnswer to fetch.
     */
    where?: UserQuestionAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserQuestionAnswers to fetch.
     */
    orderBy?: UserQuestionAnswerOrderByWithRelationInput | UserQuestionAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserQuestionAnswers.
     */
    cursor?: UserQuestionAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserQuestionAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserQuestionAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserQuestionAnswers.
     */
    distinct?: UserQuestionAnswerScalarFieldEnum | UserQuestionAnswerScalarFieldEnum[]
  }

  /**
   * UserQuestionAnswer findFirstOrThrow
   */
  export type UserQuestionAnswerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter, which UserQuestionAnswer to fetch.
     */
    where?: UserQuestionAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserQuestionAnswers to fetch.
     */
    orderBy?: UserQuestionAnswerOrderByWithRelationInput | UserQuestionAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserQuestionAnswers.
     */
    cursor?: UserQuestionAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserQuestionAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserQuestionAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserQuestionAnswers.
     */
    distinct?: UserQuestionAnswerScalarFieldEnum | UserQuestionAnswerScalarFieldEnum[]
  }

  /**
   * UserQuestionAnswer findMany
   */
  export type UserQuestionAnswerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter, which UserQuestionAnswers to fetch.
     */
    where?: UserQuestionAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserQuestionAnswers to fetch.
     */
    orderBy?: UserQuestionAnswerOrderByWithRelationInput | UserQuestionAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserQuestionAnswers.
     */
    cursor?: UserQuestionAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserQuestionAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserQuestionAnswers.
     */
    skip?: number
    distinct?: UserQuestionAnswerScalarFieldEnum | UserQuestionAnswerScalarFieldEnum[]
  }

  /**
   * UserQuestionAnswer create
   */
  export type UserQuestionAnswerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * The data needed to create a UserQuestionAnswer.
     */
    data: XOR<UserQuestionAnswerCreateInput, UserQuestionAnswerUncheckedCreateInput>
  }

  /**
   * UserQuestionAnswer createMany
   */
  export type UserQuestionAnswerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserQuestionAnswers.
     */
    data: UserQuestionAnswerCreateManyInput | UserQuestionAnswerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserQuestionAnswer createManyAndReturn
   */
  export type UserQuestionAnswerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * The data used to create many UserQuestionAnswers.
     */
    data: UserQuestionAnswerCreateManyInput | UserQuestionAnswerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserQuestionAnswer update
   */
  export type UserQuestionAnswerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * The data needed to update a UserQuestionAnswer.
     */
    data: XOR<UserQuestionAnswerUpdateInput, UserQuestionAnswerUncheckedUpdateInput>
    /**
     * Choose, which UserQuestionAnswer to update.
     */
    where: UserQuestionAnswerWhereUniqueInput
  }

  /**
   * UserQuestionAnswer updateMany
   */
  export type UserQuestionAnswerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserQuestionAnswers.
     */
    data: XOR<UserQuestionAnswerUpdateManyMutationInput, UserQuestionAnswerUncheckedUpdateManyInput>
    /**
     * Filter which UserQuestionAnswers to update
     */
    where?: UserQuestionAnswerWhereInput
    /**
     * Limit how many UserQuestionAnswers to update.
     */
    limit?: number
  }

  /**
   * UserQuestionAnswer updateManyAndReturn
   */
  export type UserQuestionAnswerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * The data used to update UserQuestionAnswers.
     */
    data: XOR<UserQuestionAnswerUpdateManyMutationInput, UserQuestionAnswerUncheckedUpdateManyInput>
    /**
     * Filter which UserQuestionAnswers to update
     */
    where?: UserQuestionAnswerWhereInput
    /**
     * Limit how many UserQuestionAnswers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserQuestionAnswer upsert
   */
  export type UserQuestionAnswerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * The filter to search for the UserQuestionAnswer to update in case it exists.
     */
    where: UserQuestionAnswerWhereUniqueInput
    /**
     * In case the UserQuestionAnswer found by the `where` argument doesn't exist, create a new UserQuestionAnswer with this data.
     */
    create: XOR<UserQuestionAnswerCreateInput, UserQuestionAnswerUncheckedCreateInput>
    /**
     * In case the UserQuestionAnswer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserQuestionAnswerUpdateInput, UserQuestionAnswerUncheckedUpdateInput>
  }

  /**
   * UserQuestionAnswer delete
   */
  export type UserQuestionAnswerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter which UserQuestionAnswer to delete.
     */
    where: UserQuestionAnswerWhereUniqueInput
  }

  /**
   * UserQuestionAnswer deleteMany
   */
  export type UserQuestionAnswerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserQuestionAnswers to delete
     */
    where?: UserQuestionAnswerWhereInput
    /**
     * Limit how many UserQuestionAnswers to delete.
     */
    limit?: number
  }

  /**
   * UserQuestionAnswer.questionSet
   */
  export type UserQuestionAnswer$questionSetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    where?: QuestionSetWhereInput
  }

  /**
   * UserQuestionAnswer.studySession
   */
  export type UserQuestionAnswer$studySessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudySession
     */
    select?: UserStudySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStudySession
     */
    omit?: UserStudySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudySessionInclude<ExtArgs> | null
    where?: UserStudySessionWhereInput
  }

  /**
   * UserQuestionAnswer without action
   */
  export type UserQuestionAnswerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
  }


  /**
   * Model UserStudySession
   */

  export type AggregateUserStudySession = {
    _count: UserStudySessionCountAggregateOutputType | null
    _avg: UserStudySessionAvgAggregateOutputType | null
    _sum: UserStudySessionSumAggregateOutputType | null
    _min: UserStudySessionMinAggregateOutputType | null
    _max: UserStudySessionMaxAggregateOutputType | null
  }

  export type UserStudySessionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    timeSpentSeconds: number | null
    answeredQuestionsCount: number | null
  }

  export type UserStudySessionSumAggregateOutputType = {
    id: number | null
    userId: number | null
    timeSpentSeconds: number | null
    answeredQuestionsCount: number | null
  }

  export type UserStudySessionMinAggregateOutputType = {
    id: number | null
    userId: number | null
    sessionStartedAt: Date | null
    sessionEndedAt: Date | null
    timeSpentSeconds: number | null
    answeredQuestionsCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserStudySessionMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    sessionStartedAt: Date | null
    sessionEndedAt: Date | null
    timeSpentSeconds: number | null
    answeredQuestionsCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserStudySessionCountAggregateOutputType = {
    id: number
    userId: number
    sessionStartedAt: number
    sessionEndedAt: number
    timeSpentSeconds: number
    answeredQuestionsCount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserStudySessionAvgAggregateInputType = {
    id?: true
    userId?: true
    timeSpentSeconds?: true
    answeredQuestionsCount?: true
  }

  export type UserStudySessionSumAggregateInputType = {
    id?: true
    userId?: true
    timeSpentSeconds?: true
    answeredQuestionsCount?: true
  }

  export type UserStudySessionMinAggregateInputType = {
    id?: true
    userId?: true
    sessionStartedAt?: true
    sessionEndedAt?: true
    timeSpentSeconds?: true
    answeredQuestionsCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserStudySessionMaxAggregateInputType = {
    id?: true
    userId?: true
    sessionStartedAt?: true
    sessionEndedAt?: true
    timeSpentSeconds?: true
    answeredQuestionsCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserStudySessionCountAggregateInputType = {
    id?: true
    userId?: true
    sessionStartedAt?: true
    sessionEndedAt?: true
    timeSpentSeconds?: true
    answeredQuestionsCount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserStudySessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserStudySession to aggregate.
     */
    where?: UserStudySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStudySessions to fetch.
     */
    orderBy?: UserStudySessionOrderByWithRelationInput | UserStudySessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserStudySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStudySessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStudySessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserStudySessions
    **/
    _count?: true | UserStudySessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserStudySessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserStudySessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserStudySessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserStudySessionMaxAggregateInputType
  }

  export type GetUserStudySessionAggregateType<T extends UserStudySessionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserStudySession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserStudySession[P]>
      : GetScalarType<T[P], AggregateUserStudySession[P]>
  }




  export type UserStudySessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStudySessionWhereInput
    orderBy?: UserStudySessionOrderByWithAggregationInput | UserStudySessionOrderByWithAggregationInput[]
    by: UserStudySessionScalarFieldEnum[] | UserStudySessionScalarFieldEnum
    having?: UserStudySessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserStudySessionCountAggregateInputType | true
    _avg?: UserStudySessionAvgAggregateInputType
    _sum?: UserStudySessionSumAggregateInputType
    _min?: UserStudySessionMinAggregateInputType
    _max?: UserStudySessionMaxAggregateInputType
  }

  export type UserStudySessionGroupByOutputType = {
    id: number
    userId: number
    sessionStartedAt: Date | null
    sessionEndedAt: Date
    timeSpentSeconds: number
    answeredQuestionsCount: number
    createdAt: Date
    updatedAt: Date
    _count: UserStudySessionCountAggregateOutputType | null
    _avg: UserStudySessionAvgAggregateOutputType | null
    _sum: UserStudySessionSumAggregateOutputType | null
    _min: UserStudySessionMinAggregateOutputType | null
    _max: UserStudySessionMaxAggregateOutputType | null
  }

  type GetUserStudySessionGroupByPayload<T extends UserStudySessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserStudySessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserStudySessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserStudySessionGroupByOutputType[P]>
            : GetScalarType<T[P], UserStudySessionGroupByOutputType[P]>
        }
      >
    >


  export type UserStudySessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionStartedAt?: boolean
    sessionEndedAt?: boolean
    timeSpentSeconds?: boolean
    answeredQuestionsCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userQuestionAnswers?: boolean | UserStudySession$userQuestionAnswersArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | UserStudySessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userStudySession"]>

  export type UserStudySessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionStartedAt?: boolean
    sessionEndedAt?: boolean
    timeSpentSeconds?: boolean
    answeredQuestionsCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userStudySession"]>

  export type UserStudySessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionStartedAt?: boolean
    sessionEndedAt?: boolean
    timeSpentSeconds?: boolean
    answeredQuestionsCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userStudySession"]>

  export type UserStudySessionSelectScalar = {
    id?: boolean
    userId?: boolean
    sessionStartedAt?: boolean
    sessionEndedAt?: boolean
    timeSpentSeconds?: boolean
    answeredQuestionsCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserStudySessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "sessionStartedAt" | "sessionEndedAt" | "timeSpentSeconds" | "answeredQuestionsCount" | "createdAt" | "updatedAt", ExtArgs["result"]["userStudySession"]>
  export type UserStudySessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userQuestionAnswers?: boolean | UserStudySession$userQuestionAnswersArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | UserStudySessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserStudySessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserStudySessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserStudySessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserStudySession"
    objects: {
      userQuestionAnswers: Prisma.$UserQuestionAnswerPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      sessionStartedAt: Date | null
      sessionEndedAt: Date
      timeSpentSeconds: number
      answeredQuestionsCount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userStudySession"]>
    composites: {}
  }

  type UserStudySessionGetPayload<S extends boolean | null | undefined | UserStudySessionDefaultArgs> = $Result.GetResult<Prisma.$UserStudySessionPayload, S>

  type UserStudySessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserStudySessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserStudySessionCountAggregateInputType | true
    }

  export interface UserStudySessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserStudySession'], meta: { name: 'UserStudySession' } }
    /**
     * Find zero or one UserStudySession that matches the filter.
     * @param {UserStudySessionFindUniqueArgs} args - Arguments to find a UserStudySession
     * @example
     * // Get one UserStudySession
     * const userStudySession = await prisma.userStudySession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserStudySessionFindUniqueArgs>(args: SelectSubset<T, UserStudySessionFindUniqueArgs<ExtArgs>>): Prisma__UserStudySessionClient<$Result.GetResult<Prisma.$UserStudySessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserStudySession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserStudySessionFindUniqueOrThrowArgs} args - Arguments to find a UserStudySession
     * @example
     * // Get one UserStudySession
     * const userStudySession = await prisma.userStudySession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserStudySessionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserStudySessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserStudySessionClient<$Result.GetResult<Prisma.$UserStudySessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserStudySession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStudySessionFindFirstArgs} args - Arguments to find a UserStudySession
     * @example
     * // Get one UserStudySession
     * const userStudySession = await prisma.userStudySession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserStudySessionFindFirstArgs>(args?: SelectSubset<T, UserStudySessionFindFirstArgs<ExtArgs>>): Prisma__UserStudySessionClient<$Result.GetResult<Prisma.$UserStudySessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserStudySession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStudySessionFindFirstOrThrowArgs} args - Arguments to find a UserStudySession
     * @example
     * // Get one UserStudySession
     * const userStudySession = await prisma.userStudySession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserStudySessionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserStudySessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserStudySessionClient<$Result.GetResult<Prisma.$UserStudySessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserStudySessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStudySessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserStudySessions
     * const userStudySessions = await prisma.userStudySession.findMany()
     * 
     * // Get first 10 UserStudySessions
     * const userStudySessions = await prisma.userStudySession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userStudySessionWithIdOnly = await prisma.userStudySession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserStudySessionFindManyArgs>(args?: SelectSubset<T, UserStudySessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStudySessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserStudySession.
     * @param {UserStudySessionCreateArgs} args - Arguments to create a UserStudySession.
     * @example
     * // Create one UserStudySession
     * const UserStudySession = await prisma.userStudySession.create({
     *   data: {
     *     // ... data to create a UserStudySession
     *   }
     * })
     * 
     */
    create<T extends UserStudySessionCreateArgs>(args: SelectSubset<T, UserStudySessionCreateArgs<ExtArgs>>): Prisma__UserStudySessionClient<$Result.GetResult<Prisma.$UserStudySessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserStudySessions.
     * @param {UserStudySessionCreateManyArgs} args - Arguments to create many UserStudySessions.
     * @example
     * // Create many UserStudySessions
     * const userStudySession = await prisma.userStudySession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserStudySessionCreateManyArgs>(args?: SelectSubset<T, UserStudySessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserStudySessions and returns the data saved in the database.
     * @param {UserStudySessionCreateManyAndReturnArgs} args - Arguments to create many UserStudySessions.
     * @example
     * // Create many UserStudySessions
     * const userStudySession = await prisma.userStudySession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserStudySessions and only return the `id`
     * const userStudySessionWithIdOnly = await prisma.userStudySession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserStudySessionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserStudySessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStudySessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserStudySession.
     * @param {UserStudySessionDeleteArgs} args - Arguments to delete one UserStudySession.
     * @example
     * // Delete one UserStudySession
     * const UserStudySession = await prisma.userStudySession.delete({
     *   where: {
     *     // ... filter to delete one UserStudySession
     *   }
     * })
     * 
     */
    delete<T extends UserStudySessionDeleteArgs>(args: SelectSubset<T, UserStudySessionDeleteArgs<ExtArgs>>): Prisma__UserStudySessionClient<$Result.GetResult<Prisma.$UserStudySessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserStudySession.
     * @param {UserStudySessionUpdateArgs} args - Arguments to update one UserStudySession.
     * @example
     * // Update one UserStudySession
     * const userStudySession = await prisma.userStudySession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserStudySessionUpdateArgs>(args: SelectSubset<T, UserStudySessionUpdateArgs<ExtArgs>>): Prisma__UserStudySessionClient<$Result.GetResult<Prisma.$UserStudySessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserStudySessions.
     * @param {UserStudySessionDeleteManyArgs} args - Arguments to filter UserStudySessions to delete.
     * @example
     * // Delete a few UserStudySessions
     * const { count } = await prisma.userStudySession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserStudySessionDeleteManyArgs>(args?: SelectSubset<T, UserStudySessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserStudySessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStudySessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserStudySessions
     * const userStudySession = await prisma.userStudySession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserStudySessionUpdateManyArgs>(args: SelectSubset<T, UserStudySessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserStudySessions and returns the data updated in the database.
     * @param {UserStudySessionUpdateManyAndReturnArgs} args - Arguments to update many UserStudySessions.
     * @example
     * // Update many UserStudySessions
     * const userStudySession = await prisma.userStudySession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserStudySessions and only return the `id`
     * const userStudySessionWithIdOnly = await prisma.userStudySession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserStudySessionUpdateManyAndReturnArgs>(args: SelectSubset<T, UserStudySessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStudySessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserStudySession.
     * @param {UserStudySessionUpsertArgs} args - Arguments to update or create a UserStudySession.
     * @example
     * // Update or create a UserStudySession
     * const userStudySession = await prisma.userStudySession.upsert({
     *   create: {
     *     // ... data to create a UserStudySession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserStudySession we want to update
     *   }
     * })
     */
    upsert<T extends UserStudySessionUpsertArgs>(args: SelectSubset<T, UserStudySessionUpsertArgs<ExtArgs>>): Prisma__UserStudySessionClient<$Result.GetResult<Prisma.$UserStudySessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserStudySessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStudySessionCountArgs} args - Arguments to filter UserStudySessions to count.
     * @example
     * // Count the number of UserStudySessions
     * const count = await prisma.userStudySession.count({
     *   where: {
     *     // ... the filter for the UserStudySessions we want to count
     *   }
     * })
    **/
    count<T extends UserStudySessionCountArgs>(
      args?: Subset<T, UserStudySessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserStudySessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserStudySession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStudySessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserStudySessionAggregateArgs>(args: Subset<T, UserStudySessionAggregateArgs>): Prisma.PrismaPromise<GetUserStudySessionAggregateType<T>>

    /**
     * Group by UserStudySession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStudySessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserStudySessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserStudySessionGroupByArgs['orderBy'] }
        : { orderBy?: UserStudySessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserStudySessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserStudySessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserStudySession model
   */
  readonly fields: UserStudySessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserStudySession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserStudySessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userQuestionAnswers<T extends UserStudySession$userQuestionAnswersArgs<ExtArgs> = {}>(args?: Subset<T, UserStudySession$userQuestionAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserStudySession model
   */
  interface UserStudySessionFieldRefs {
    readonly id: FieldRef<"UserStudySession", 'Int'>
    readonly userId: FieldRef<"UserStudySession", 'Int'>
    readonly sessionStartedAt: FieldRef<"UserStudySession", 'DateTime'>
    readonly sessionEndedAt: FieldRef<"UserStudySession", 'DateTime'>
    readonly timeSpentSeconds: FieldRef<"UserStudySession", 'Int'>
    readonly answeredQuestionsCount: FieldRef<"UserStudySession", 'Int'>
    readonly createdAt: FieldRef<"UserStudySession", 'DateTime'>
    readonly updatedAt: FieldRef<"UserStudySession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserStudySession findUnique
   */
  export type UserStudySessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudySession
     */
    select?: UserStudySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStudySession
     */
    omit?: UserStudySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudySessionInclude<ExtArgs> | null
    /**
     * Filter, which UserStudySession to fetch.
     */
    where: UserStudySessionWhereUniqueInput
  }

  /**
   * UserStudySession findUniqueOrThrow
   */
  export type UserStudySessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudySession
     */
    select?: UserStudySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStudySession
     */
    omit?: UserStudySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudySessionInclude<ExtArgs> | null
    /**
     * Filter, which UserStudySession to fetch.
     */
    where: UserStudySessionWhereUniqueInput
  }

  /**
   * UserStudySession findFirst
   */
  export type UserStudySessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudySession
     */
    select?: UserStudySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStudySession
     */
    omit?: UserStudySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudySessionInclude<ExtArgs> | null
    /**
     * Filter, which UserStudySession to fetch.
     */
    where?: UserStudySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStudySessions to fetch.
     */
    orderBy?: UserStudySessionOrderByWithRelationInput | UserStudySessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserStudySessions.
     */
    cursor?: UserStudySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStudySessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStudySessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserStudySessions.
     */
    distinct?: UserStudySessionScalarFieldEnum | UserStudySessionScalarFieldEnum[]
  }

  /**
   * UserStudySession findFirstOrThrow
   */
  export type UserStudySessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudySession
     */
    select?: UserStudySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStudySession
     */
    omit?: UserStudySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudySessionInclude<ExtArgs> | null
    /**
     * Filter, which UserStudySession to fetch.
     */
    where?: UserStudySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStudySessions to fetch.
     */
    orderBy?: UserStudySessionOrderByWithRelationInput | UserStudySessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserStudySessions.
     */
    cursor?: UserStudySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStudySessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStudySessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserStudySessions.
     */
    distinct?: UserStudySessionScalarFieldEnum | UserStudySessionScalarFieldEnum[]
  }

  /**
   * UserStudySession findMany
   */
  export type UserStudySessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudySession
     */
    select?: UserStudySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStudySession
     */
    omit?: UserStudySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudySessionInclude<ExtArgs> | null
    /**
     * Filter, which UserStudySessions to fetch.
     */
    where?: UserStudySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStudySessions to fetch.
     */
    orderBy?: UserStudySessionOrderByWithRelationInput | UserStudySessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserStudySessions.
     */
    cursor?: UserStudySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStudySessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStudySessions.
     */
    skip?: number
    distinct?: UserStudySessionScalarFieldEnum | UserStudySessionScalarFieldEnum[]
  }

  /**
   * UserStudySession create
   */
  export type UserStudySessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudySession
     */
    select?: UserStudySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStudySession
     */
    omit?: UserStudySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudySessionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserStudySession.
     */
    data: XOR<UserStudySessionCreateInput, UserStudySessionUncheckedCreateInput>
  }

  /**
   * UserStudySession createMany
   */
  export type UserStudySessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserStudySessions.
     */
    data: UserStudySessionCreateManyInput | UserStudySessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserStudySession createManyAndReturn
   */
  export type UserStudySessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudySession
     */
    select?: UserStudySessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserStudySession
     */
    omit?: UserStudySessionOmit<ExtArgs> | null
    /**
     * The data used to create many UserStudySessions.
     */
    data: UserStudySessionCreateManyInput | UserStudySessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudySessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserStudySession update
   */
  export type UserStudySessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudySession
     */
    select?: UserStudySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStudySession
     */
    omit?: UserStudySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudySessionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserStudySession.
     */
    data: XOR<UserStudySessionUpdateInput, UserStudySessionUncheckedUpdateInput>
    /**
     * Choose, which UserStudySession to update.
     */
    where: UserStudySessionWhereUniqueInput
  }

  /**
   * UserStudySession updateMany
   */
  export type UserStudySessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserStudySessions.
     */
    data: XOR<UserStudySessionUpdateManyMutationInput, UserStudySessionUncheckedUpdateManyInput>
    /**
     * Filter which UserStudySessions to update
     */
    where?: UserStudySessionWhereInput
    /**
     * Limit how many UserStudySessions to update.
     */
    limit?: number
  }

  /**
   * UserStudySession updateManyAndReturn
   */
  export type UserStudySessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudySession
     */
    select?: UserStudySessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserStudySession
     */
    omit?: UserStudySessionOmit<ExtArgs> | null
    /**
     * The data used to update UserStudySessions.
     */
    data: XOR<UserStudySessionUpdateManyMutationInput, UserStudySessionUncheckedUpdateManyInput>
    /**
     * Filter which UserStudySessions to update
     */
    where?: UserStudySessionWhereInput
    /**
     * Limit how many UserStudySessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudySessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserStudySession upsert
   */
  export type UserStudySessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudySession
     */
    select?: UserStudySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStudySession
     */
    omit?: UserStudySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudySessionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserStudySession to update in case it exists.
     */
    where: UserStudySessionWhereUniqueInput
    /**
     * In case the UserStudySession found by the `where` argument doesn't exist, create a new UserStudySession with this data.
     */
    create: XOR<UserStudySessionCreateInput, UserStudySessionUncheckedCreateInput>
    /**
     * In case the UserStudySession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserStudySessionUpdateInput, UserStudySessionUncheckedUpdateInput>
  }

  /**
   * UserStudySession delete
   */
  export type UserStudySessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudySession
     */
    select?: UserStudySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStudySession
     */
    omit?: UserStudySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudySessionInclude<ExtArgs> | null
    /**
     * Filter which UserStudySession to delete.
     */
    where: UserStudySessionWhereUniqueInput
  }

  /**
   * UserStudySession deleteMany
   */
  export type UserStudySessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserStudySessions to delete
     */
    where?: UserStudySessionWhereInput
    /**
     * Limit how many UserStudySessions to delete.
     */
    limit?: number
  }

  /**
   * UserStudySession.userQuestionAnswers
   */
  export type UserStudySession$userQuestionAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    where?: UserQuestionAnswerWhereInput
    orderBy?: UserQuestionAnswerOrderByWithRelationInput | UserQuestionAnswerOrderByWithRelationInput[]
    cursor?: UserQuestionAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserQuestionAnswerScalarFieldEnum | UserQuestionAnswerScalarFieldEnum[]
  }

  /**
   * UserStudySession without action
   */
  export type UserStudySessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStudySession
     */
    select?: UserStudySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStudySession
     */
    omit?: UserStudySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStudySessionInclude<ExtArgs> | null
  }


  /**
   * Model Note
   */

  export type AggregateNote = {
    _count: NoteCountAggregateOutputType | null
    _avg: NoteAvgAggregateOutputType | null
    _sum: NoteSumAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  export type NoteAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    folderId: number | null
    questionSetId: number | null
  }

  export type NoteSumAggregateOutputType = {
    id: number | null
    userId: number | null
    folderId: number | null
    questionSetId: number | null
  }

  export type NoteMinAggregateOutputType = {
    id: number | null
    title: string | null
    plainText: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    folderId: number | null
    questionSetId: number | null
  }

  export type NoteMaxAggregateOutputType = {
    id: number | null
    title: string | null
    plainText: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    folderId: number | null
    questionSetId: number | null
  }

  export type NoteCountAggregateOutputType = {
    id: number
    title: number
    content: number
    plainText: number
    createdAt: number
    updatedAt: number
    userId: number
    folderId: number
    questionSetId: number
    _all: number
  }


  export type NoteAvgAggregateInputType = {
    id?: true
    userId?: true
    folderId?: true
    questionSetId?: true
  }

  export type NoteSumAggregateInputType = {
    id?: true
    userId?: true
    folderId?: true
    questionSetId?: true
  }

  export type NoteMinAggregateInputType = {
    id?: true
    title?: true
    plainText?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    folderId?: true
    questionSetId?: true
  }

  export type NoteMaxAggregateInputType = {
    id?: true
    title?: true
    plainText?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    folderId?: true
    questionSetId?: true
  }

  export type NoteCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    plainText?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    folderId?: true
    questionSetId?: true
    _all?: true
  }

  export type NoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Note to aggregate.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notes
    **/
    _count?: true | NoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NoteMaxAggregateInputType
  }

  export type GetNoteAggregateType<T extends NoteAggregateArgs> = {
        [P in keyof T & keyof AggregateNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNote[P]>
      : GetScalarType<T[P], AggregateNote[P]>
  }




  export type NoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithAggregationInput | NoteOrderByWithAggregationInput[]
    by: NoteScalarFieldEnum[] | NoteScalarFieldEnum
    having?: NoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NoteCountAggregateInputType | true
    _avg?: NoteAvgAggregateInputType
    _sum?: NoteSumAggregateInputType
    _min?: NoteMinAggregateInputType
    _max?: NoteMaxAggregateInputType
  }

  export type NoteGroupByOutputType = {
    id: number
    title: string
    content: JsonValue
    plainText: string | null
    createdAt: Date
    updatedAt: Date
    userId: number
    folderId: number | null
    questionSetId: number | null
    _count: NoteCountAggregateOutputType | null
    _avg: NoteAvgAggregateOutputType | null
    _sum: NoteSumAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  type GetNoteGroupByPayload<T extends NoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NoteGroupByOutputType[P]>
            : GetScalarType<T[P], NoteGroupByOutputType[P]>
        }
      >
    >


  export type NoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    plainText?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    folderId?: boolean
    questionSetId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    folder?: boolean | Note$folderArgs<ExtArgs>
    questionSet?: boolean | Note$questionSetArgs<ExtArgs>
    insightCatalysts?: boolean | Note$insightCatalystsArgs<ExtArgs>
    _count?: boolean | NoteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["note"]>

  export type NoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    plainText?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    folderId?: boolean
    questionSetId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    folder?: boolean | Note$folderArgs<ExtArgs>
    questionSet?: boolean | Note$questionSetArgs<ExtArgs>
  }, ExtArgs["result"]["note"]>

  export type NoteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    plainText?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    folderId?: boolean
    questionSetId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    folder?: boolean | Note$folderArgs<ExtArgs>
    questionSet?: boolean | Note$questionSetArgs<ExtArgs>
  }, ExtArgs["result"]["note"]>

  export type NoteSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    plainText?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    folderId?: boolean
    questionSetId?: boolean
  }

  export type NoteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "content" | "plainText" | "createdAt" | "updatedAt" | "userId" | "folderId" | "questionSetId", ExtArgs["result"]["note"]>
  export type NoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    folder?: boolean | Note$folderArgs<ExtArgs>
    questionSet?: boolean | Note$questionSetArgs<ExtArgs>
    insightCatalysts?: boolean | Note$insightCatalystsArgs<ExtArgs>
    _count?: boolean | NoteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type NoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    folder?: boolean | Note$folderArgs<ExtArgs>
    questionSet?: boolean | Note$questionSetArgs<ExtArgs>
  }
  export type NoteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    folder?: boolean | Note$folderArgs<ExtArgs>
    questionSet?: boolean | Note$questionSetArgs<ExtArgs>
  }

  export type $NotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Note"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      folder: Prisma.$FolderPayload<ExtArgs> | null
      questionSet: Prisma.$QuestionSetPayload<ExtArgs> | null
      insightCatalysts: Prisma.$InsightCatalystPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      content: Prisma.JsonValue
      plainText: string | null
      createdAt: Date
      updatedAt: Date
      userId: number
      folderId: number | null
      questionSetId: number | null
    }, ExtArgs["result"]["note"]>
    composites: {}
  }

  type NoteGetPayload<S extends boolean | null | undefined | NoteDefaultArgs> = $Result.GetResult<Prisma.$NotePayload, S>

  type NoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NoteCountAggregateInputType | true
    }

  export interface NoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Note'], meta: { name: 'Note' } }
    /**
     * Find zero or one Note that matches the filter.
     * @param {NoteFindUniqueArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NoteFindUniqueArgs>(args: SelectSubset<T, NoteFindUniqueArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Note that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NoteFindUniqueOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NoteFindUniqueOrThrowArgs>(args: SelectSubset<T, NoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Note that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NoteFindFirstArgs>(args?: SelectSubset<T, NoteFindFirstArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Note that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NoteFindFirstOrThrowArgs>(args?: SelectSubset<T, NoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notes
     * const notes = await prisma.note.findMany()
     * 
     * // Get first 10 Notes
     * const notes = await prisma.note.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const noteWithIdOnly = await prisma.note.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NoteFindManyArgs>(args?: SelectSubset<T, NoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Note.
     * @param {NoteCreateArgs} args - Arguments to create a Note.
     * @example
     * // Create one Note
     * const Note = await prisma.note.create({
     *   data: {
     *     // ... data to create a Note
     *   }
     * })
     * 
     */
    create<T extends NoteCreateArgs>(args: SelectSubset<T, NoteCreateArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notes.
     * @param {NoteCreateManyArgs} args - Arguments to create many Notes.
     * @example
     * // Create many Notes
     * const note = await prisma.note.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NoteCreateManyArgs>(args?: SelectSubset<T, NoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notes and returns the data saved in the database.
     * @param {NoteCreateManyAndReturnArgs} args - Arguments to create many Notes.
     * @example
     * // Create many Notes
     * const note = await prisma.note.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notes and only return the `id`
     * const noteWithIdOnly = await prisma.note.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NoteCreateManyAndReturnArgs>(args?: SelectSubset<T, NoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Note.
     * @param {NoteDeleteArgs} args - Arguments to delete one Note.
     * @example
     * // Delete one Note
     * const Note = await prisma.note.delete({
     *   where: {
     *     // ... filter to delete one Note
     *   }
     * })
     * 
     */
    delete<T extends NoteDeleteArgs>(args: SelectSubset<T, NoteDeleteArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Note.
     * @param {NoteUpdateArgs} args - Arguments to update one Note.
     * @example
     * // Update one Note
     * const note = await prisma.note.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NoteUpdateArgs>(args: SelectSubset<T, NoteUpdateArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notes.
     * @param {NoteDeleteManyArgs} args - Arguments to filter Notes to delete.
     * @example
     * // Delete a few Notes
     * const { count } = await prisma.note.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NoteDeleteManyArgs>(args?: SelectSubset<T, NoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notes
     * const note = await prisma.note.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NoteUpdateManyArgs>(args: SelectSubset<T, NoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notes and returns the data updated in the database.
     * @param {NoteUpdateManyAndReturnArgs} args - Arguments to update many Notes.
     * @example
     * // Update many Notes
     * const note = await prisma.note.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notes and only return the `id`
     * const noteWithIdOnly = await prisma.note.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NoteUpdateManyAndReturnArgs>(args: SelectSubset<T, NoteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Note.
     * @param {NoteUpsertArgs} args - Arguments to update or create a Note.
     * @example
     * // Update or create a Note
     * const note = await prisma.note.upsert({
     *   create: {
     *     // ... data to create a Note
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Note we want to update
     *   }
     * })
     */
    upsert<T extends NoteUpsertArgs>(args: SelectSubset<T, NoteUpsertArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteCountArgs} args - Arguments to filter Notes to count.
     * @example
     * // Count the number of Notes
     * const count = await prisma.note.count({
     *   where: {
     *     // ... the filter for the Notes we want to count
     *   }
     * })
    **/
    count<T extends NoteCountArgs>(
      args?: Subset<T, NoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoteAggregateArgs>(args: Subset<T, NoteAggregateArgs>): Prisma.PrismaPromise<GetNoteAggregateType<T>>

    /**
     * Group by Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NoteGroupByArgs['orderBy'] }
        : { orderBy?: NoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Note model
   */
  readonly fields: NoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Note.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    folder<T extends Note$folderArgs<ExtArgs> = {}>(args?: Subset<T, Note$folderArgs<ExtArgs>>): Prisma__FolderClient<$Result.GetResult<Prisma.$FolderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    questionSet<T extends Note$questionSetArgs<ExtArgs> = {}>(args?: Subset<T, Note$questionSetArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    insightCatalysts<T extends Note$insightCatalystsArgs<ExtArgs> = {}>(args?: Subset<T, Note$insightCatalystsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsightCatalystPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Note model
   */
  interface NoteFieldRefs {
    readonly id: FieldRef<"Note", 'Int'>
    readonly title: FieldRef<"Note", 'String'>
    readonly content: FieldRef<"Note", 'Json'>
    readonly plainText: FieldRef<"Note", 'String'>
    readonly createdAt: FieldRef<"Note", 'DateTime'>
    readonly updatedAt: FieldRef<"Note", 'DateTime'>
    readonly userId: FieldRef<"Note", 'Int'>
    readonly folderId: FieldRef<"Note", 'Int'>
    readonly questionSetId: FieldRef<"Note", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Note findUnique
   */
  export type NoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note findUniqueOrThrow
   */
  export type NoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note findFirst
   */
  export type NoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note findFirstOrThrow
   */
  export type NoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note findMany
   */
  export type NoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Notes to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note create
   */
  export type NoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The data needed to create a Note.
     */
    data: XOR<NoteCreateInput, NoteUncheckedCreateInput>
  }

  /**
   * Note createMany
   */
  export type NoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notes.
     */
    data: NoteCreateManyInput | NoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Note createManyAndReturn
   */
  export type NoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * The data used to create many Notes.
     */
    data: NoteCreateManyInput | NoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Note update
   */
  export type NoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The data needed to update a Note.
     */
    data: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
    /**
     * Choose, which Note to update.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note updateMany
   */
  export type NoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notes.
     */
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyInput>
    /**
     * Filter which Notes to update
     */
    where?: NoteWhereInput
    /**
     * Limit how many Notes to update.
     */
    limit?: number
  }

  /**
   * Note updateManyAndReturn
   */
  export type NoteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * The data used to update Notes.
     */
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyInput>
    /**
     * Filter which Notes to update
     */
    where?: NoteWhereInput
    /**
     * Limit how many Notes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Note upsert
   */
  export type NoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The filter to search for the Note to update in case it exists.
     */
    where: NoteWhereUniqueInput
    /**
     * In case the Note found by the `where` argument doesn't exist, create a new Note with this data.
     */
    create: XOR<NoteCreateInput, NoteUncheckedCreateInput>
    /**
     * In case the Note was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
  }

  /**
   * Note delete
   */
  export type NoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter which Note to delete.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note deleteMany
   */
  export type NoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notes to delete
     */
    where?: NoteWhereInput
    /**
     * Limit how many Notes to delete.
     */
    limit?: number
  }

  /**
   * Note.folder
   */
  export type Note$folderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Folder
     */
    select?: FolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Folder
     */
    omit?: FolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FolderInclude<ExtArgs> | null
    where?: FolderWhereInput
  }

  /**
   * Note.questionSet
   */
  export type Note$questionSetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    where?: QuestionSetWhereInput
  }

  /**
   * Note.insightCatalysts
   */
  export type Note$insightCatalystsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsightCatalyst
     */
    select?: InsightCatalystSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsightCatalyst
     */
    omit?: InsightCatalystOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightCatalystInclude<ExtArgs> | null
    where?: InsightCatalystWhereInput
    orderBy?: InsightCatalystOrderByWithRelationInput | InsightCatalystOrderByWithRelationInput[]
    cursor?: InsightCatalystWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InsightCatalystScalarFieldEnum | InsightCatalystScalarFieldEnum[]
  }

  /**
   * Note without action
   */
  export type NoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
  }


  /**
   * Model InsightCatalyst
   */

  export type AggregateInsightCatalyst = {
    _count: InsightCatalystCountAggregateOutputType | null
    _avg: InsightCatalystAvgAggregateOutputType | null
    _sum: InsightCatalystSumAggregateOutputType | null
    _min: InsightCatalystMinAggregateOutputType | null
    _max: InsightCatalystMaxAggregateOutputType | null
  }

  export type InsightCatalystAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    noteId: number | null
    questionId: number | null
  }

  export type InsightCatalystSumAggregateOutputType = {
    id: number | null
    userId: number | null
    noteId: number | null
    questionId: number | null
  }

  export type InsightCatalystMinAggregateOutputType = {
    id: number | null
    type: string | null
    text: string | null
    explanation: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    noteId: number | null
    questionId: number | null
  }

  export type InsightCatalystMaxAggregateOutputType = {
    id: number | null
    type: string | null
    text: string | null
    explanation: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    noteId: number | null
    questionId: number | null
  }

  export type InsightCatalystCountAggregateOutputType = {
    id: number
    type: number
    text: number
    explanation: number
    imageUrls: number
    createdAt: number
    updatedAt: number
    userId: number
    noteId: number
    questionId: number
    _all: number
  }


  export type InsightCatalystAvgAggregateInputType = {
    id?: true
    userId?: true
    noteId?: true
    questionId?: true
  }

  export type InsightCatalystSumAggregateInputType = {
    id?: true
    userId?: true
    noteId?: true
    questionId?: true
  }

  export type InsightCatalystMinAggregateInputType = {
    id?: true
    type?: true
    text?: true
    explanation?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    noteId?: true
    questionId?: true
  }

  export type InsightCatalystMaxAggregateInputType = {
    id?: true
    type?: true
    text?: true
    explanation?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    noteId?: true
    questionId?: true
  }

  export type InsightCatalystCountAggregateInputType = {
    id?: true
    type?: true
    text?: true
    explanation?: true
    imageUrls?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    noteId?: true
    questionId?: true
    _all?: true
  }

  export type InsightCatalystAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InsightCatalyst to aggregate.
     */
    where?: InsightCatalystWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InsightCatalysts to fetch.
     */
    orderBy?: InsightCatalystOrderByWithRelationInput | InsightCatalystOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InsightCatalystWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InsightCatalysts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InsightCatalysts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InsightCatalysts
    **/
    _count?: true | InsightCatalystCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InsightCatalystAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InsightCatalystSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InsightCatalystMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InsightCatalystMaxAggregateInputType
  }

  export type GetInsightCatalystAggregateType<T extends InsightCatalystAggregateArgs> = {
        [P in keyof T & keyof AggregateInsightCatalyst]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInsightCatalyst[P]>
      : GetScalarType<T[P], AggregateInsightCatalyst[P]>
  }




  export type InsightCatalystGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InsightCatalystWhereInput
    orderBy?: InsightCatalystOrderByWithAggregationInput | InsightCatalystOrderByWithAggregationInput[]
    by: InsightCatalystScalarFieldEnum[] | InsightCatalystScalarFieldEnum
    having?: InsightCatalystScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InsightCatalystCountAggregateInputType | true
    _avg?: InsightCatalystAvgAggregateInputType
    _sum?: InsightCatalystSumAggregateInputType
    _min?: InsightCatalystMinAggregateInputType
    _max?: InsightCatalystMaxAggregateInputType
  }

  export type InsightCatalystGroupByOutputType = {
    id: number
    type: string
    text: string
    explanation: string | null
    imageUrls: string[]
    createdAt: Date
    updatedAt: Date
    userId: number
    noteId: number | null
    questionId: number | null
    _count: InsightCatalystCountAggregateOutputType | null
    _avg: InsightCatalystAvgAggregateOutputType | null
    _sum: InsightCatalystSumAggregateOutputType | null
    _min: InsightCatalystMinAggregateOutputType | null
    _max: InsightCatalystMaxAggregateOutputType | null
  }

  type GetInsightCatalystGroupByPayload<T extends InsightCatalystGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InsightCatalystGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InsightCatalystGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InsightCatalystGroupByOutputType[P]>
            : GetScalarType<T[P], InsightCatalystGroupByOutputType[P]>
        }
      >
    >


  export type InsightCatalystSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    text?: boolean
    explanation?: boolean
    imageUrls?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    noteId?: boolean
    questionId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    note?: boolean | InsightCatalyst$noteArgs<ExtArgs>
    question?: boolean | InsightCatalyst$questionArgs<ExtArgs>
  }, ExtArgs["result"]["insightCatalyst"]>

  export type InsightCatalystSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    text?: boolean
    explanation?: boolean
    imageUrls?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    noteId?: boolean
    questionId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    note?: boolean | InsightCatalyst$noteArgs<ExtArgs>
    question?: boolean | InsightCatalyst$questionArgs<ExtArgs>
  }, ExtArgs["result"]["insightCatalyst"]>

  export type InsightCatalystSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    text?: boolean
    explanation?: boolean
    imageUrls?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    noteId?: boolean
    questionId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    note?: boolean | InsightCatalyst$noteArgs<ExtArgs>
    question?: boolean | InsightCatalyst$questionArgs<ExtArgs>
  }, ExtArgs["result"]["insightCatalyst"]>

  export type InsightCatalystSelectScalar = {
    id?: boolean
    type?: boolean
    text?: boolean
    explanation?: boolean
    imageUrls?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    noteId?: boolean
    questionId?: boolean
  }

  export type InsightCatalystOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "text" | "explanation" | "imageUrls" | "createdAt" | "updatedAt" | "userId" | "noteId" | "questionId", ExtArgs["result"]["insightCatalyst"]>
  export type InsightCatalystInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    note?: boolean | InsightCatalyst$noteArgs<ExtArgs>
    question?: boolean | InsightCatalyst$questionArgs<ExtArgs>
  }
  export type InsightCatalystIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    note?: boolean | InsightCatalyst$noteArgs<ExtArgs>
    question?: boolean | InsightCatalyst$questionArgs<ExtArgs>
  }
  export type InsightCatalystIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    note?: boolean | InsightCatalyst$noteArgs<ExtArgs>
    question?: boolean | InsightCatalyst$questionArgs<ExtArgs>
  }

  export type $InsightCatalystPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InsightCatalyst"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      note: Prisma.$NotePayload<ExtArgs> | null
      question: Prisma.$QuestionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      type: string
      text: string
      explanation: string | null
      imageUrls: string[]
      createdAt: Date
      updatedAt: Date
      userId: number
      noteId: number | null
      questionId: number | null
    }, ExtArgs["result"]["insightCatalyst"]>
    composites: {}
  }

  type InsightCatalystGetPayload<S extends boolean | null | undefined | InsightCatalystDefaultArgs> = $Result.GetResult<Prisma.$InsightCatalystPayload, S>

  type InsightCatalystCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InsightCatalystFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InsightCatalystCountAggregateInputType | true
    }

  export interface InsightCatalystDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InsightCatalyst'], meta: { name: 'InsightCatalyst' } }
    /**
     * Find zero or one InsightCatalyst that matches the filter.
     * @param {InsightCatalystFindUniqueArgs} args - Arguments to find a InsightCatalyst
     * @example
     * // Get one InsightCatalyst
     * const insightCatalyst = await prisma.insightCatalyst.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InsightCatalystFindUniqueArgs>(args: SelectSubset<T, InsightCatalystFindUniqueArgs<ExtArgs>>): Prisma__InsightCatalystClient<$Result.GetResult<Prisma.$InsightCatalystPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InsightCatalyst that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InsightCatalystFindUniqueOrThrowArgs} args - Arguments to find a InsightCatalyst
     * @example
     * // Get one InsightCatalyst
     * const insightCatalyst = await prisma.insightCatalyst.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InsightCatalystFindUniqueOrThrowArgs>(args: SelectSubset<T, InsightCatalystFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InsightCatalystClient<$Result.GetResult<Prisma.$InsightCatalystPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InsightCatalyst that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightCatalystFindFirstArgs} args - Arguments to find a InsightCatalyst
     * @example
     * // Get one InsightCatalyst
     * const insightCatalyst = await prisma.insightCatalyst.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InsightCatalystFindFirstArgs>(args?: SelectSubset<T, InsightCatalystFindFirstArgs<ExtArgs>>): Prisma__InsightCatalystClient<$Result.GetResult<Prisma.$InsightCatalystPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InsightCatalyst that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightCatalystFindFirstOrThrowArgs} args - Arguments to find a InsightCatalyst
     * @example
     * // Get one InsightCatalyst
     * const insightCatalyst = await prisma.insightCatalyst.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InsightCatalystFindFirstOrThrowArgs>(args?: SelectSubset<T, InsightCatalystFindFirstOrThrowArgs<ExtArgs>>): Prisma__InsightCatalystClient<$Result.GetResult<Prisma.$InsightCatalystPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InsightCatalysts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightCatalystFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InsightCatalysts
     * const insightCatalysts = await prisma.insightCatalyst.findMany()
     * 
     * // Get first 10 InsightCatalysts
     * const insightCatalysts = await prisma.insightCatalyst.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const insightCatalystWithIdOnly = await prisma.insightCatalyst.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InsightCatalystFindManyArgs>(args?: SelectSubset<T, InsightCatalystFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsightCatalystPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InsightCatalyst.
     * @param {InsightCatalystCreateArgs} args - Arguments to create a InsightCatalyst.
     * @example
     * // Create one InsightCatalyst
     * const InsightCatalyst = await prisma.insightCatalyst.create({
     *   data: {
     *     // ... data to create a InsightCatalyst
     *   }
     * })
     * 
     */
    create<T extends InsightCatalystCreateArgs>(args: SelectSubset<T, InsightCatalystCreateArgs<ExtArgs>>): Prisma__InsightCatalystClient<$Result.GetResult<Prisma.$InsightCatalystPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InsightCatalysts.
     * @param {InsightCatalystCreateManyArgs} args - Arguments to create many InsightCatalysts.
     * @example
     * // Create many InsightCatalysts
     * const insightCatalyst = await prisma.insightCatalyst.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InsightCatalystCreateManyArgs>(args?: SelectSubset<T, InsightCatalystCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InsightCatalysts and returns the data saved in the database.
     * @param {InsightCatalystCreateManyAndReturnArgs} args - Arguments to create many InsightCatalysts.
     * @example
     * // Create many InsightCatalysts
     * const insightCatalyst = await prisma.insightCatalyst.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InsightCatalysts and only return the `id`
     * const insightCatalystWithIdOnly = await prisma.insightCatalyst.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InsightCatalystCreateManyAndReturnArgs>(args?: SelectSubset<T, InsightCatalystCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsightCatalystPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InsightCatalyst.
     * @param {InsightCatalystDeleteArgs} args - Arguments to delete one InsightCatalyst.
     * @example
     * // Delete one InsightCatalyst
     * const InsightCatalyst = await prisma.insightCatalyst.delete({
     *   where: {
     *     // ... filter to delete one InsightCatalyst
     *   }
     * })
     * 
     */
    delete<T extends InsightCatalystDeleteArgs>(args: SelectSubset<T, InsightCatalystDeleteArgs<ExtArgs>>): Prisma__InsightCatalystClient<$Result.GetResult<Prisma.$InsightCatalystPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InsightCatalyst.
     * @param {InsightCatalystUpdateArgs} args - Arguments to update one InsightCatalyst.
     * @example
     * // Update one InsightCatalyst
     * const insightCatalyst = await prisma.insightCatalyst.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InsightCatalystUpdateArgs>(args: SelectSubset<T, InsightCatalystUpdateArgs<ExtArgs>>): Prisma__InsightCatalystClient<$Result.GetResult<Prisma.$InsightCatalystPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InsightCatalysts.
     * @param {InsightCatalystDeleteManyArgs} args - Arguments to filter InsightCatalysts to delete.
     * @example
     * // Delete a few InsightCatalysts
     * const { count } = await prisma.insightCatalyst.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InsightCatalystDeleteManyArgs>(args?: SelectSubset<T, InsightCatalystDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InsightCatalysts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightCatalystUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InsightCatalysts
     * const insightCatalyst = await prisma.insightCatalyst.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InsightCatalystUpdateManyArgs>(args: SelectSubset<T, InsightCatalystUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InsightCatalysts and returns the data updated in the database.
     * @param {InsightCatalystUpdateManyAndReturnArgs} args - Arguments to update many InsightCatalysts.
     * @example
     * // Update many InsightCatalysts
     * const insightCatalyst = await prisma.insightCatalyst.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InsightCatalysts and only return the `id`
     * const insightCatalystWithIdOnly = await prisma.insightCatalyst.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InsightCatalystUpdateManyAndReturnArgs>(args: SelectSubset<T, InsightCatalystUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsightCatalystPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InsightCatalyst.
     * @param {InsightCatalystUpsertArgs} args - Arguments to update or create a InsightCatalyst.
     * @example
     * // Update or create a InsightCatalyst
     * const insightCatalyst = await prisma.insightCatalyst.upsert({
     *   create: {
     *     // ... data to create a InsightCatalyst
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InsightCatalyst we want to update
     *   }
     * })
     */
    upsert<T extends InsightCatalystUpsertArgs>(args: SelectSubset<T, InsightCatalystUpsertArgs<ExtArgs>>): Prisma__InsightCatalystClient<$Result.GetResult<Prisma.$InsightCatalystPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InsightCatalysts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightCatalystCountArgs} args - Arguments to filter InsightCatalysts to count.
     * @example
     * // Count the number of InsightCatalysts
     * const count = await prisma.insightCatalyst.count({
     *   where: {
     *     // ... the filter for the InsightCatalysts we want to count
     *   }
     * })
    **/
    count<T extends InsightCatalystCountArgs>(
      args?: Subset<T, InsightCatalystCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InsightCatalystCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InsightCatalyst.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightCatalystAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InsightCatalystAggregateArgs>(args: Subset<T, InsightCatalystAggregateArgs>): Prisma.PrismaPromise<GetInsightCatalystAggregateType<T>>

    /**
     * Group by InsightCatalyst.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightCatalystGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InsightCatalystGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InsightCatalystGroupByArgs['orderBy'] }
        : { orderBy?: InsightCatalystGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InsightCatalystGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInsightCatalystGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InsightCatalyst model
   */
  readonly fields: InsightCatalystFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InsightCatalyst.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InsightCatalystClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    note<T extends InsightCatalyst$noteArgs<ExtArgs> = {}>(args?: Subset<T, InsightCatalyst$noteArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    question<T extends InsightCatalyst$questionArgs<ExtArgs> = {}>(args?: Subset<T, InsightCatalyst$questionArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InsightCatalyst model
   */
  interface InsightCatalystFieldRefs {
    readonly id: FieldRef<"InsightCatalyst", 'Int'>
    readonly type: FieldRef<"InsightCatalyst", 'String'>
    readonly text: FieldRef<"InsightCatalyst", 'String'>
    readonly explanation: FieldRef<"InsightCatalyst", 'String'>
    readonly imageUrls: FieldRef<"InsightCatalyst", 'String[]'>
    readonly createdAt: FieldRef<"InsightCatalyst", 'DateTime'>
    readonly updatedAt: FieldRef<"InsightCatalyst", 'DateTime'>
    readonly userId: FieldRef<"InsightCatalyst", 'Int'>
    readonly noteId: FieldRef<"InsightCatalyst", 'Int'>
    readonly questionId: FieldRef<"InsightCatalyst", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * InsightCatalyst findUnique
   */
  export type InsightCatalystFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsightCatalyst
     */
    select?: InsightCatalystSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsightCatalyst
     */
    omit?: InsightCatalystOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightCatalystInclude<ExtArgs> | null
    /**
     * Filter, which InsightCatalyst to fetch.
     */
    where: InsightCatalystWhereUniqueInput
  }

  /**
   * InsightCatalyst findUniqueOrThrow
   */
  export type InsightCatalystFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsightCatalyst
     */
    select?: InsightCatalystSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsightCatalyst
     */
    omit?: InsightCatalystOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightCatalystInclude<ExtArgs> | null
    /**
     * Filter, which InsightCatalyst to fetch.
     */
    where: InsightCatalystWhereUniqueInput
  }

  /**
   * InsightCatalyst findFirst
   */
  export type InsightCatalystFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsightCatalyst
     */
    select?: InsightCatalystSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsightCatalyst
     */
    omit?: InsightCatalystOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightCatalystInclude<ExtArgs> | null
    /**
     * Filter, which InsightCatalyst to fetch.
     */
    where?: InsightCatalystWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InsightCatalysts to fetch.
     */
    orderBy?: InsightCatalystOrderByWithRelationInput | InsightCatalystOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InsightCatalysts.
     */
    cursor?: InsightCatalystWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InsightCatalysts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InsightCatalysts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InsightCatalysts.
     */
    distinct?: InsightCatalystScalarFieldEnum | InsightCatalystScalarFieldEnum[]
  }

  /**
   * InsightCatalyst findFirstOrThrow
   */
  export type InsightCatalystFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsightCatalyst
     */
    select?: InsightCatalystSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsightCatalyst
     */
    omit?: InsightCatalystOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightCatalystInclude<ExtArgs> | null
    /**
     * Filter, which InsightCatalyst to fetch.
     */
    where?: InsightCatalystWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InsightCatalysts to fetch.
     */
    orderBy?: InsightCatalystOrderByWithRelationInput | InsightCatalystOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InsightCatalysts.
     */
    cursor?: InsightCatalystWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InsightCatalysts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InsightCatalysts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InsightCatalysts.
     */
    distinct?: InsightCatalystScalarFieldEnum | InsightCatalystScalarFieldEnum[]
  }

  /**
   * InsightCatalyst findMany
   */
  export type InsightCatalystFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsightCatalyst
     */
    select?: InsightCatalystSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsightCatalyst
     */
    omit?: InsightCatalystOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightCatalystInclude<ExtArgs> | null
    /**
     * Filter, which InsightCatalysts to fetch.
     */
    where?: InsightCatalystWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InsightCatalysts to fetch.
     */
    orderBy?: InsightCatalystOrderByWithRelationInput | InsightCatalystOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InsightCatalysts.
     */
    cursor?: InsightCatalystWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InsightCatalysts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InsightCatalysts.
     */
    skip?: number
    distinct?: InsightCatalystScalarFieldEnum | InsightCatalystScalarFieldEnum[]
  }

  /**
   * InsightCatalyst create
   */
  export type InsightCatalystCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsightCatalyst
     */
    select?: InsightCatalystSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsightCatalyst
     */
    omit?: InsightCatalystOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightCatalystInclude<ExtArgs> | null
    /**
     * The data needed to create a InsightCatalyst.
     */
    data: XOR<InsightCatalystCreateInput, InsightCatalystUncheckedCreateInput>
  }

  /**
   * InsightCatalyst createMany
   */
  export type InsightCatalystCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InsightCatalysts.
     */
    data: InsightCatalystCreateManyInput | InsightCatalystCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InsightCatalyst createManyAndReturn
   */
  export type InsightCatalystCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsightCatalyst
     */
    select?: InsightCatalystSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InsightCatalyst
     */
    omit?: InsightCatalystOmit<ExtArgs> | null
    /**
     * The data used to create many InsightCatalysts.
     */
    data: InsightCatalystCreateManyInput | InsightCatalystCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightCatalystIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InsightCatalyst update
   */
  export type InsightCatalystUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsightCatalyst
     */
    select?: InsightCatalystSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsightCatalyst
     */
    omit?: InsightCatalystOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightCatalystInclude<ExtArgs> | null
    /**
     * The data needed to update a InsightCatalyst.
     */
    data: XOR<InsightCatalystUpdateInput, InsightCatalystUncheckedUpdateInput>
    /**
     * Choose, which InsightCatalyst to update.
     */
    where: InsightCatalystWhereUniqueInput
  }

  /**
   * InsightCatalyst updateMany
   */
  export type InsightCatalystUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InsightCatalysts.
     */
    data: XOR<InsightCatalystUpdateManyMutationInput, InsightCatalystUncheckedUpdateManyInput>
    /**
     * Filter which InsightCatalysts to update
     */
    where?: InsightCatalystWhereInput
    /**
     * Limit how many InsightCatalysts to update.
     */
    limit?: number
  }

  /**
   * InsightCatalyst updateManyAndReturn
   */
  export type InsightCatalystUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsightCatalyst
     */
    select?: InsightCatalystSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InsightCatalyst
     */
    omit?: InsightCatalystOmit<ExtArgs> | null
    /**
     * The data used to update InsightCatalysts.
     */
    data: XOR<InsightCatalystUpdateManyMutationInput, InsightCatalystUncheckedUpdateManyInput>
    /**
     * Filter which InsightCatalysts to update
     */
    where?: InsightCatalystWhereInput
    /**
     * Limit how many InsightCatalysts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightCatalystIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InsightCatalyst upsert
   */
  export type InsightCatalystUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsightCatalyst
     */
    select?: InsightCatalystSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsightCatalyst
     */
    omit?: InsightCatalystOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightCatalystInclude<ExtArgs> | null
    /**
     * The filter to search for the InsightCatalyst to update in case it exists.
     */
    where: InsightCatalystWhereUniqueInput
    /**
     * In case the InsightCatalyst found by the `where` argument doesn't exist, create a new InsightCatalyst with this data.
     */
    create: XOR<InsightCatalystCreateInput, InsightCatalystUncheckedCreateInput>
    /**
     * In case the InsightCatalyst was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InsightCatalystUpdateInput, InsightCatalystUncheckedUpdateInput>
  }

  /**
   * InsightCatalyst delete
   */
  export type InsightCatalystDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsightCatalyst
     */
    select?: InsightCatalystSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsightCatalyst
     */
    omit?: InsightCatalystOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightCatalystInclude<ExtArgs> | null
    /**
     * Filter which InsightCatalyst to delete.
     */
    where: InsightCatalystWhereUniqueInput
  }

  /**
   * InsightCatalyst deleteMany
   */
  export type InsightCatalystDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InsightCatalysts to delete
     */
    where?: InsightCatalystWhereInput
    /**
     * Limit how many InsightCatalysts to delete.
     */
    limit?: number
  }

  /**
   * InsightCatalyst.note
   */
  export type InsightCatalyst$noteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
  }

  /**
   * InsightCatalyst.question
   */
  export type InsightCatalyst$questionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    where?: QuestionWhereInput
  }

  /**
   * InsightCatalyst without action
   */
  export type InsightCatalystDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsightCatalyst
     */
    select?: InsightCatalystSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsightCatalyst
     */
    omit?: InsightCatalystOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightCatalystInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    dailyStudyTimeMinutes: 'dailyStudyTimeMinutes'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const FolderScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    currentMasteryScore: 'currentMasteryScore',
    masteryHistory: 'masteryHistory',
    parentId: 'parentId',
    imageUrls: 'imageUrls',
    isPinned: 'isPinned'
  };

  export type FolderScalarFieldEnum = (typeof FolderScalarFieldEnum)[keyof typeof FolderScalarFieldEnum]


  export const QuestionSetScalarFieldEnum: {
    id: 'id',
    name: 'name',
    folderId: 'folderId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    currentIntervalDays: 'currentIntervalDays',
    exploreScore: 'exploreScore',
    lastReviewedAt: 'lastReviewedAt',
    nextReviewAt: 'nextReviewAt',
    reviewCount: 'reviewCount',
    understandScore: 'understandScore',
    useScore: 'useScore',
    currentForgottenPercentage: 'currentForgottenPercentage',
    currentTotalMasteryScore: 'currentTotalMasteryScore',
    currentUUESetStage: 'currentUUESetStage',
    forgettingCurveParams: 'forgettingCurveParams',
    masteryHistory: 'masteryHistory',
    source: 'source',
    instructions: 'instructions',
    isTracked: 'isTracked',
    imageUrls: 'imageUrls',
    isPinned: 'isPinned'
  };

  export type QuestionSetScalarFieldEnum = (typeof QuestionSetScalarFieldEnum)[keyof typeof QuestionSetScalarFieldEnum]


  export const QuestionScalarFieldEnum: {
    id: 'id',
    answer: 'answer',
    questionSetId: 'questionSetId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    options: 'options',
    questionType: 'questionType',
    text: 'text',
    conceptTags: 'conceptTags',
    lastAnswerCorrect: 'lastAnswerCorrect',
    uueFocus: 'uueFocus',
    totalMarksAvailable: 'totalMarksAvailable',
    markingCriteria: 'markingCriteria',
    currentMasteryScore: 'currentMasteryScore',
    difficultyScore: 'difficultyScore',
    timesAnsweredCorrectly: 'timesAnsweredCorrectly',
    timesAnsweredIncorrectly: 'timesAnsweredIncorrectly',
    selfMark: 'selfMark',
    autoMark: 'autoMark',
    aiGenerated: 'aiGenerated',
    inCat: 'inCat',
    imageUrls: 'imageUrls'
  };

  export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


  export const UserQuestionAnswerScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    questionId: 'questionId',
    isCorrect: 'isCorrect',
    confidence: 'confidence',
    timeSpent: 'timeSpent',
    answeredAt: 'answeredAt',
    scoreAchieved: 'scoreAchieved',
    createdAt: 'createdAt',
    feedbackFromAI: 'feedbackFromAI',
    questionSetId: 'questionSetId',
    updatedAt: 'updatedAt',
    userAnswerText: 'userAnswerText',
    uueFocusTested: 'uueFocusTested',
    userStudySessionId: 'userStudySessionId'
  };

  export type UserQuestionAnswerScalarFieldEnum = (typeof UserQuestionAnswerScalarFieldEnum)[keyof typeof UserQuestionAnswerScalarFieldEnum]


  export const UserStudySessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    sessionStartedAt: 'sessionStartedAt',
    sessionEndedAt: 'sessionEndedAt',
    timeSpentSeconds: 'timeSpentSeconds',
    answeredQuestionsCount: 'answeredQuestionsCount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserStudySessionScalarFieldEnum = (typeof UserStudySessionScalarFieldEnum)[keyof typeof UserStudySessionScalarFieldEnum]


  export const NoteScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    plainText: 'plainText',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    folderId: 'folderId',
    questionSetId: 'questionSetId'
  };

  export type NoteScalarFieldEnum = (typeof NoteScalarFieldEnum)[keyof typeof NoteScalarFieldEnum]


  export const InsightCatalystScalarFieldEnum: {
    id: 'id',
    type: 'type',
    text: 'text',
    explanation: 'explanation',
    imageUrls: 'imageUrls',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    noteId: 'noteId',
    questionId: 'questionId'
  };

  export type InsightCatalystScalarFieldEnum = (typeof InsightCatalystScalarFieldEnum)[keyof typeof InsightCatalystScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Json[]'
   */
  export type ListJsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    dailyStudyTimeMinutes?: IntFilter<"User"> | number
    folders?: FolderListRelationFilter
    questionAnswers?: UserQuestionAnswerListRelationFilter
    studySessions?: UserStudySessionListRelationFilter
    notes?: NoteListRelationFilter
    insightCatalysts?: InsightCatalystListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dailyStudyTimeMinutes?: SortOrder
    folders?: FolderOrderByRelationAggregateInput
    questionAnswers?: UserQuestionAnswerOrderByRelationAggregateInput
    studySessions?: UserStudySessionOrderByRelationAggregateInput
    notes?: NoteOrderByRelationAggregateInput
    insightCatalysts?: InsightCatalystOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    dailyStudyTimeMinutes?: IntFilter<"User"> | number
    folders?: FolderListRelationFilter
    questionAnswers?: UserQuestionAnswerListRelationFilter
    studySessions?: UserStudySessionListRelationFilter
    notes?: NoteListRelationFilter
    insightCatalysts?: InsightCatalystListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dailyStudyTimeMinutes?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    dailyStudyTimeMinutes?: IntWithAggregatesFilter<"User"> | number
  }

  export type FolderWhereInput = {
    AND?: FolderWhereInput | FolderWhereInput[]
    OR?: FolderWhereInput[]
    NOT?: FolderWhereInput | FolderWhereInput[]
    id?: IntFilter<"Folder"> | number
    name?: StringFilter<"Folder"> | string
    description?: StringNullableFilter<"Folder"> | string | null
    userId?: IntFilter<"Folder"> | number
    createdAt?: DateTimeFilter<"Folder"> | Date | string
    updatedAt?: DateTimeFilter<"Folder"> | Date | string
    currentMasteryScore?: FloatNullableFilter<"Folder"> | number | null
    masteryHistory?: JsonNullableListFilter<"Folder">
    parentId?: IntNullableFilter<"Folder"> | number | null
    imageUrls?: StringNullableListFilter<"Folder">
    isPinned?: BoolFilter<"Folder"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    questionSets?: QuestionSetListRelationFilter
    notes?: NoteListRelationFilter
    parent?: XOR<FolderNullableScalarRelationFilter, FolderWhereInput> | null
    children?: FolderListRelationFilter
  }

  export type FolderOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentMasteryScore?: SortOrderInput | SortOrder
    masteryHistory?: SortOrder
    parentId?: SortOrderInput | SortOrder
    imageUrls?: SortOrder
    isPinned?: SortOrder
    user?: UserOrderByWithRelationInput
    questionSets?: QuestionSetOrderByRelationAggregateInput
    notes?: NoteOrderByRelationAggregateInput
    parent?: FolderOrderByWithRelationInput
    children?: FolderOrderByRelationAggregateInput
  }

  export type FolderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FolderWhereInput | FolderWhereInput[]
    OR?: FolderWhereInput[]
    NOT?: FolderWhereInput | FolderWhereInput[]
    name?: StringFilter<"Folder"> | string
    description?: StringNullableFilter<"Folder"> | string | null
    userId?: IntFilter<"Folder"> | number
    createdAt?: DateTimeFilter<"Folder"> | Date | string
    updatedAt?: DateTimeFilter<"Folder"> | Date | string
    currentMasteryScore?: FloatNullableFilter<"Folder"> | number | null
    masteryHistory?: JsonNullableListFilter<"Folder">
    parentId?: IntNullableFilter<"Folder"> | number | null
    imageUrls?: StringNullableListFilter<"Folder">
    isPinned?: BoolFilter<"Folder"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    questionSets?: QuestionSetListRelationFilter
    notes?: NoteListRelationFilter
    parent?: XOR<FolderNullableScalarRelationFilter, FolderWhereInput> | null
    children?: FolderListRelationFilter
  }, "id">

  export type FolderOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentMasteryScore?: SortOrderInput | SortOrder
    masteryHistory?: SortOrder
    parentId?: SortOrderInput | SortOrder
    imageUrls?: SortOrder
    isPinned?: SortOrder
    _count?: FolderCountOrderByAggregateInput
    _avg?: FolderAvgOrderByAggregateInput
    _max?: FolderMaxOrderByAggregateInput
    _min?: FolderMinOrderByAggregateInput
    _sum?: FolderSumOrderByAggregateInput
  }

  export type FolderScalarWhereWithAggregatesInput = {
    AND?: FolderScalarWhereWithAggregatesInput | FolderScalarWhereWithAggregatesInput[]
    OR?: FolderScalarWhereWithAggregatesInput[]
    NOT?: FolderScalarWhereWithAggregatesInput | FolderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Folder"> | number
    name?: StringWithAggregatesFilter<"Folder"> | string
    description?: StringNullableWithAggregatesFilter<"Folder"> | string | null
    userId?: IntWithAggregatesFilter<"Folder"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Folder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Folder"> | Date | string
    currentMasteryScore?: FloatNullableWithAggregatesFilter<"Folder"> | number | null
    masteryHistory?: JsonNullableListFilter<"Folder">
    parentId?: IntNullableWithAggregatesFilter<"Folder"> | number | null
    imageUrls?: StringNullableListFilter<"Folder">
    isPinned?: BoolWithAggregatesFilter<"Folder"> | boolean
  }

  export type QuestionSetWhereInput = {
    AND?: QuestionSetWhereInput | QuestionSetWhereInput[]
    OR?: QuestionSetWhereInput[]
    NOT?: QuestionSetWhereInput | QuestionSetWhereInput[]
    id?: IntFilter<"QuestionSet"> | number
    name?: StringFilter<"QuestionSet"> | string
    folderId?: IntFilter<"QuestionSet"> | number
    createdAt?: DateTimeFilter<"QuestionSet"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionSet"> | Date | string
    currentIntervalDays?: FloatNullableFilter<"QuestionSet"> | number | null
    exploreScore?: FloatFilter<"QuestionSet"> | number
    lastReviewedAt?: DateTimeNullableFilter<"QuestionSet"> | Date | string | null
    nextReviewAt?: DateTimeNullableFilter<"QuestionSet"> | Date | string | null
    reviewCount?: IntFilter<"QuestionSet"> | number
    understandScore?: FloatFilter<"QuestionSet"> | number
    useScore?: FloatFilter<"QuestionSet"> | number
    currentForgottenPercentage?: FloatNullableFilter<"QuestionSet"> | number | null
    currentTotalMasteryScore?: FloatFilter<"QuestionSet"> | number
    currentUUESetStage?: StringFilter<"QuestionSet"> | string
    forgettingCurveParams?: JsonNullableFilter<"QuestionSet">
    masteryHistory?: JsonNullableListFilter<"QuestionSet">
    source?: StringNullableFilter<"QuestionSet"> | string | null
    instructions?: StringNullableFilter<"QuestionSet"> | string | null
    isTracked?: BoolFilter<"QuestionSet"> | boolean
    imageUrls?: StringNullableListFilter<"QuestionSet">
    isPinned?: BoolFilter<"QuestionSet"> | boolean
    notes?: NoteListRelationFilter
    questions?: QuestionListRelationFilter
    folder?: XOR<FolderScalarRelationFilter, FolderWhereInput>
    userAnswers?: UserQuestionAnswerListRelationFilter
  }

  export type QuestionSetOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    folderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentIntervalDays?: SortOrderInput | SortOrder
    exploreScore?: SortOrder
    lastReviewedAt?: SortOrderInput | SortOrder
    nextReviewAt?: SortOrderInput | SortOrder
    reviewCount?: SortOrder
    understandScore?: SortOrder
    useScore?: SortOrder
    currentForgottenPercentage?: SortOrderInput | SortOrder
    currentTotalMasteryScore?: SortOrder
    currentUUESetStage?: SortOrder
    forgettingCurveParams?: SortOrderInput | SortOrder
    masteryHistory?: SortOrder
    source?: SortOrderInput | SortOrder
    instructions?: SortOrderInput | SortOrder
    isTracked?: SortOrder
    imageUrls?: SortOrder
    isPinned?: SortOrder
    notes?: NoteOrderByRelationAggregateInput
    questions?: QuestionOrderByRelationAggregateInput
    folder?: FolderOrderByWithRelationInput
    userAnswers?: UserQuestionAnswerOrderByRelationAggregateInput
  }

  export type QuestionSetWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: QuestionSetWhereInput | QuestionSetWhereInput[]
    OR?: QuestionSetWhereInput[]
    NOT?: QuestionSetWhereInput | QuestionSetWhereInput[]
    name?: StringFilter<"QuestionSet"> | string
    folderId?: IntFilter<"QuestionSet"> | number
    createdAt?: DateTimeFilter<"QuestionSet"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionSet"> | Date | string
    currentIntervalDays?: FloatNullableFilter<"QuestionSet"> | number | null
    exploreScore?: FloatFilter<"QuestionSet"> | number
    lastReviewedAt?: DateTimeNullableFilter<"QuestionSet"> | Date | string | null
    nextReviewAt?: DateTimeNullableFilter<"QuestionSet"> | Date | string | null
    reviewCount?: IntFilter<"QuestionSet"> | number
    understandScore?: FloatFilter<"QuestionSet"> | number
    useScore?: FloatFilter<"QuestionSet"> | number
    currentForgottenPercentage?: FloatNullableFilter<"QuestionSet"> | number | null
    currentTotalMasteryScore?: FloatFilter<"QuestionSet"> | number
    currentUUESetStage?: StringFilter<"QuestionSet"> | string
    forgettingCurveParams?: JsonNullableFilter<"QuestionSet">
    masteryHistory?: JsonNullableListFilter<"QuestionSet">
    source?: StringNullableFilter<"QuestionSet"> | string | null
    instructions?: StringNullableFilter<"QuestionSet"> | string | null
    isTracked?: BoolFilter<"QuestionSet"> | boolean
    imageUrls?: StringNullableListFilter<"QuestionSet">
    isPinned?: BoolFilter<"QuestionSet"> | boolean
    notes?: NoteListRelationFilter
    questions?: QuestionListRelationFilter
    folder?: XOR<FolderScalarRelationFilter, FolderWhereInput>
    userAnswers?: UserQuestionAnswerListRelationFilter
  }, "id">

  export type QuestionSetOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    folderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentIntervalDays?: SortOrderInput | SortOrder
    exploreScore?: SortOrder
    lastReviewedAt?: SortOrderInput | SortOrder
    nextReviewAt?: SortOrderInput | SortOrder
    reviewCount?: SortOrder
    understandScore?: SortOrder
    useScore?: SortOrder
    currentForgottenPercentage?: SortOrderInput | SortOrder
    currentTotalMasteryScore?: SortOrder
    currentUUESetStage?: SortOrder
    forgettingCurveParams?: SortOrderInput | SortOrder
    masteryHistory?: SortOrder
    source?: SortOrderInput | SortOrder
    instructions?: SortOrderInput | SortOrder
    isTracked?: SortOrder
    imageUrls?: SortOrder
    isPinned?: SortOrder
    _count?: QuestionSetCountOrderByAggregateInput
    _avg?: QuestionSetAvgOrderByAggregateInput
    _max?: QuestionSetMaxOrderByAggregateInput
    _min?: QuestionSetMinOrderByAggregateInput
    _sum?: QuestionSetSumOrderByAggregateInput
  }

  export type QuestionSetScalarWhereWithAggregatesInput = {
    AND?: QuestionSetScalarWhereWithAggregatesInput | QuestionSetScalarWhereWithAggregatesInput[]
    OR?: QuestionSetScalarWhereWithAggregatesInput[]
    NOT?: QuestionSetScalarWhereWithAggregatesInput | QuestionSetScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"QuestionSet"> | number
    name?: StringWithAggregatesFilter<"QuestionSet"> | string
    folderId?: IntWithAggregatesFilter<"QuestionSet"> | number
    createdAt?: DateTimeWithAggregatesFilter<"QuestionSet"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"QuestionSet"> | Date | string
    currentIntervalDays?: FloatNullableWithAggregatesFilter<"QuestionSet"> | number | null
    exploreScore?: FloatWithAggregatesFilter<"QuestionSet"> | number
    lastReviewedAt?: DateTimeNullableWithAggregatesFilter<"QuestionSet"> | Date | string | null
    nextReviewAt?: DateTimeNullableWithAggregatesFilter<"QuestionSet"> | Date | string | null
    reviewCount?: IntWithAggregatesFilter<"QuestionSet"> | number
    understandScore?: FloatWithAggregatesFilter<"QuestionSet"> | number
    useScore?: FloatWithAggregatesFilter<"QuestionSet"> | number
    currentForgottenPercentage?: FloatNullableWithAggregatesFilter<"QuestionSet"> | number | null
    currentTotalMasteryScore?: FloatWithAggregatesFilter<"QuestionSet"> | number
    currentUUESetStage?: StringWithAggregatesFilter<"QuestionSet"> | string
    forgettingCurveParams?: JsonNullableWithAggregatesFilter<"QuestionSet">
    masteryHistory?: JsonNullableListFilter<"QuestionSet">
    source?: StringNullableWithAggregatesFilter<"QuestionSet"> | string | null
    instructions?: StringNullableWithAggregatesFilter<"QuestionSet"> | string | null
    isTracked?: BoolWithAggregatesFilter<"QuestionSet"> | boolean
    imageUrls?: StringNullableListFilter<"QuestionSet">
    isPinned?: BoolWithAggregatesFilter<"QuestionSet"> | boolean
  }

  export type QuestionWhereInput = {
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    id?: IntFilter<"Question"> | number
    answer?: StringNullableFilter<"Question"> | string | null
    questionSetId?: IntFilter<"Question"> | number
    createdAt?: DateTimeFilter<"Question"> | Date | string
    updatedAt?: DateTimeFilter<"Question"> | Date | string
    options?: StringNullableListFilter<"Question">
    questionType?: StringFilter<"Question"> | string
    text?: StringFilter<"Question"> | string
    conceptTags?: StringNullableListFilter<"Question">
    lastAnswerCorrect?: BoolNullableFilter<"Question"> | boolean | null
    uueFocus?: StringFilter<"Question"> | string
    totalMarksAvailable?: IntFilter<"Question"> | number
    markingCriteria?: JsonNullableFilter<"Question">
    currentMasteryScore?: FloatNullableFilter<"Question"> | number | null
    difficultyScore?: FloatNullableFilter<"Question"> | number | null
    timesAnsweredCorrectly?: IntFilter<"Question"> | number
    timesAnsweredIncorrectly?: IntFilter<"Question"> | number
    selfMark?: BoolFilter<"Question"> | boolean
    autoMark?: BoolFilter<"Question"> | boolean
    aiGenerated?: BoolFilter<"Question"> | boolean
    inCat?: StringNullableFilter<"Question"> | string | null
    imageUrls?: StringNullableListFilter<"Question">
    questionSet?: XOR<QuestionSetScalarRelationFilter, QuestionSetWhereInput>
    userAnswers?: UserQuestionAnswerListRelationFilter
    insightCatalysts?: InsightCatalystListRelationFilter
  }

  export type QuestionOrderByWithRelationInput = {
    id?: SortOrder
    answer?: SortOrderInput | SortOrder
    questionSetId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    options?: SortOrder
    questionType?: SortOrder
    text?: SortOrder
    conceptTags?: SortOrder
    lastAnswerCorrect?: SortOrderInput | SortOrder
    uueFocus?: SortOrder
    totalMarksAvailable?: SortOrder
    markingCriteria?: SortOrderInput | SortOrder
    currentMasteryScore?: SortOrderInput | SortOrder
    difficultyScore?: SortOrderInput | SortOrder
    timesAnsweredCorrectly?: SortOrder
    timesAnsweredIncorrectly?: SortOrder
    selfMark?: SortOrder
    autoMark?: SortOrder
    aiGenerated?: SortOrder
    inCat?: SortOrderInput | SortOrder
    imageUrls?: SortOrder
    questionSet?: QuestionSetOrderByWithRelationInput
    userAnswers?: UserQuestionAnswerOrderByRelationAggregateInput
    insightCatalysts?: InsightCatalystOrderByRelationAggregateInput
  }

  export type QuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    answer?: StringNullableFilter<"Question"> | string | null
    questionSetId?: IntFilter<"Question"> | number
    createdAt?: DateTimeFilter<"Question"> | Date | string
    updatedAt?: DateTimeFilter<"Question"> | Date | string
    options?: StringNullableListFilter<"Question">
    questionType?: StringFilter<"Question"> | string
    text?: StringFilter<"Question"> | string
    conceptTags?: StringNullableListFilter<"Question">
    lastAnswerCorrect?: BoolNullableFilter<"Question"> | boolean | null
    uueFocus?: StringFilter<"Question"> | string
    totalMarksAvailable?: IntFilter<"Question"> | number
    markingCriteria?: JsonNullableFilter<"Question">
    currentMasteryScore?: FloatNullableFilter<"Question"> | number | null
    difficultyScore?: FloatNullableFilter<"Question"> | number | null
    timesAnsweredCorrectly?: IntFilter<"Question"> | number
    timesAnsweredIncorrectly?: IntFilter<"Question"> | number
    selfMark?: BoolFilter<"Question"> | boolean
    autoMark?: BoolFilter<"Question"> | boolean
    aiGenerated?: BoolFilter<"Question"> | boolean
    inCat?: StringNullableFilter<"Question"> | string | null
    imageUrls?: StringNullableListFilter<"Question">
    questionSet?: XOR<QuestionSetScalarRelationFilter, QuestionSetWhereInput>
    userAnswers?: UserQuestionAnswerListRelationFilter
    insightCatalysts?: InsightCatalystListRelationFilter
  }, "id">

  export type QuestionOrderByWithAggregationInput = {
    id?: SortOrder
    answer?: SortOrderInput | SortOrder
    questionSetId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    options?: SortOrder
    questionType?: SortOrder
    text?: SortOrder
    conceptTags?: SortOrder
    lastAnswerCorrect?: SortOrderInput | SortOrder
    uueFocus?: SortOrder
    totalMarksAvailable?: SortOrder
    markingCriteria?: SortOrderInput | SortOrder
    currentMasteryScore?: SortOrderInput | SortOrder
    difficultyScore?: SortOrderInput | SortOrder
    timesAnsweredCorrectly?: SortOrder
    timesAnsweredIncorrectly?: SortOrder
    selfMark?: SortOrder
    autoMark?: SortOrder
    aiGenerated?: SortOrder
    inCat?: SortOrderInput | SortOrder
    imageUrls?: SortOrder
    _count?: QuestionCountOrderByAggregateInput
    _avg?: QuestionAvgOrderByAggregateInput
    _max?: QuestionMaxOrderByAggregateInput
    _min?: QuestionMinOrderByAggregateInput
    _sum?: QuestionSumOrderByAggregateInput
  }

  export type QuestionScalarWhereWithAggregatesInput = {
    AND?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    OR?: QuestionScalarWhereWithAggregatesInput[]
    NOT?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Question"> | number
    answer?: StringNullableWithAggregatesFilter<"Question"> | string | null
    questionSetId?: IntWithAggregatesFilter<"Question"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Question"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Question"> | Date | string
    options?: StringNullableListFilter<"Question">
    questionType?: StringWithAggregatesFilter<"Question"> | string
    text?: StringWithAggregatesFilter<"Question"> | string
    conceptTags?: StringNullableListFilter<"Question">
    lastAnswerCorrect?: BoolNullableWithAggregatesFilter<"Question"> | boolean | null
    uueFocus?: StringWithAggregatesFilter<"Question"> | string
    totalMarksAvailable?: IntWithAggregatesFilter<"Question"> | number
    markingCriteria?: JsonNullableWithAggregatesFilter<"Question">
    currentMasteryScore?: FloatNullableWithAggregatesFilter<"Question"> | number | null
    difficultyScore?: FloatNullableWithAggregatesFilter<"Question"> | number | null
    timesAnsweredCorrectly?: IntWithAggregatesFilter<"Question"> | number
    timesAnsweredIncorrectly?: IntWithAggregatesFilter<"Question"> | number
    selfMark?: BoolWithAggregatesFilter<"Question"> | boolean
    autoMark?: BoolWithAggregatesFilter<"Question"> | boolean
    aiGenerated?: BoolWithAggregatesFilter<"Question"> | boolean
    inCat?: StringNullableWithAggregatesFilter<"Question"> | string | null
    imageUrls?: StringNullableListFilter<"Question">
  }

  export type UserQuestionAnswerWhereInput = {
    AND?: UserQuestionAnswerWhereInput | UserQuestionAnswerWhereInput[]
    OR?: UserQuestionAnswerWhereInput[]
    NOT?: UserQuestionAnswerWhereInput | UserQuestionAnswerWhereInput[]
    id?: IntFilter<"UserQuestionAnswer"> | number
    userId?: IntFilter<"UserQuestionAnswer"> | number
    questionId?: IntFilter<"UserQuestionAnswer"> | number
    isCorrect?: BoolFilter<"UserQuestionAnswer"> | boolean
    confidence?: IntNullableFilter<"UserQuestionAnswer"> | number | null
    timeSpent?: IntFilter<"UserQuestionAnswer"> | number
    answeredAt?: DateTimeFilter<"UserQuestionAnswer"> | Date | string
    scoreAchieved?: FloatFilter<"UserQuestionAnswer"> | number
    createdAt?: DateTimeFilter<"UserQuestionAnswer"> | Date | string
    feedbackFromAI?: StringNullableFilter<"UserQuestionAnswer"> | string | null
    questionSetId?: IntNullableFilter<"UserQuestionAnswer"> | number | null
    updatedAt?: DateTimeFilter<"UserQuestionAnswer"> | Date | string
    userAnswerText?: StringNullableFilter<"UserQuestionAnswer"> | string | null
    uueFocusTested?: StringNullableFilter<"UserQuestionAnswer"> | string | null
    userStudySessionId?: IntNullableFilter<"UserQuestionAnswer"> | number | null
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    questionSet?: XOR<QuestionSetNullableScalarRelationFilter, QuestionSetWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    studySession?: XOR<UserStudySessionNullableScalarRelationFilter, UserStudySessionWhereInput> | null
  }

  export type UserQuestionAnswerOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    isCorrect?: SortOrder
    confidence?: SortOrderInput | SortOrder
    timeSpent?: SortOrder
    answeredAt?: SortOrder
    scoreAchieved?: SortOrder
    createdAt?: SortOrder
    feedbackFromAI?: SortOrderInput | SortOrder
    questionSetId?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    userAnswerText?: SortOrderInput | SortOrder
    uueFocusTested?: SortOrderInput | SortOrder
    userStudySessionId?: SortOrderInput | SortOrder
    question?: QuestionOrderByWithRelationInput
    questionSet?: QuestionSetOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    studySession?: UserStudySessionOrderByWithRelationInput
  }

  export type UserQuestionAnswerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserQuestionAnswerWhereInput | UserQuestionAnswerWhereInput[]
    OR?: UserQuestionAnswerWhereInput[]
    NOT?: UserQuestionAnswerWhereInput | UserQuestionAnswerWhereInput[]
    userId?: IntFilter<"UserQuestionAnswer"> | number
    questionId?: IntFilter<"UserQuestionAnswer"> | number
    isCorrect?: BoolFilter<"UserQuestionAnswer"> | boolean
    confidence?: IntNullableFilter<"UserQuestionAnswer"> | number | null
    timeSpent?: IntFilter<"UserQuestionAnswer"> | number
    answeredAt?: DateTimeFilter<"UserQuestionAnswer"> | Date | string
    scoreAchieved?: FloatFilter<"UserQuestionAnswer"> | number
    createdAt?: DateTimeFilter<"UserQuestionAnswer"> | Date | string
    feedbackFromAI?: StringNullableFilter<"UserQuestionAnswer"> | string | null
    questionSetId?: IntNullableFilter<"UserQuestionAnswer"> | number | null
    updatedAt?: DateTimeFilter<"UserQuestionAnswer"> | Date | string
    userAnswerText?: StringNullableFilter<"UserQuestionAnswer"> | string | null
    uueFocusTested?: StringNullableFilter<"UserQuestionAnswer"> | string | null
    userStudySessionId?: IntNullableFilter<"UserQuestionAnswer"> | number | null
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    questionSet?: XOR<QuestionSetNullableScalarRelationFilter, QuestionSetWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    studySession?: XOR<UserStudySessionNullableScalarRelationFilter, UserStudySessionWhereInput> | null
  }, "id">

  export type UserQuestionAnswerOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    isCorrect?: SortOrder
    confidence?: SortOrderInput | SortOrder
    timeSpent?: SortOrder
    answeredAt?: SortOrder
    scoreAchieved?: SortOrder
    createdAt?: SortOrder
    feedbackFromAI?: SortOrderInput | SortOrder
    questionSetId?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    userAnswerText?: SortOrderInput | SortOrder
    uueFocusTested?: SortOrderInput | SortOrder
    userStudySessionId?: SortOrderInput | SortOrder
    _count?: UserQuestionAnswerCountOrderByAggregateInput
    _avg?: UserQuestionAnswerAvgOrderByAggregateInput
    _max?: UserQuestionAnswerMaxOrderByAggregateInput
    _min?: UserQuestionAnswerMinOrderByAggregateInput
    _sum?: UserQuestionAnswerSumOrderByAggregateInput
  }

  export type UserQuestionAnswerScalarWhereWithAggregatesInput = {
    AND?: UserQuestionAnswerScalarWhereWithAggregatesInput | UserQuestionAnswerScalarWhereWithAggregatesInput[]
    OR?: UserQuestionAnswerScalarWhereWithAggregatesInput[]
    NOT?: UserQuestionAnswerScalarWhereWithAggregatesInput | UserQuestionAnswerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserQuestionAnswer"> | number
    userId?: IntWithAggregatesFilter<"UserQuestionAnswer"> | number
    questionId?: IntWithAggregatesFilter<"UserQuestionAnswer"> | number
    isCorrect?: BoolWithAggregatesFilter<"UserQuestionAnswer"> | boolean
    confidence?: IntNullableWithAggregatesFilter<"UserQuestionAnswer"> | number | null
    timeSpent?: IntWithAggregatesFilter<"UserQuestionAnswer"> | number
    answeredAt?: DateTimeWithAggregatesFilter<"UserQuestionAnswer"> | Date | string
    scoreAchieved?: FloatWithAggregatesFilter<"UserQuestionAnswer"> | number
    createdAt?: DateTimeWithAggregatesFilter<"UserQuestionAnswer"> | Date | string
    feedbackFromAI?: StringNullableWithAggregatesFilter<"UserQuestionAnswer"> | string | null
    questionSetId?: IntNullableWithAggregatesFilter<"UserQuestionAnswer"> | number | null
    updatedAt?: DateTimeWithAggregatesFilter<"UserQuestionAnswer"> | Date | string
    userAnswerText?: StringNullableWithAggregatesFilter<"UserQuestionAnswer"> | string | null
    uueFocusTested?: StringNullableWithAggregatesFilter<"UserQuestionAnswer"> | string | null
    userStudySessionId?: IntNullableWithAggregatesFilter<"UserQuestionAnswer"> | number | null
  }

  export type UserStudySessionWhereInput = {
    AND?: UserStudySessionWhereInput | UserStudySessionWhereInput[]
    OR?: UserStudySessionWhereInput[]
    NOT?: UserStudySessionWhereInput | UserStudySessionWhereInput[]
    id?: IntFilter<"UserStudySession"> | number
    userId?: IntFilter<"UserStudySession"> | number
    sessionStartedAt?: DateTimeNullableFilter<"UserStudySession"> | Date | string | null
    sessionEndedAt?: DateTimeFilter<"UserStudySession"> | Date | string
    timeSpentSeconds?: IntFilter<"UserStudySession"> | number
    answeredQuestionsCount?: IntFilter<"UserStudySession"> | number
    createdAt?: DateTimeFilter<"UserStudySession"> | Date | string
    updatedAt?: DateTimeFilter<"UserStudySession"> | Date | string
    userQuestionAnswers?: UserQuestionAnswerListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserStudySessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionStartedAt?: SortOrderInput | SortOrder
    sessionEndedAt?: SortOrder
    timeSpentSeconds?: SortOrder
    answeredQuestionsCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userQuestionAnswers?: UserQuestionAnswerOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type UserStudySessionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserStudySessionWhereInput | UserStudySessionWhereInput[]
    OR?: UserStudySessionWhereInput[]
    NOT?: UserStudySessionWhereInput | UserStudySessionWhereInput[]
    userId?: IntFilter<"UserStudySession"> | number
    sessionStartedAt?: DateTimeNullableFilter<"UserStudySession"> | Date | string | null
    sessionEndedAt?: DateTimeFilter<"UserStudySession"> | Date | string
    timeSpentSeconds?: IntFilter<"UserStudySession"> | number
    answeredQuestionsCount?: IntFilter<"UserStudySession"> | number
    createdAt?: DateTimeFilter<"UserStudySession"> | Date | string
    updatedAt?: DateTimeFilter<"UserStudySession"> | Date | string
    userQuestionAnswers?: UserQuestionAnswerListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type UserStudySessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionStartedAt?: SortOrderInput | SortOrder
    sessionEndedAt?: SortOrder
    timeSpentSeconds?: SortOrder
    answeredQuestionsCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserStudySessionCountOrderByAggregateInput
    _avg?: UserStudySessionAvgOrderByAggregateInput
    _max?: UserStudySessionMaxOrderByAggregateInput
    _min?: UserStudySessionMinOrderByAggregateInput
    _sum?: UserStudySessionSumOrderByAggregateInput
  }

  export type UserStudySessionScalarWhereWithAggregatesInput = {
    AND?: UserStudySessionScalarWhereWithAggregatesInput | UserStudySessionScalarWhereWithAggregatesInput[]
    OR?: UserStudySessionScalarWhereWithAggregatesInput[]
    NOT?: UserStudySessionScalarWhereWithAggregatesInput | UserStudySessionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserStudySession"> | number
    userId?: IntWithAggregatesFilter<"UserStudySession"> | number
    sessionStartedAt?: DateTimeNullableWithAggregatesFilter<"UserStudySession"> | Date | string | null
    sessionEndedAt?: DateTimeWithAggregatesFilter<"UserStudySession"> | Date | string
    timeSpentSeconds?: IntWithAggregatesFilter<"UserStudySession"> | number
    answeredQuestionsCount?: IntWithAggregatesFilter<"UserStudySession"> | number
    createdAt?: DateTimeWithAggregatesFilter<"UserStudySession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserStudySession"> | Date | string
  }

  export type NoteWhereInput = {
    AND?: NoteWhereInput | NoteWhereInput[]
    OR?: NoteWhereInput[]
    NOT?: NoteWhereInput | NoteWhereInput[]
    id?: IntFilter<"Note"> | number
    title?: StringFilter<"Note"> | string
    content?: JsonFilter<"Note">
    plainText?: StringNullableFilter<"Note"> | string | null
    createdAt?: DateTimeFilter<"Note"> | Date | string
    updatedAt?: DateTimeFilter<"Note"> | Date | string
    userId?: IntFilter<"Note"> | number
    folderId?: IntNullableFilter<"Note"> | number | null
    questionSetId?: IntNullableFilter<"Note"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    folder?: XOR<FolderNullableScalarRelationFilter, FolderWhereInput> | null
    questionSet?: XOR<QuestionSetNullableScalarRelationFilter, QuestionSetWhereInput> | null
    insightCatalysts?: InsightCatalystListRelationFilter
  }

  export type NoteOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    plainText?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    folderId?: SortOrderInput | SortOrder
    questionSetId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    folder?: FolderOrderByWithRelationInput
    questionSet?: QuestionSetOrderByWithRelationInput
    insightCatalysts?: InsightCatalystOrderByRelationAggregateInput
  }

  export type NoteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NoteWhereInput | NoteWhereInput[]
    OR?: NoteWhereInput[]
    NOT?: NoteWhereInput | NoteWhereInput[]
    title?: StringFilter<"Note"> | string
    content?: JsonFilter<"Note">
    plainText?: StringNullableFilter<"Note"> | string | null
    createdAt?: DateTimeFilter<"Note"> | Date | string
    updatedAt?: DateTimeFilter<"Note"> | Date | string
    userId?: IntFilter<"Note"> | number
    folderId?: IntNullableFilter<"Note"> | number | null
    questionSetId?: IntNullableFilter<"Note"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    folder?: XOR<FolderNullableScalarRelationFilter, FolderWhereInput> | null
    questionSet?: XOR<QuestionSetNullableScalarRelationFilter, QuestionSetWhereInput> | null
    insightCatalysts?: InsightCatalystListRelationFilter
  }, "id">

  export type NoteOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    plainText?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    folderId?: SortOrderInput | SortOrder
    questionSetId?: SortOrderInput | SortOrder
    _count?: NoteCountOrderByAggregateInput
    _avg?: NoteAvgOrderByAggregateInput
    _max?: NoteMaxOrderByAggregateInput
    _min?: NoteMinOrderByAggregateInput
    _sum?: NoteSumOrderByAggregateInput
  }

  export type NoteScalarWhereWithAggregatesInput = {
    AND?: NoteScalarWhereWithAggregatesInput | NoteScalarWhereWithAggregatesInput[]
    OR?: NoteScalarWhereWithAggregatesInput[]
    NOT?: NoteScalarWhereWithAggregatesInput | NoteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Note"> | number
    title?: StringWithAggregatesFilter<"Note"> | string
    content?: JsonWithAggregatesFilter<"Note">
    plainText?: StringNullableWithAggregatesFilter<"Note"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Note"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Note"> | Date | string
    userId?: IntWithAggregatesFilter<"Note"> | number
    folderId?: IntNullableWithAggregatesFilter<"Note"> | number | null
    questionSetId?: IntNullableWithAggregatesFilter<"Note"> | number | null
  }

  export type InsightCatalystWhereInput = {
    AND?: InsightCatalystWhereInput | InsightCatalystWhereInput[]
    OR?: InsightCatalystWhereInput[]
    NOT?: InsightCatalystWhereInput | InsightCatalystWhereInput[]
    id?: IntFilter<"InsightCatalyst"> | number
    type?: StringFilter<"InsightCatalyst"> | string
    text?: StringFilter<"InsightCatalyst"> | string
    explanation?: StringNullableFilter<"InsightCatalyst"> | string | null
    imageUrls?: StringNullableListFilter<"InsightCatalyst">
    createdAt?: DateTimeFilter<"InsightCatalyst"> | Date | string
    updatedAt?: DateTimeFilter<"InsightCatalyst"> | Date | string
    userId?: IntFilter<"InsightCatalyst"> | number
    noteId?: IntNullableFilter<"InsightCatalyst"> | number | null
    questionId?: IntNullableFilter<"InsightCatalyst"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    note?: XOR<NoteNullableScalarRelationFilter, NoteWhereInput> | null
    question?: XOR<QuestionNullableScalarRelationFilter, QuestionWhereInput> | null
  }

  export type InsightCatalystOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    text?: SortOrder
    explanation?: SortOrderInput | SortOrder
    imageUrls?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    noteId?: SortOrderInput | SortOrder
    questionId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    note?: NoteOrderByWithRelationInput
    question?: QuestionOrderByWithRelationInput
  }

  export type InsightCatalystWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InsightCatalystWhereInput | InsightCatalystWhereInput[]
    OR?: InsightCatalystWhereInput[]
    NOT?: InsightCatalystWhereInput | InsightCatalystWhereInput[]
    type?: StringFilter<"InsightCatalyst"> | string
    text?: StringFilter<"InsightCatalyst"> | string
    explanation?: StringNullableFilter<"InsightCatalyst"> | string | null
    imageUrls?: StringNullableListFilter<"InsightCatalyst">
    createdAt?: DateTimeFilter<"InsightCatalyst"> | Date | string
    updatedAt?: DateTimeFilter<"InsightCatalyst"> | Date | string
    userId?: IntFilter<"InsightCatalyst"> | number
    noteId?: IntNullableFilter<"InsightCatalyst"> | number | null
    questionId?: IntNullableFilter<"InsightCatalyst"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    note?: XOR<NoteNullableScalarRelationFilter, NoteWhereInput> | null
    question?: XOR<QuestionNullableScalarRelationFilter, QuestionWhereInput> | null
  }, "id">

  export type InsightCatalystOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    text?: SortOrder
    explanation?: SortOrderInput | SortOrder
    imageUrls?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    noteId?: SortOrderInput | SortOrder
    questionId?: SortOrderInput | SortOrder
    _count?: InsightCatalystCountOrderByAggregateInput
    _avg?: InsightCatalystAvgOrderByAggregateInput
    _max?: InsightCatalystMaxOrderByAggregateInput
    _min?: InsightCatalystMinOrderByAggregateInput
    _sum?: InsightCatalystSumOrderByAggregateInput
  }

  export type InsightCatalystScalarWhereWithAggregatesInput = {
    AND?: InsightCatalystScalarWhereWithAggregatesInput | InsightCatalystScalarWhereWithAggregatesInput[]
    OR?: InsightCatalystScalarWhereWithAggregatesInput[]
    NOT?: InsightCatalystScalarWhereWithAggregatesInput | InsightCatalystScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"InsightCatalyst"> | number
    type?: StringWithAggregatesFilter<"InsightCatalyst"> | string
    text?: StringWithAggregatesFilter<"InsightCatalyst"> | string
    explanation?: StringNullableWithAggregatesFilter<"InsightCatalyst"> | string | null
    imageUrls?: StringNullableListFilter<"InsightCatalyst">
    createdAt?: DateTimeWithAggregatesFilter<"InsightCatalyst"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InsightCatalyst"> | Date | string
    userId?: IntWithAggregatesFilter<"InsightCatalyst"> | number
    noteId?: IntNullableWithAggregatesFilter<"InsightCatalyst"> | number | null
    questionId?: IntNullableWithAggregatesFilter<"InsightCatalyst"> | number | null
  }

  export type UserCreateInput = {
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dailyStudyTimeMinutes?: number
    folders?: FolderCreateNestedManyWithoutUserInput
    questionAnswers?: UserQuestionAnswerCreateNestedManyWithoutUserInput
    studySessions?: UserStudySessionCreateNestedManyWithoutUserInput
    notes?: NoteCreateNestedManyWithoutUserInput
    insightCatalysts?: InsightCatalystCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dailyStudyTimeMinutes?: number
    folders?: FolderUncheckedCreateNestedManyWithoutUserInput
    questionAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutUserInput
    studySessions?: UserStudySessionUncheckedCreateNestedManyWithoutUserInput
    notes?: NoteUncheckedCreateNestedManyWithoutUserInput
    insightCatalysts?: InsightCatalystUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyStudyTimeMinutes?: IntFieldUpdateOperationsInput | number
    folders?: FolderUpdateManyWithoutUserNestedInput
    questionAnswers?: UserQuestionAnswerUpdateManyWithoutUserNestedInput
    studySessions?: UserStudySessionUpdateManyWithoutUserNestedInput
    notes?: NoteUpdateManyWithoutUserNestedInput
    insightCatalysts?: InsightCatalystUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyStudyTimeMinutes?: IntFieldUpdateOperationsInput | number
    folders?: FolderUncheckedUpdateManyWithoutUserNestedInput
    questionAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutUserNestedInput
    studySessions?: UserStudySessionUncheckedUpdateManyWithoutUserNestedInput
    notes?: NoteUncheckedUpdateManyWithoutUserNestedInput
    insightCatalysts?: InsightCatalystUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dailyStudyTimeMinutes?: number
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyStudyTimeMinutes?: IntFieldUpdateOperationsInput | number
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyStudyTimeMinutes?: IntFieldUpdateOperationsInput | number
  }

  export type FolderCreateInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    currentMasteryScore?: number | null
    masteryHistory?: FolderCreatemasteryHistoryInput | InputJsonValue[]
    imageUrls?: FolderCreateimageUrlsInput | string[]
    isPinned?: boolean
    user: UserCreateNestedOneWithoutFoldersInput
    questionSets?: QuestionSetCreateNestedManyWithoutFolderInput
    notes?: NoteCreateNestedManyWithoutFolderInput
    parent?: FolderCreateNestedOneWithoutChildrenInput
    children?: FolderCreateNestedManyWithoutParentInput
  }

  export type FolderUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    currentMasteryScore?: number | null
    masteryHistory?: FolderCreatemasteryHistoryInput | InputJsonValue[]
    parentId?: number | null
    imageUrls?: FolderCreateimageUrlsInput | string[]
    isPinned?: boolean
    questionSets?: QuestionSetUncheckedCreateNestedManyWithoutFolderInput
    notes?: NoteUncheckedCreateNestedManyWithoutFolderInput
    children?: FolderUncheckedCreateNestedManyWithoutParentInput
  }

  export type FolderUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    masteryHistory?: FolderUpdatemasteryHistoryInput | InputJsonValue[]
    imageUrls?: FolderUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutFoldersNestedInput
    questionSets?: QuestionSetUpdateManyWithoutFolderNestedInput
    notes?: NoteUpdateManyWithoutFolderNestedInput
    parent?: FolderUpdateOneWithoutChildrenNestedInput
    children?: FolderUpdateManyWithoutParentNestedInput
  }

  export type FolderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    masteryHistory?: FolderUpdatemasteryHistoryInput | InputJsonValue[]
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    imageUrls?: FolderUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    questionSets?: QuestionSetUncheckedUpdateManyWithoutFolderNestedInput
    notes?: NoteUncheckedUpdateManyWithoutFolderNestedInput
    children?: FolderUncheckedUpdateManyWithoutParentNestedInput
  }

  export type FolderCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    currentMasteryScore?: number | null
    masteryHistory?: FolderCreatemasteryHistoryInput | InputJsonValue[]
    parentId?: number | null
    imageUrls?: FolderCreateimageUrlsInput | string[]
    isPinned?: boolean
  }

  export type FolderUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    masteryHistory?: FolderUpdatemasteryHistoryInput | InputJsonValue[]
    imageUrls?: FolderUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FolderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    masteryHistory?: FolderUpdatemasteryHistoryInput | InputJsonValue[]
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    imageUrls?: FolderUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuestionSetCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    currentIntervalDays?: number | null
    exploreScore?: number
    lastReviewedAt?: Date | string | null
    nextReviewAt?: Date | string | null
    reviewCount?: number
    understandScore?: number
    useScore?: number
    currentForgottenPercentage?: number | null
    currentTotalMasteryScore?: number
    currentUUESetStage?: string
    forgettingCurveParams?: NullableJsonNullValueInput | InputJsonValue
    masteryHistory?: QuestionSetCreatemasteryHistoryInput | InputJsonValue[]
    source?: string | null
    instructions?: string | null
    isTracked?: boolean
    imageUrls?: QuestionSetCreateimageUrlsInput | string[]
    isPinned?: boolean
    notes?: NoteCreateNestedManyWithoutQuestionSetInput
    questions?: QuestionCreateNestedManyWithoutQuestionSetInput
    folder: FolderCreateNestedOneWithoutQuestionSetsInput
    userAnswers?: UserQuestionAnswerCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetUncheckedCreateInput = {
    id?: number
    name: string
    folderId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    currentIntervalDays?: number | null
    exploreScore?: number
    lastReviewedAt?: Date | string | null
    nextReviewAt?: Date | string | null
    reviewCount?: number
    understandScore?: number
    useScore?: number
    currentForgottenPercentage?: number | null
    currentTotalMasteryScore?: number
    currentUUESetStage?: string
    forgettingCurveParams?: NullableJsonNullValueInput | InputJsonValue
    masteryHistory?: QuestionSetCreatemasteryHistoryInput | InputJsonValue[]
    source?: string | null
    instructions?: string | null
    isTracked?: boolean
    imageUrls?: QuestionSetCreateimageUrlsInput | string[]
    isPinned?: boolean
    notes?: NoteUncheckedCreateNestedManyWithoutQuestionSetInput
    questions?: QuestionUncheckedCreateNestedManyWithoutQuestionSetInput
    userAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentIntervalDays?: NullableFloatFieldUpdateOperationsInput | number | null
    exploreScore?: FloatFieldUpdateOperationsInput | number
    lastReviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewCount?: IntFieldUpdateOperationsInput | number
    understandScore?: FloatFieldUpdateOperationsInput | number
    useScore?: FloatFieldUpdateOperationsInput | number
    currentForgottenPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    currentTotalMasteryScore?: FloatFieldUpdateOperationsInput | number
    currentUUESetStage?: StringFieldUpdateOperationsInput | string
    forgettingCurveParams?: NullableJsonNullValueInput | InputJsonValue
    masteryHistory?: QuestionSetUpdatemasteryHistoryInput | InputJsonValue[]
    source?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    isTracked?: BoolFieldUpdateOperationsInput | boolean
    imageUrls?: QuestionSetUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    notes?: NoteUpdateManyWithoutQuestionSetNestedInput
    questions?: QuestionUpdateManyWithoutQuestionSetNestedInput
    folder?: FolderUpdateOneRequiredWithoutQuestionSetsNestedInput
    userAnswers?: UserQuestionAnswerUpdateManyWithoutQuestionSetNestedInput
  }

  export type QuestionSetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    folderId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentIntervalDays?: NullableFloatFieldUpdateOperationsInput | number | null
    exploreScore?: FloatFieldUpdateOperationsInput | number
    lastReviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewCount?: IntFieldUpdateOperationsInput | number
    understandScore?: FloatFieldUpdateOperationsInput | number
    useScore?: FloatFieldUpdateOperationsInput | number
    currentForgottenPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    currentTotalMasteryScore?: FloatFieldUpdateOperationsInput | number
    currentUUESetStage?: StringFieldUpdateOperationsInput | string
    forgettingCurveParams?: NullableJsonNullValueInput | InputJsonValue
    masteryHistory?: QuestionSetUpdatemasteryHistoryInput | InputJsonValue[]
    source?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    isTracked?: BoolFieldUpdateOperationsInput | boolean
    imageUrls?: QuestionSetUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    notes?: NoteUncheckedUpdateManyWithoutQuestionSetNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutQuestionSetNestedInput
    userAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutQuestionSetNestedInput
  }

  export type QuestionSetCreateManyInput = {
    id?: number
    name: string
    folderId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    currentIntervalDays?: number | null
    exploreScore?: number
    lastReviewedAt?: Date | string | null
    nextReviewAt?: Date | string | null
    reviewCount?: number
    understandScore?: number
    useScore?: number
    currentForgottenPercentage?: number | null
    currentTotalMasteryScore?: number
    currentUUESetStage?: string
    forgettingCurveParams?: NullableJsonNullValueInput | InputJsonValue
    masteryHistory?: QuestionSetCreatemasteryHistoryInput | InputJsonValue[]
    source?: string | null
    instructions?: string | null
    isTracked?: boolean
    imageUrls?: QuestionSetCreateimageUrlsInput | string[]
    isPinned?: boolean
  }

  export type QuestionSetUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentIntervalDays?: NullableFloatFieldUpdateOperationsInput | number | null
    exploreScore?: FloatFieldUpdateOperationsInput | number
    lastReviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewCount?: IntFieldUpdateOperationsInput | number
    understandScore?: FloatFieldUpdateOperationsInput | number
    useScore?: FloatFieldUpdateOperationsInput | number
    currentForgottenPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    currentTotalMasteryScore?: FloatFieldUpdateOperationsInput | number
    currentUUESetStage?: StringFieldUpdateOperationsInput | string
    forgettingCurveParams?: NullableJsonNullValueInput | InputJsonValue
    masteryHistory?: QuestionSetUpdatemasteryHistoryInput | InputJsonValue[]
    source?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    isTracked?: BoolFieldUpdateOperationsInput | boolean
    imageUrls?: QuestionSetUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuestionSetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    folderId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentIntervalDays?: NullableFloatFieldUpdateOperationsInput | number | null
    exploreScore?: FloatFieldUpdateOperationsInput | number
    lastReviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewCount?: IntFieldUpdateOperationsInput | number
    understandScore?: FloatFieldUpdateOperationsInput | number
    useScore?: FloatFieldUpdateOperationsInput | number
    currentForgottenPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    currentTotalMasteryScore?: FloatFieldUpdateOperationsInput | number
    currentUUESetStage?: StringFieldUpdateOperationsInput | string
    forgettingCurveParams?: NullableJsonNullValueInput | InputJsonValue
    masteryHistory?: QuestionSetUpdatemasteryHistoryInput | InputJsonValue[]
    source?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    isTracked?: BoolFieldUpdateOperationsInput | boolean
    imageUrls?: QuestionSetUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuestionCreateInput = {
    answer?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    options?: QuestionCreateoptionsInput | string[]
    questionType: string
    text: string
    conceptTags?: QuestionCreateconceptTagsInput | string[]
    lastAnswerCorrect?: boolean | null
    uueFocus?: string
    totalMarksAvailable?: number
    markingCriteria?: NullableJsonNullValueInput | InputJsonValue
    currentMasteryScore?: number | null
    difficultyScore?: number | null
    timesAnsweredCorrectly?: number
    timesAnsweredIncorrectly?: number
    selfMark?: boolean
    autoMark?: boolean
    aiGenerated?: boolean
    inCat?: string | null
    imageUrls?: QuestionCreateimageUrlsInput | string[]
    questionSet: QuestionSetCreateNestedOneWithoutQuestionsInput
    userAnswers?: UserQuestionAnswerCreateNestedManyWithoutQuestionInput
    insightCatalysts?: InsightCatalystCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateInput = {
    id?: number
    answer?: string | null
    questionSetId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    options?: QuestionCreateoptionsInput | string[]
    questionType: string
    text: string
    conceptTags?: QuestionCreateconceptTagsInput | string[]
    lastAnswerCorrect?: boolean | null
    uueFocus?: string
    totalMarksAvailable?: number
    markingCriteria?: NullableJsonNullValueInput | InputJsonValue
    currentMasteryScore?: number | null
    difficultyScore?: number | null
    timesAnsweredCorrectly?: number
    timesAnsweredIncorrectly?: number
    selfMark?: boolean
    autoMark?: boolean
    aiGenerated?: boolean
    inCat?: string | null
    imageUrls?: QuestionCreateimageUrlsInput | string[]
    userAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutQuestionInput
    insightCatalysts?: InsightCatalystUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUpdateInput = {
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: QuestionUpdateoptionsInput | string[]
    questionType?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    conceptTags?: QuestionUpdateconceptTagsInput | string[]
    lastAnswerCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    uueFocus?: StringFieldUpdateOperationsInput | string
    totalMarksAvailable?: IntFieldUpdateOperationsInput | number
    markingCriteria?: NullableJsonNullValueInput | InputJsonValue
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    difficultyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    timesAnsweredCorrectly?: IntFieldUpdateOperationsInput | number
    timesAnsweredIncorrectly?: IntFieldUpdateOperationsInput | number
    selfMark?: BoolFieldUpdateOperationsInput | boolean
    autoMark?: BoolFieldUpdateOperationsInput | boolean
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    inCat?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrls?: QuestionUpdateimageUrlsInput | string[]
    questionSet?: QuestionSetUpdateOneRequiredWithoutQuestionsNestedInput
    userAnswers?: UserQuestionAnswerUpdateManyWithoutQuestionNestedInput
    insightCatalysts?: InsightCatalystUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    questionSetId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: QuestionUpdateoptionsInput | string[]
    questionType?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    conceptTags?: QuestionUpdateconceptTagsInput | string[]
    lastAnswerCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    uueFocus?: StringFieldUpdateOperationsInput | string
    totalMarksAvailable?: IntFieldUpdateOperationsInput | number
    markingCriteria?: NullableJsonNullValueInput | InputJsonValue
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    difficultyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    timesAnsweredCorrectly?: IntFieldUpdateOperationsInput | number
    timesAnsweredIncorrectly?: IntFieldUpdateOperationsInput | number
    selfMark?: BoolFieldUpdateOperationsInput | boolean
    autoMark?: BoolFieldUpdateOperationsInput | boolean
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    inCat?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrls?: QuestionUpdateimageUrlsInput | string[]
    userAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutQuestionNestedInput
    insightCatalysts?: InsightCatalystUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionCreateManyInput = {
    id?: number
    answer?: string | null
    questionSetId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    options?: QuestionCreateoptionsInput | string[]
    questionType: string
    text: string
    conceptTags?: QuestionCreateconceptTagsInput | string[]
    lastAnswerCorrect?: boolean | null
    uueFocus?: string
    totalMarksAvailable?: number
    markingCriteria?: NullableJsonNullValueInput | InputJsonValue
    currentMasteryScore?: number | null
    difficultyScore?: number | null
    timesAnsweredCorrectly?: number
    timesAnsweredIncorrectly?: number
    selfMark?: boolean
    autoMark?: boolean
    aiGenerated?: boolean
    inCat?: string | null
    imageUrls?: QuestionCreateimageUrlsInput | string[]
  }

  export type QuestionUpdateManyMutationInput = {
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: QuestionUpdateoptionsInput | string[]
    questionType?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    conceptTags?: QuestionUpdateconceptTagsInput | string[]
    lastAnswerCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    uueFocus?: StringFieldUpdateOperationsInput | string
    totalMarksAvailable?: IntFieldUpdateOperationsInput | number
    markingCriteria?: NullableJsonNullValueInput | InputJsonValue
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    difficultyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    timesAnsweredCorrectly?: IntFieldUpdateOperationsInput | number
    timesAnsweredIncorrectly?: IntFieldUpdateOperationsInput | number
    selfMark?: BoolFieldUpdateOperationsInput | boolean
    autoMark?: BoolFieldUpdateOperationsInput | boolean
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    inCat?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrls?: QuestionUpdateimageUrlsInput | string[]
  }

  export type QuestionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    questionSetId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: QuestionUpdateoptionsInput | string[]
    questionType?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    conceptTags?: QuestionUpdateconceptTagsInput | string[]
    lastAnswerCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    uueFocus?: StringFieldUpdateOperationsInput | string
    totalMarksAvailable?: IntFieldUpdateOperationsInput | number
    markingCriteria?: NullableJsonNullValueInput | InputJsonValue
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    difficultyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    timesAnsweredCorrectly?: IntFieldUpdateOperationsInput | number
    timesAnsweredIncorrectly?: IntFieldUpdateOperationsInput | number
    selfMark?: BoolFieldUpdateOperationsInput | boolean
    autoMark?: BoolFieldUpdateOperationsInput | boolean
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    inCat?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrls?: QuestionUpdateimageUrlsInput | string[]
  }

  export type UserQuestionAnswerCreateInput = {
    isCorrect: boolean
    confidence?: number | null
    timeSpent: number
    answeredAt?: Date | string
    scoreAchieved: number
    createdAt?: Date | string
    feedbackFromAI?: string | null
    updatedAt?: Date | string
    userAnswerText?: string | null
    uueFocusTested?: string | null
    question: QuestionCreateNestedOneWithoutUserAnswersInput
    questionSet?: QuestionSetCreateNestedOneWithoutUserAnswersInput
    user: UserCreateNestedOneWithoutQuestionAnswersInput
    studySession?: UserStudySessionCreateNestedOneWithoutUserQuestionAnswersInput
  }

  export type UserQuestionAnswerUncheckedCreateInput = {
    id?: number
    userId: number
    questionId: number
    isCorrect: boolean
    confidence?: number | null
    timeSpent: number
    answeredAt?: Date | string
    scoreAchieved: number
    createdAt?: Date | string
    feedbackFromAI?: string | null
    questionSetId?: number | null
    updatedAt?: Date | string
    userAnswerText?: string | null
    uueFocusTested?: string | null
    userStudySessionId?: number | null
  }

  export type UserQuestionAnswerUpdateInput = {
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    confidence?: NullableIntFieldUpdateOperationsInput | number | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreAchieved?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackFromAI?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userAnswerText?: NullableStringFieldUpdateOperationsInput | string | null
    uueFocusTested?: NullableStringFieldUpdateOperationsInput | string | null
    question?: QuestionUpdateOneRequiredWithoutUserAnswersNestedInput
    questionSet?: QuestionSetUpdateOneWithoutUserAnswersNestedInput
    user?: UserUpdateOneRequiredWithoutQuestionAnswersNestedInput
    studySession?: UserStudySessionUpdateOneWithoutUserQuestionAnswersNestedInput
  }

  export type UserQuestionAnswerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    confidence?: NullableIntFieldUpdateOperationsInput | number | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreAchieved?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackFromAI?: NullableStringFieldUpdateOperationsInput | string | null
    questionSetId?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userAnswerText?: NullableStringFieldUpdateOperationsInput | string | null
    uueFocusTested?: NullableStringFieldUpdateOperationsInput | string | null
    userStudySessionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserQuestionAnswerCreateManyInput = {
    id?: number
    userId: number
    questionId: number
    isCorrect: boolean
    confidence?: number | null
    timeSpent: number
    answeredAt?: Date | string
    scoreAchieved: number
    createdAt?: Date | string
    feedbackFromAI?: string | null
    questionSetId?: number | null
    updatedAt?: Date | string
    userAnswerText?: string | null
    uueFocusTested?: string | null
    userStudySessionId?: number | null
  }

  export type UserQuestionAnswerUpdateManyMutationInput = {
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    confidence?: NullableIntFieldUpdateOperationsInput | number | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreAchieved?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackFromAI?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userAnswerText?: NullableStringFieldUpdateOperationsInput | string | null
    uueFocusTested?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserQuestionAnswerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    confidence?: NullableIntFieldUpdateOperationsInput | number | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreAchieved?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackFromAI?: NullableStringFieldUpdateOperationsInput | string | null
    questionSetId?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userAnswerText?: NullableStringFieldUpdateOperationsInput | string | null
    uueFocusTested?: NullableStringFieldUpdateOperationsInput | string | null
    userStudySessionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserStudySessionCreateInput = {
    sessionStartedAt?: Date | string | null
    sessionEndedAt?: Date | string
    timeSpentSeconds: number
    answeredQuestionsCount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userQuestionAnswers?: UserQuestionAnswerCreateNestedManyWithoutStudySessionInput
    user: UserCreateNestedOneWithoutStudySessionsInput
  }

  export type UserStudySessionUncheckedCreateInput = {
    id?: number
    userId: number
    sessionStartedAt?: Date | string | null
    sessionEndedAt?: Date | string
    timeSpentSeconds: number
    answeredQuestionsCount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userQuestionAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutStudySessionInput
  }

  export type UserStudySessionUpdateInput = {
    sessionStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessionEndedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeSpentSeconds?: IntFieldUpdateOperationsInput | number
    answeredQuestionsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userQuestionAnswers?: UserQuestionAnswerUpdateManyWithoutStudySessionNestedInput
    user?: UserUpdateOneRequiredWithoutStudySessionsNestedInput
  }

  export type UserStudySessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    sessionStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessionEndedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeSpentSeconds?: IntFieldUpdateOperationsInput | number
    answeredQuestionsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userQuestionAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutStudySessionNestedInput
  }

  export type UserStudySessionCreateManyInput = {
    id?: number
    userId: number
    sessionStartedAt?: Date | string | null
    sessionEndedAt?: Date | string
    timeSpentSeconds: number
    answeredQuestionsCount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStudySessionUpdateManyMutationInput = {
    sessionStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessionEndedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeSpentSeconds?: IntFieldUpdateOperationsInput | number
    answeredQuestionsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStudySessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    sessionStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessionEndedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeSpentSeconds?: IntFieldUpdateOperationsInput | number
    answeredQuestionsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoteCreateInput = {
    title: string
    content: JsonNullValueInput | InputJsonValue
    plainText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutNotesInput
    folder?: FolderCreateNestedOneWithoutNotesInput
    questionSet?: QuestionSetCreateNestedOneWithoutNotesInput
    insightCatalysts?: InsightCatalystCreateNestedManyWithoutNoteInput
  }

  export type NoteUncheckedCreateInput = {
    id?: number
    title: string
    content: JsonNullValueInput | InputJsonValue
    plainText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    folderId?: number | null
    questionSetId?: number | null
    insightCatalysts?: InsightCatalystUncheckedCreateNestedManyWithoutNoteInput
  }

  export type NoteUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    plainText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotesNestedInput
    folder?: FolderUpdateOneWithoutNotesNestedInput
    questionSet?: QuestionSetUpdateOneWithoutNotesNestedInput
    insightCatalysts?: InsightCatalystUpdateManyWithoutNoteNestedInput
  }

  export type NoteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    plainText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    folderId?: NullableIntFieldUpdateOperationsInput | number | null
    questionSetId?: NullableIntFieldUpdateOperationsInput | number | null
    insightCatalysts?: InsightCatalystUncheckedUpdateManyWithoutNoteNestedInput
  }

  export type NoteCreateManyInput = {
    id?: number
    title: string
    content: JsonNullValueInput | InputJsonValue
    plainText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    folderId?: number | null
    questionSetId?: number | null
  }

  export type NoteUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    plainText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    plainText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    folderId?: NullableIntFieldUpdateOperationsInput | number | null
    questionSetId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type InsightCatalystCreateInput = {
    type: string
    text: string
    explanation?: string | null
    imageUrls?: InsightCatalystCreateimageUrlsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutInsightCatalystsInput
    note?: NoteCreateNestedOneWithoutInsightCatalystsInput
    question?: QuestionCreateNestedOneWithoutInsightCatalystsInput
  }

  export type InsightCatalystUncheckedCreateInput = {
    id?: number
    type: string
    text: string
    explanation?: string | null
    imageUrls?: InsightCatalystCreateimageUrlsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    noteId?: number | null
    questionId?: number | null
  }

  export type InsightCatalystUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrls?: InsightCatalystUpdateimageUrlsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutInsightCatalystsNestedInput
    note?: NoteUpdateOneWithoutInsightCatalystsNestedInput
    question?: QuestionUpdateOneWithoutInsightCatalystsNestedInput
  }

  export type InsightCatalystUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrls?: InsightCatalystUpdateimageUrlsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    noteId?: NullableIntFieldUpdateOperationsInput | number | null
    questionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type InsightCatalystCreateManyInput = {
    id?: number
    type: string
    text: string
    explanation?: string | null
    imageUrls?: InsightCatalystCreateimageUrlsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    noteId?: number | null
    questionId?: number | null
  }

  export type InsightCatalystUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrls?: InsightCatalystUpdateimageUrlsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsightCatalystUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrls?: InsightCatalystUpdateimageUrlsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    noteId?: NullableIntFieldUpdateOperationsInput | number | null
    questionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FolderListRelationFilter = {
    every?: FolderWhereInput
    some?: FolderWhereInput
    none?: FolderWhereInput
  }

  export type UserQuestionAnswerListRelationFilter = {
    every?: UserQuestionAnswerWhereInput
    some?: UserQuestionAnswerWhereInput
    none?: UserQuestionAnswerWhereInput
  }

  export type UserStudySessionListRelationFilter = {
    every?: UserStudySessionWhereInput
    some?: UserStudySessionWhereInput
    none?: UserStudySessionWhereInput
  }

  export type NoteListRelationFilter = {
    every?: NoteWhereInput
    some?: NoteWhereInput
    none?: NoteWhereInput
  }

  export type InsightCatalystListRelationFilter = {
    every?: InsightCatalystWhereInput
    some?: InsightCatalystWhereInput
    none?: InsightCatalystWhereInput
  }

  export type FolderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserQuestionAnswerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserStudySessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InsightCatalystOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dailyStudyTimeMinutes?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    dailyStudyTimeMinutes?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dailyStudyTimeMinutes?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dailyStudyTimeMinutes?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    dailyStudyTimeMinutes?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }
  export type JsonNullableListFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableListFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableListFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableListFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel> | null
    has?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    hasEvery?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    hasSome?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type QuestionSetListRelationFilter = {
    every?: QuestionSetWhereInput
    some?: QuestionSetWhereInput
    none?: QuestionSetWhereInput
  }

  export type FolderNullableScalarRelationFilter = {
    is?: FolderWhereInput | null
    isNot?: FolderWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type QuestionSetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FolderCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentMasteryScore?: SortOrder
    masteryHistory?: SortOrder
    parentId?: SortOrder
    imageUrls?: SortOrder
    isPinned?: SortOrder
  }

  export type FolderAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    currentMasteryScore?: SortOrder
    parentId?: SortOrder
  }

  export type FolderMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentMasteryScore?: SortOrder
    parentId?: SortOrder
    isPinned?: SortOrder
  }

  export type FolderMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentMasteryScore?: SortOrder
    parentId?: SortOrder
    isPinned?: SortOrder
  }

  export type FolderSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    currentMasteryScore?: SortOrder
    parentId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type QuestionListRelationFilter = {
    every?: QuestionWhereInput
    some?: QuestionWhereInput
    none?: QuestionWhereInput
  }

  export type FolderScalarRelationFilter = {
    is?: FolderWhereInput
    isNot?: FolderWhereInput
  }

  export type QuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionSetCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    folderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentIntervalDays?: SortOrder
    exploreScore?: SortOrder
    lastReviewedAt?: SortOrder
    nextReviewAt?: SortOrder
    reviewCount?: SortOrder
    understandScore?: SortOrder
    useScore?: SortOrder
    currentForgottenPercentage?: SortOrder
    currentTotalMasteryScore?: SortOrder
    currentUUESetStage?: SortOrder
    forgettingCurveParams?: SortOrder
    masteryHistory?: SortOrder
    source?: SortOrder
    instructions?: SortOrder
    isTracked?: SortOrder
    imageUrls?: SortOrder
    isPinned?: SortOrder
  }

  export type QuestionSetAvgOrderByAggregateInput = {
    id?: SortOrder
    folderId?: SortOrder
    currentIntervalDays?: SortOrder
    exploreScore?: SortOrder
    reviewCount?: SortOrder
    understandScore?: SortOrder
    useScore?: SortOrder
    currentForgottenPercentage?: SortOrder
    currentTotalMasteryScore?: SortOrder
  }

  export type QuestionSetMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    folderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentIntervalDays?: SortOrder
    exploreScore?: SortOrder
    lastReviewedAt?: SortOrder
    nextReviewAt?: SortOrder
    reviewCount?: SortOrder
    understandScore?: SortOrder
    useScore?: SortOrder
    currentForgottenPercentage?: SortOrder
    currentTotalMasteryScore?: SortOrder
    currentUUESetStage?: SortOrder
    source?: SortOrder
    instructions?: SortOrder
    isTracked?: SortOrder
    isPinned?: SortOrder
  }

  export type QuestionSetMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    folderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentIntervalDays?: SortOrder
    exploreScore?: SortOrder
    lastReviewedAt?: SortOrder
    nextReviewAt?: SortOrder
    reviewCount?: SortOrder
    understandScore?: SortOrder
    useScore?: SortOrder
    currentForgottenPercentage?: SortOrder
    currentTotalMasteryScore?: SortOrder
    currentUUESetStage?: SortOrder
    source?: SortOrder
    instructions?: SortOrder
    isTracked?: SortOrder
    isPinned?: SortOrder
  }

  export type QuestionSetSumOrderByAggregateInput = {
    id?: SortOrder
    folderId?: SortOrder
    currentIntervalDays?: SortOrder
    exploreScore?: SortOrder
    reviewCount?: SortOrder
    understandScore?: SortOrder
    useScore?: SortOrder
    currentForgottenPercentage?: SortOrder
    currentTotalMasteryScore?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type QuestionSetScalarRelationFilter = {
    is?: QuestionSetWhereInput
    isNot?: QuestionSetWhereInput
  }

  export type QuestionCountOrderByAggregateInput = {
    id?: SortOrder
    answer?: SortOrder
    questionSetId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    options?: SortOrder
    questionType?: SortOrder
    text?: SortOrder
    conceptTags?: SortOrder
    lastAnswerCorrect?: SortOrder
    uueFocus?: SortOrder
    totalMarksAvailable?: SortOrder
    markingCriteria?: SortOrder
    currentMasteryScore?: SortOrder
    difficultyScore?: SortOrder
    timesAnsweredCorrectly?: SortOrder
    timesAnsweredIncorrectly?: SortOrder
    selfMark?: SortOrder
    autoMark?: SortOrder
    aiGenerated?: SortOrder
    inCat?: SortOrder
    imageUrls?: SortOrder
  }

  export type QuestionAvgOrderByAggregateInput = {
    id?: SortOrder
    questionSetId?: SortOrder
    totalMarksAvailable?: SortOrder
    currentMasteryScore?: SortOrder
    difficultyScore?: SortOrder
    timesAnsweredCorrectly?: SortOrder
    timesAnsweredIncorrectly?: SortOrder
  }

  export type QuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    answer?: SortOrder
    questionSetId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    questionType?: SortOrder
    text?: SortOrder
    lastAnswerCorrect?: SortOrder
    uueFocus?: SortOrder
    totalMarksAvailable?: SortOrder
    currentMasteryScore?: SortOrder
    difficultyScore?: SortOrder
    timesAnsweredCorrectly?: SortOrder
    timesAnsweredIncorrectly?: SortOrder
    selfMark?: SortOrder
    autoMark?: SortOrder
    aiGenerated?: SortOrder
    inCat?: SortOrder
  }

  export type QuestionMinOrderByAggregateInput = {
    id?: SortOrder
    answer?: SortOrder
    questionSetId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    questionType?: SortOrder
    text?: SortOrder
    lastAnswerCorrect?: SortOrder
    uueFocus?: SortOrder
    totalMarksAvailable?: SortOrder
    currentMasteryScore?: SortOrder
    difficultyScore?: SortOrder
    timesAnsweredCorrectly?: SortOrder
    timesAnsweredIncorrectly?: SortOrder
    selfMark?: SortOrder
    autoMark?: SortOrder
    aiGenerated?: SortOrder
    inCat?: SortOrder
  }

  export type QuestionSumOrderByAggregateInput = {
    id?: SortOrder
    questionSetId?: SortOrder
    totalMarksAvailable?: SortOrder
    currentMasteryScore?: SortOrder
    difficultyScore?: SortOrder
    timesAnsweredCorrectly?: SortOrder
    timesAnsweredIncorrectly?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type QuestionScalarRelationFilter = {
    is?: QuestionWhereInput
    isNot?: QuestionWhereInput
  }

  export type QuestionSetNullableScalarRelationFilter = {
    is?: QuestionSetWhereInput | null
    isNot?: QuestionSetWhereInput | null
  }

  export type UserStudySessionNullableScalarRelationFilter = {
    is?: UserStudySessionWhereInput | null
    isNot?: UserStudySessionWhereInput | null
  }

  export type UserQuestionAnswerCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    isCorrect?: SortOrder
    confidence?: SortOrder
    timeSpent?: SortOrder
    answeredAt?: SortOrder
    scoreAchieved?: SortOrder
    createdAt?: SortOrder
    feedbackFromAI?: SortOrder
    questionSetId?: SortOrder
    updatedAt?: SortOrder
    userAnswerText?: SortOrder
    uueFocusTested?: SortOrder
    userStudySessionId?: SortOrder
  }

  export type UserQuestionAnswerAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    confidence?: SortOrder
    timeSpent?: SortOrder
    scoreAchieved?: SortOrder
    questionSetId?: SortOrder
    userStudySessionId?: SortOrder
  }

  export type UserQuestionAnswerMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    isCorrect?: SortOrder
    confidence?: SortOrder
    timeSpent?: SortOrder
    answeredAt?: SortOrder
    scoreAchieved?: SortOrder
    createdAt?: SortOrder
    feedbackFromAI?: SortOrder
    questionSetId?: SortOrder
    updatedAt?: SortOrder
    userAnswerText?: SortOrder
    uueFocusTested?: SortOrder
    userStudySessionId?: SortOrder
  }

  export type UserQuestionAnswerMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    isCorrect?: SortOrder
    confidence?: SortOrder
    timeSpent?: SortOrder
    answeredAt?: SortOrder
    scoreAchieved?: SortOrder
    createdAt?: SortOrder
    feedbackFromAI?: SortOrder
    questionSetId?: SortOrder
    updatedAt?: SortOrder
    userAnswerText?: SortOrder
    uueFocusTested?: SortOrder
    userStudySessionId?: SortOrder
  }

  export type UserQuestionAnswerSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionId?: SortOrder
    confidence?: SortOrder
    timeSpent?: SortOrder
    scoreAchieved?: SortOrder
    questionSetId?: SortOrder
    userStudySessionId?: SortOrder
  }

  export type UserStudySessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionStartedAt?: SortOrder
    sessionEndedAt?: SortOrder
    timeSpentSeconds?: SortOrder
    answeredQuestionsCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserStudySessionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    timeSpentSeconds?: SortOrder
    answeredQuestionsCount?: SortOrder
  }

  export type UserStudySessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionStartedAt?: SortOrder
    sessionEndedAt?: SortOrder
    timeSpentSeconds?: SortOrder
    answeredQuestionsCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserStudySessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionStartedAt?: SortOrder
    sessionEndedAt?: SortOrder
    timeSpentSeconds?: SortOrder
    answeredQuestionsCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserStudySessionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    timeSpentSeconds?: SortOrder
    answeredQuestionsCount?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NoteCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    plainText?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    folderId?: SortOrder
    questionSetId?: SortOrder
  }

  export type NoteAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    folderId?: SortOrder
    questionSetId?: SortOrder
  }

  export type NoteMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    plainText?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    folderId?: SortOrder
    questionSetId?: SortOrder
  }

  export type NoteMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    plainText?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    folderId?: SortOrder
    questionSetId?: SortOrder
  }

  export type NoteSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    folderId?: SortOrder
    questionSetId?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type NoteNullableScalarRelationFilter = {
    is?: NoteWhereInput | null
    isNot?: NoteWhereInput | null
  }

  export type QuestionNullableScalarRelationFilter = {
    is?: QuestionWhereInput | null
    isNot?: QuestionWhereInput | null
  }

  export type InsightCatalystCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    text?: SortOrder
    explanation?: SortOrder
    imageUrls?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    noteId?: SortOrder
    questionId?: SortOrder
  }

  export type InsightCatalystAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    noteId?: SortOrder
    questionId?: SortOrder
  }

  export type InsightCatalystMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    text?: SortOrder
    explanation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    noteId?: SortOrder
    questionId?: SortOrder
  }

  export type InsightCatalystMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    text?: SortOrder
    explanation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    noteId?: SortOrder
    questionId?: SortOrder
  }

  export type InsightCatalystSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    noteId?: SortOrder
    questionId?: SortOrder
  }

  export type FolderCreateNestedManyWithoutUserInput = {
    create?: XOR<FolderCreateWithoutUserInput, FolderUncheckedCreateWithoutUserInput> | FolderCreateWithoutUserInput[] | FolderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutUserInput | FolderCreateOrConnectWithoutUserInput[]
    createMany?: FolderCreateManyUserInputEnvelope
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
  }

  export type UserQuestionAnswerCreateNestedManyWithoutUserInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutUserInput, UserQuestionAnswerUncheckedCreateWithoutUserInput> | UserQuestionAnswerCreateWithoutUserInput[] | UserQuestionAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutUserInput | UserQuestionAnswerCreateOrConnectWithoutUserInput[]
    createMany?: UserQuestionAnswerCreateManyUserInputEnvelope
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
  }

  export type UserStudySessionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserStudySessionCreateWithoutUserInput, UserStudySessionUncheckedCreateWithoutUserInput> | UserStudySessionCreateWithoutUserInput[] | UserStudySessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserStudySessionCreateOrConnectWithoutUserInput | UserStudySessionCreateOrConnectWithoutUserInput[]
    createMany?: UserStudySessionCreateManyUserInputEnvelope
    connect?: UserStudySessionWhereUniqueInput | UserStudySessionWhereUniqueInput[]
  }

  export type NoteCreateNestedManyWithoutUserInput = {
    create?: XOR<NoteCreateWithoutUserInput, NoteUncheckedCreateWithoutUserInput> | NoteCreateWithoutUserInput[] | NoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutUserInput | NoteCreateOrConnectWithoutUserInput[]
    createMany?: NoteCreateManyUserInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type InsightCatalystCreateNestedManyWithoutUserInput = {
    create?: XOR<InsightCatalystCreateWithoutUserInput, InsightCatalystUncheckedCreateWithoutUserInput> | InsightCatalystCreateWithoutUserInput[] | InsightCatalystUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InsightCatalystCreateOrConnectWithoutUserInput | InsightCatalystCreateOrConnectWithoutUserInput[]
    createMany?: InsightCatalystCreateManyUserInputEnvelope
    connect?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
  }

  export type FolderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FolderCreateWithoutUserInput, FolderUncheckedCreateWithoutUserInput> | FolderCreateWithoutUserInput[] | FolderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutUserInput | FolderCreateOrConnectWithoutUserInput[]
    createMany?: FolderCreateManyUserInputEnvelope
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
  }

  export type UserQuestionAnswerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutUserInput, UserQuestionAnswerUncheckedCreateWithoutUserInput> | UserQuestionAnswerCreateWithoutUserInput[] | UserQuestionAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutUserInput | UserQuestionAnswerCreateOrConnectWithoutUserInput[]
    createMany?: UserQuestionAnswerCreateManyUserInputEnvelope
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
  }

  export type UserStudySessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserStudySessionCreateWithoutUserInput, UserStudySessionUncheckedCreateWithoutUserInput> | UserStudySessionCreateWithoutUserInput[] | UserStudySessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserStudySessionCreateOrConnectWithoutUserInput | UserStudySessionCreateOrConnectWithoutUserInput[]
    createMany?: UserStudySessionCreateManyUserInputEnvelope
    connect?: UserStudySessionWhereUniqueInput | UserStudySessionWhereUniqueInput[]
  }

  export type NoteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NoteCreateWithoutUserInput, NoteUncheckedCreateWithoutUserInput> | NoteCreateWithoutUserInput[] | NoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutUserInput | NoteCreateOrConnectWithoutUserInput[]
    createMany?: NoteCreateManyUserInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type InsightCatalystUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<InsightCatalystCreateWithoutUserInput, InsightCatalystUncheckedCreateWithoutUserInput> | InsightCatalystCreateWithoutUserInput[] | InsightCatalystUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InsightCatalystCreateOrConnectWithoutUserInput | InsightCatalystCreateOrConnectWithoutUserInput[]
    createMany?: InsightCatalystCreateManyUserInputEnvelope
    connect?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FolderUpdateManyWithoutUserNestedInput = {
    create?: XOR<FolderCreateWithoutUserInput, FolderUncheckedCreateWithoutUserInput> | FolderCreateWithoutUserInput[] | FolderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutUserInput | FolderCreateOrConnectWithoutUserInput[]
    upsert?: FolderUpsertWithWhereUniqueWithoutUserInput | FolderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FolderCreateManyUserInputEnvelope
    set?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    disconnect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    delete?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    update?: FolderUpdateWithWhereUniqueWithoutUserInput | FolderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FolderUpdateManyWithWhereWithoutUserInput | FolderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FolderScalarWhereInput | FolderScalarWhereInput[]
  }

  export type UserQuestionAnswerUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutUserInput, UserQuestionAnswerUncheckedCreateWithoutUserInput> | UserQuestionAnswerCreateWithoutUserInput[] | UserQuestionAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutUserInput | UserQuestionAnswerCreateOrConnectWithoutUserInput[]
    upsert?: UserQuestionAnswerUpsertWithWhereUniqueWithoutUserInput | UserQuestionAnswerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserQuestionAnswerCreateManyUserInputEnvelope
    set?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    disconnect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    delete?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    update?: UserQuestionAnswerUpdateWithWhereUniqueWithoutUserInput | UserQuestionAnswerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserQuestionAnswerUpdateManyWithWhereWithoutUserInput | UserQuestionAnswerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
  }

  export type UserStudySessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserStudySessionCreateWithoutUserInput, UserStudySessionUncheckedCreateWithoutUserInput> | UserStudySessionCreateWithoutUserInput[] | UserStudySessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserStudySessionCreateOrConnectWithoutUserInput | UserStudySessionCreateOrConnectWithoutUserInput[]
    upsert?: UserStudySessionUpsertWithWhereUniqueWithoutUserInput | UserStudySessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserStudySessionCreateManyUserInputEnvelope
    set?: UserStudySessionWhereUniqueInput | UserStudySessionWhereUniqueInput[]
    disconnect?: UserStudySessionWhereUniqueInput | UserStudySessionWhereUniqueInput[]
    delete?: UserStudySessionWhereUniqueInput | UserStudySessionWhereUniqueInput[]
    connect?: UserStudySessionWhereUniqueInput | UserStudySessionWhereUniqueInput[]
    update?: UserStudySessionUpdateWithWhereUniqueWithoutUserInput | UserStudySessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserStudySessionUpdateManyWithWhereWithoutUserInput | UserStudySessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserStudySessionScalarWhereInput | UserStudySessionScalarWhereInput[]
  }

  export type NoteUpdateManyWithoutUserNestedInput = {
    create?: XOR<NoteCreateWithoutUserInput, NoteUncheckedCreateWithoutUserInput> | NoteCreateWithoutUserInput[] | NoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutUserInput | NoteCreateOrConnectWithoutUserInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutUserInput | NoteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NoteCreateManyUserInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutUserInput | NoteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutUserInput | NoteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type InsightCatalystUpdateManyWithoutUserNestedInput = {
    create?: XOR<InsightCatalystCreateWithoutUserInput, InsightCatalystUncheckedCreateWithoutUserInput> | InsightCatalystCreateWithoutUserInput[] | InsightCatalystUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InsightCatalystCreateOrConnectWithoutUserInput | InsightCatalystCreateOrConnectWithoutUserInput[]
    upsert?: InsightCatalystUpsertWithWhereUniqueWithoutUserInput | InsightCatalystUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InsightCatalystCreateManyUserInputEnvelope
    set?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
    disconnect?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
    delete?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
    connect?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
    update?: InsightCatalystUpdateWithWhereUniqueWithoutUserInput | InsightCatalystUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InsightCatalystUpdateManyWithWhereWithoutUserInput | InsightCatalystUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InsightCatalystScalarWhereInput | InsightCatalystScalarWhereInput[]
  }

  export type FolderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FolderCreateWithoutUserInput, FolderUncheckedCreateWithoutUserInput> | FolderCreateWithoutUserInput[] | FolderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutUserInput | FolderCreateOrConnectWithoutUserInput[]
    upsert?: FolderUpsertWithWhereUniqueWithoutUserInput | FolderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FolderCreateManyUserInputEnvelope
    set?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    disconnect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    delete?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    update?: FolderUpdateWithWhereUniqueWithoutUserInput | FolderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FolderUpdateManyWithWhereWithoutUserInput | FolderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FolderScalarWhereInput | FolderScalarWhereInput[]
  }

  export type UserQuestionAnswerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutUserInput, UserQuestionAnswerUncheckedCreateWithoutUserInput> | UserQuestionAnswerCreateWithoutUserInput[] | UserQuestionAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutUserInput | UserQuestionAnswerCreateOrConnectWithoutUserInput[]
    upsert?: UserQuestionAnswerUpsertWithWhereUniqueWithoutUserInput | UserQuestionAnswerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserQuestionAnswerCreateManyUserInputEnvelope
    set?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    disconnect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    delete?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    update?: UserQuestionAnswerUpdateWithWhereUniqueWithoutUserInput | UserQuestionAnswerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserQuestionAnswerUpdateManyWithWhereWithoutUserInput | UserQuestionAnswerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
  }

  export type UserStudySessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserStudySessionCreateWithoutUserInput, UserStudySessionUncheckedCreateWithoutUserInput> | UserStudySessionCreateWithoutUserInput[] | UserStudySessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserStudySessionCreateOrConnectWithoutUserInput | UserStudySessionCreateOrConnectWithoutUserInput[]
    upsert?: UserStudySessionUpsertWithWhereUniqueWithoutUserInput | UserStudySessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserStudySessionCreateManyUserInputEnvelope
    set?: UserStudySessionWhereUniqueInput | UserStudySessionWhereUniqueInput[]
    disconnect?: UserStudySessionWhereUniqueInput | UserStudySessionWhereUniqueInput[]
    delete?: UserStudySessionWhereUniqueInput | UserStudySessionWhereUniqueInput[]
    connect?: UserStudySessionWhereUniqueInput | UserStudySessionWhereUniqueInput[]
    update?: UserStudySessionUpdateWithWhereUniqueWithoutUserInput | UserStudySessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserStudySessionUpdateManyWithWhereWithoutUserInput | UserStudySessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserStudySessionScalarWhereInput | UserStudySessionScalarWhereInput[]
  }

  export type NoteUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NoteCreateWithoutUserInput, NoteUncheckedCreateWithoutUserInput> | NoteCreateWithoutUserInput[] | NoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutUserInput | NoteCreateOrConnectWithoutUserInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutUserInput | NoteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NoteCreateManyUserInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutUserInput | NoteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutUserInput | NoteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type InsightCatalystUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<InsightCatalystCreateWithoutUserInput, InsightCatalystUncheckedCreateWithoutUserInput> | InsightCatalystCreateWithoutUserInput[] | InsightCatalystUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InsightCatalystCreateOrConnectWithoutUserInput | InsightCatalystCreateOrConnectWithoutUserInput[]
    upsert?: InsightCatalystUpsertWithWhereUniqueWithoutUserInput | InsightCatalystUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InsightCatalystCreateManyUserInputEnvelope
    set?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
    disconnect?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
    delete?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
    connect?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
    update?: InsightCatalystUpdateWithWhereUniqueWithoutUserInput | InsightCatalystUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InsightCatalystUpdateManyWithWhereWithoutUserInput | InsightCatalystUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InsightCatalystScalarWhereInput | InsightCatalystScalarWhereInput[]
  }

  export type FolderCreatemasteryHistoryInput = {
    set: InputJsonValue[]
  }

  export type FolderCreateimageUrlsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutFoldersInput = {
    create?: XOR<UserCreateWithoutFoldersInput, UserUncheckedCreateWithoutFoldersInput>
    connectOrCreate?: UserCreateOrConnectWithoutFoldersInput
    connect?: UserWhereUniqueInput
  }

  export type QuestionSetCreateNestedManyWithoutFolderInput = {
    create?: XOR<QuestionSetCreateWithoutFolderInput, QuestionSetUncheckedCreateWithoutFolderInput> | QuestionSetCreateWithoutFolderInput[] | QuestionSetUncheckedCreateWithoutFolderInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutFolderInput | QuestionSetCreateOrConnectWithoutFolderInput[]
    createMany?: QuestionSetCreateManyFolderInputEnvelope
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
  }

  export type NoteCreateNestedManyWithoutFolderInput = {
    create?: XOR<NoteCreateWithoutFolderInput, NoteUncheckedCreateWithoutFolderInput> | NoteCreateWithoutFolderInput[] | NoteUncheckedCreateWithoutFolderInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutFolderInput | NoteCreateOrConnectWithoutFolderInput[]
    createMany?: NoteCreateManyFolderInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type FolderCreateNestedOneWithoutChildrenInput = {
    create?: XOR<FolderCreateWithoutChildrenInput, FolderUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: FolderCreateOrConnectWithoutChildrenInput
    connect?: FolderWhereUniqueInput
  }

  export type FolderCreateNestedManyWithoutParentInput = {
    create?: XOR<FolderCreateWithoutParentInput, FolderUncheckedCreateWithoutParentInput> | FolderCreateWithoutParentInput[] | FolderUncheckedCreateWithoutParentInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutParentInput | FolderCreateOrConnectWithoutParentInput[]
    createMany?: FolderCreateManyParentInputEnvelope
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
  }

  export type QuestionSetUncheckedCreateNestedManyWithoutFolderInput = {
    create?: XOR<QuestionSetCreateWithoutFolderInput, QuestionSetUncheckedCreateWithoutFolderInput> | QuestionSetCreateWithoutFolderInput[] | QuestionSetUncheckedCreateWithoutFolderInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutFolderInput | QuestionSetCreateOrConnectWithoutFolderInput[]
    createMany?: QuestionSetCreateManyFolderInputEnvelope
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
  }

  export type NoteUncheckedCreateNestedManyWithoutFolderInput = {
    create?: XOR<NoteCreateWithoutFolderInput, NoteUncheckedCreateWithoutFolderInput> | NoteCreateWithoutFolderInput[] | NoteUncheckedCreateWithoutFolderInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutFolderInput | NoteCreateOrConnectWithoutFolderInput[]
    createMany?: NoteCreateManyFolderInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type FolderUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<FolderCreateWithoutParentInput, FolderUncheckedCreateWithoutParentInput> | FolderCreateWithoutParentInput[] | FolderUncheckedCreateWithoutParentInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutParentInput | FolderCreateOrConnectWithoutParentInput[]
    createMany?: FolderCreateManyParentInputEnvelope
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FolderUpdatemasteryHistoryInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type FolderUpdateimageUrlsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutFoldersNestedInput = {
    create?: XOR<UserCreateWithoutFoldersInput, UserUncheckedCreateWithoutFoldersInput>
    connectOrCreate?: UserCreateOrConnectWithoutFoldersInput
    upsert?: UserUpsertWithoutFoldersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFoldersInput, UserUpdateWithoutFoldersInput>, UserUncheckedUpdateWithoutFoldersInput>
  }

  export type QuestionSetUpdateManyWithoutFolderNestedInput = {
    create?: XOR<QuestionSetCreateWithoutFolderInput, QuestionSetUncheckedCreateWithoutFolderInput> | QuestionSetCreateWithoutFolderInput[] | QuestionSetUncheckedCreateWithoutFolderInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutFolderInput | QuestionSetCreateOrConnectWithoutFolderInput[]
    upsert?: QuestionSetUpsertWithWhereUniqueWithoutFolderInput | QuestionSetUpsertWithWhereUniqueWithoutFolderInput[]
    createMany?: QuestionSetCreateManyFolderInputEnvelope
    set?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    disconnect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    delete?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    update?: QuestionSetUpdateWithWhereUniqueWithoutFolderInput | QuestionSetUpdateWithWhereUniqueWithoutFolderInput[]
    updateMany?: QuestionSetUpdateManyWithWhereWithoutFolderInput | QuestionSetUpdateManyWithWhereWithoutFolderInput[]
    deleteMany?: QuestionSetScalarWhereInput | QuestionSetScalarWhereInput[]
  }

  export type NoteUpdateManyWithoutFolderNestedInput = {
    create?: XOR<NoteCreateWithoutFolderInput, NoteUncheckedCreateWithoutFolderInput> | NoteCreateWithoutFolderInput[] | NoteUncheckedCreateWithoutFolderInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutFolderInput | NoteCreateOrConnectWithoutFolderInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutFolderInput | NoteUpsertWithWhereUniqueWithoutFolderInput[]
    createMany?: NoteCreateManyFolderInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutFolderInput | NoteUpdateWithWhereUniqueWithoutFolderInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutFolderInput | NoteUpdateManyWithWhereWithoutFolderInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type FolderUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<FolderCreateWithoutChildrenInput, FolderUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: FolderCreateOrConnectWithoutChildrenInput
    upsert?: FolderUpsertWithoutChildrenInput
    disconnect?: FolderWhereInput | boolean
    delete?: FolderWhereInput | boolean
    connect?: FolderWhereUniqueInput
    update?: XOR<XOR<FolderUpdateToOneWithWhereWithoutChildrenInput, FolderUpdateWithoutChildrenInput>, FolderUncheckedUpdateWithoutChildrenInput>
  }

  export type FolderUpdateManyWithoutParentNestedInput = {
    create?: XOR<FolderCreateWithoutParentInput, FolderUncheckedCreateWithoutParentInput> | FolderCreateWithoutParentInput[] | FolderUncheckedCreateWithoutParentInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutParentInput | FolderCreateOrConnectWithoutParentInput[]
    upsert?: FolderUpsertWithWhereUniqueWithoutParentInput | FolderUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: FolderCreateManyParentInputEnvelope
    set?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    disconnect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    delete?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    update?: FolderUpdateWithWhereUniqueWithoutParentInput | FolderUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: FolderUpdateManyWithWhereWithoutParentInput | FolderUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: FolderScalarWhereInput | FolderScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type QuestionSetUncheckedUpdateManyWithoutFolderNestedInput = {
    create?: XOR<QuestionSetCreateWithoutFolderInput, QuestionSetUncheckedCreateWithoutFolderInput> | QuestionSetCreateWithoutFolderInput[] | QuestionSetUncheckedCreateWithoutFolderInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutFolderInput | QuestionSetCreateOrConnectWithoutFolderInput[]
    upsert?: QuestionSetUpsertWithWhereUniqueWithoutFolderInput | QuestionSetUpsertWithWhereUniqueWithoutFolderInput[]
    createMany?: QuestionSetCreateManyFolderInputEnvelope
    set?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    disconnect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    delete?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    update?: QuestionSetUpdateWithWhereUniqueWithoutFolderInput | QuestionSetUpdateWithWhereUniqueWithoutFolderInput[]
    updateMany?: QuestionSetUpdateManyWithWhereWithoutFolderInput | QuestionSetUpdateManyWithWhereWithoutFolderInput[]
    deleteMany?: QuestionSetScalarWhereInput | QuestionSetScalarWhereInput[]
  }

  export type NoteUncheckedUpdateManyWithoutFolderNestedInput = {
    create?: XOR<NoteCreateWithoutFolderInput, NoteUncheckedCreateWithoutFolderInput> | NoteCreateWithoutFolderInput[] | NoteUncheckedCreateWithoutFolderInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutFolderInput | NoteCreateOrConnectWithoutFolderInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutFolderInput | NoteUpsertWithWhereUniqueWithoutFolderInput[]
    createMany?: NoteCreateManyFolderInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutFolderInput | NoteUpdateWithWhereUniqueWithoutFolderInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutFolderInput | NoteUpdateManyWithWhereWithoutFolderInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type FolderUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<FolderCreateWithoutParentInput, FolderUncheckedCreateWithoutParentInput> | FolderCreateWithoutParentInput[] | FolderUncheckedCreateWithoutParentInput[]
    connectOrCreate?: FolderCreateOrConnectWithoutParentInput | FolderCreateOrConnectWithoutParentInput[]
    upsert?: FolderUpsertWithWhereUniqueWithoutParentInput | FolderUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: FolderCreateManyParentInputEnvelope
    set?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    disconnect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    delete?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    connect?: FolderWhereUniqueInput | FolderWhereUniqueInput[]
    update?: FolderUpdateWithWhereUniqueWithoutParentInput | FolderUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: FolderUpdateManyWithWhereWithoutParentInput | FolderUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: FolderScalarWhereInput | FolderScalarWhereInput[]
  }

  export type QuestionSetCreatemasteryHistoryInput = {
    set: InputJsonValue[]
  }

  export type QuestionSetCreateimageUrlsInput = {
    set: string[]
  }

  export type NoteCreateNestedManyWithoutQuestionSetInput = {
    create?: XOR<NoteCreateWithoutQuestionSetInput, NoteUncheckedCreateWithoutQuestionSetInput> | NoteCreateWithoutQuestionSetInput[] | NoteUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutQuestionSetInput | NoteCreateOrConnectWithoutQuestionSetInput[]
    createMany?: NoteCreateManyQuestionSetInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type QuestionCreateNestedManyWithoutQuestionSetInput = {
    create?: XOR<QuestionCreateWithoutQuestionSetInput, QuestionUncheckedCreateWithoutQuestionSetInput> | QuestionCreateWithoutQuestionSetInput[] | QuestionUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutQuestionSetInput | QuestionCreateOrConnectWithoutQuestionSetInput[]
    createMany?: QuestionCreateManyQuestionSetInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type FolderCreateNestedOneWithoutQuestionSetsInput = {
    create?: XOR<FolderCreateWithoutQuestionSetsInput, FolderUncheckedCreateWithoutQuestionSetsInput>
    connectOrCreate?: FolderCreateOrConnectWithoutQuestionSetsInput
    connect?: FolderWhereUniqueInput
  }

  export type UserQuestionAnswerCreateNestedManyWithoutQuestionSetInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutQuestionSetInput, UserQuestionAnswerUncheckedCreateWithoutQuestionSetInput> | UserQuestionAnswerCreateWithoutQuestionSetInput[] | UserQuestionAnswerUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutQuestionSetInput | UserQuestionAnswerCreateOrConnectWithoutQuestionSetInput[]
    createMany?: UserQuestionAnswerCreateManyQuestionSetInputEnvelope
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
  }

  export type NoteUncheckedCreateNestedManyWithoutQuestionSetInput = {
    create?: XOR<NoteCreateWithoutQuestionSetInput, NoteUncheckedCreateWithoutQuestionSetInput> | NoteCreateWithoutQuestionSetInput[] | NoteUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutQuestionSetInput | NoteCreateOrConnectWithoutQuestionSetInput[]
    createMany?: NoteCreateManyQuestionSetInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type QuestionUncheckedCreateNestedManyWithoutQuestionSetInput = {
    create?: XOR<QuestionCreateWithoutQuestionSetInput, QuestionUncheckedCreateWithoutQuestionSetInput> | QuestionCreateWithoutQuestionSetInput[] | QuestionUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutQuestionSetInput | QuestionCreateOrConnectWithoutQuestionSetInput[]
    createMany?: QuestionCreateManyQuestionSetInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type UserQuestionAnswerUncheckedCreateNestedManyWithoutQuestionSetInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutQuestionSetInput, UserQuestionAnswerUncheckedCreateWithoutQuestionSetInput> | UserQuestionAnswerCreateWithoutQuestionSetInput[] | UserQuestionAnswerUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutQuestionSetInput | UserQuestionAnswerCreateOrConnectWithoutQuestionSetInput[]
    createMany?: UserQuestionAnswerCreateManyQuestionSetInputEnvelope
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type QuestionSetUpdatemasteryHistoryInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type QuestionSetUpdateimageUrlsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NoteUpdateManyWithoutQuestionSetNestedInput = {
    create?: XOR<NoteCreateWithoutQuestionSetInput, NoteUncheckedCreateWithoutQuestionSetInput> | NoteCreateWithoutQuestionSetInput[] | NoteUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutQuestionSetInput | NoteCreateOrConnectWithoutQuestionSetInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutQuestionSetInput | NoteUpsertWithWhereUniqueWithoutQuestionSetInput[]
    createMany?: NoteCreateManyQuestionSetInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutQuestionSetInput | NoteUpdateWithWhereUniqueWithoutQuestionSetInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutQuestionSetInput | NoteUpdateManyWithWhereWithoutQuestionSetInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type QuestionUpdateManyWithoutQuestionSetNestedInput = {
    create?: XOR<QuestionCreateWithoutQuestionSetInput, QuestionUncheckedCreateWithoutQuestionSetInput> | QuestionCreateWithoutQuestionSetInput[] | QuestionUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutQuestionSetInput | QuestionCreateOrConnectWithoutQuestionSetInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutQuestionSetInput | QuestionUpsertWithWhereUniqueWithoutQuestionSetInput[]
    createMany?: QuestionCreateManyQuestionSetInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutQuestionSetInput | QuestionUpdateWithWhereUniqueWithoutQuestionSetInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutQuestionSetInput | QuestionUpdateManyWithWhereWithoutQuestionSetInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type FolderUpdateOneRequiredWithoutQuestionSetsNestedInput = {
    create?: XOR<FolderCreateWithoutQuestionSetsInput, FolderUncheckedCreateWithoutQuestionSetsInput>
    connectOrCreate?: FolderCreateOrConnectWithoutQuestionSetsInput
    upsert?: FolderUpsertWithoutQuestionSetsInput
    connect?: FolderWhereUniqueInput
    update?: XOR<XOR<FolderUpdateToOneWithWhereWithoutQuestionSetsInput, FolderUpdateWithoutQuestionSetsInput>, FolderUncheckedUpdateWithoutQuestionSetsInput>
  }

  export type UserQuestionAnswerUpdateManyWithoutQuestionSetNestedInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutQuestionSetInput, UserQuestionAnswerUncheckedCreateWithoutQuestionSetInput> | UserQuestionAnswerCreateWithoutQuestionSetInput[] | UserQuestionAnswerUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutQuestionSetInput | UserQuestionAnswerCreateOrConnectWithoutQuestionSetInput[]
    upsert?: UserQuestionAnswerUpsertWithWhereUniqueWithoutQuestionSetInput | UserQuestionAnswerUpsertWithWhereUniqueWithoutQuestionSetInput[]
    createMany?: UserQuestionAnswerCreateManyQuestionSetInputEnvelope
    set?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    disconnect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    delete?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    update?: UserQuestionAnswerUpdateWithWhereUniqueWithoutQuestionSetInput | UserQuestionAnswerUpdateWithWhereUniqueWithoutQuestionSetInput[]
    updateMany?: UserQuestionAnswerUpdateManyWithWhereWithoutQuestionSetInput | UserQuestionAnswerUpdateManyWithWhereWithoutQuestionSetInput[]
    deleteMany?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
  }

  export type NoteUncheckedUpdateManyWithoutQuestionSetNestedInput = {
    create?: XOR<NoteCreateWithoutQuestionSetInput, NoteUncheckedCreateWithoutQuestionSetInput> | NoteCreateWithoutQuestionSetInput[] | NoteUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutQuestionSetInput | NoteCreateOrConnectWithoutQuestionSetInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutQuestionSetInput | NoteUpsertWithWhereUniqueWithoutQuestionSetInput[]
    createMany?: NoteCreateManyQuestionSetInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutQuestionSetInput | NoteUpdateWithWhereUniqueWithoutQuestionSetInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutQuestionSetInput | NoteUpdateManyWithWhereWithoutQuestionSetInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type QuestionUncheckedUpdateManyWithoutQuestionSetNestedInput = {
    create?: XOR<QuestionCreateWithoutQuestionSetInput, QuestionUncheckedCreateWithoutQuestionSetInput> | QuestionCreateWithoutQuestionSetInput[] | QuestionUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutQuestionSetInput | QuestionCreateOrConnectWithoutQuestionSetInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutQuestionSetInput | QuestionUpsertWithWhereUniqueWithoutQuestionSetInput[]
    createMany?: QuestionCreateManyQuestionSetInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutQuestionSetInput | QuestionUpdateWithWhereUniqueWithoutQuestionSetInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutQuestionSetInput | QuestionUpdateManyWithWhereWithoutQuestionSetInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type UserQuestionAnswerUncheckedUpdateManyWithoutQuestionSetNestedInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutQuestionSetInput, UserQuestionAnswerUncheckedCreateWithoutQuestionSetInput> | UserQuestionAnswerCreateWithoutQuestionSetInput[] | UserQuestionAnswerUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutQuestionSetInput | UserQuestionAnswerCreateOrConnectWithoutQuestionSetInput[]
    upsert?: UserQuestionAnswerUpsertWithWhereUniqueWithoutQuestionSetInput | UserQuestionAnswerUpsertWithWhereUniqueWithoutQuestionSetInput[]
    createMany?: UserQuestionAnswerCreateManyQuestionSetInputEnvelope
    set?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    disconnect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    delete?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    update?: UserQuestionAnswerUpdateWithWhereUniqueWithoutQuestionSetInput | UserQuestionAnswerUpdateWithWhereUniqueWithoutQuestionSetInput[]
    updateMany?: UserQuestionAnswerUpdateManyWithWhereWithoutQuestionSetInput | UserQuestionAnswerUpdateManyWithWhereWithoutQuestionSetInput[]
    deleteMany?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
  }

  export type QuestionCreateoptionsInput = {
    set: string[]
  }

  export type QuestionCreateconceptTagsInput = {
    set: string[]
  }

  export type QuestionCreateimageUrlsInput = {
    set: string[]
  }

  export type QuestionSetCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<QuestionSetCreateWithoutQuestionsInput, QuestionSetUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: QuestionSetCreateOrConnectWithoutQuestionsInput
    connect?: QuestionSetWhereUniqueInput
  }

  export type UserQuestionAnswerCreateNestedManyWithoutQuestionInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutQuestionInput, UserQuestionAnswerUncheckedCreateWithoutQuestionInput> | UserQuestionAnswerCreateWithoutQuestionInput[] | UserQuestionAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutQuestionInput | UserQuestionAnswerCreateOrConnectWithoutQuestionInput[]
    createMany?: UserQuestionAnswerCreateManyQuestionInputEnvelope
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
  }

  export type InsightCatalystCreateNestedManyWithoutQuestionInput = {
    create?: XOR<InsightCatalystCreateWithoutQuestionInput, InsightCatalystUncheckedCreateWithoutQuestionInput> | InsightCatalystCreateWithoutQuestionInput[] | InsightCatalystUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: InsightCatalystCreateOrConnectWithoutQuestionInput | InsightCatalystCreateOrConnectWithoutQuestionInput[]
    createMany?: InsightCatalystCreateManyQuestionInputEnvelope
    connect?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
  }

  export type UserQuestionAnswerUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutQuestionInput, UserQuestionAnswerUncheckedCreateWithoutQuestionInput> | UserQuestionAnswerCreateWithoutQuestionInput[] | UserQuestionAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutQuestionInput | UserQuestionAnswerCreateOrConnectWithoutQuestionInput[]
    createMany?: UserQuestionAnswerCreateManyQuestionInputEnvelope
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
  }

  export type InsightCatalystUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<InsightCatalystCreateWithoutQuestionInput, InsightCatalystUncheckedCreateWithoutQuestionInput> | InsightCatalystCreateWithoutQuestionInput[] | InsightCatalystUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: InsightCatalystCreateOrConnectWithoutQuestionInput | InsightCatalystCreateOrConnectWithoutQuestionInput[]
    createMany?: InsightCatalystCreateManyQuestionInputEnvelope
    connect?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
  }

  export type QuestionUpdateoptionsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type QuestionUpdateconceptTagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type QuestionUpdateimageUrlsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type QuestionSetUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<QuestionSetCreateWithoutQuestionsInput, QuestionSetUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: QuestionSetCreateOrConnectWithoutQuestionsInput
    upsert?: QuestionSetUpsertWithoutQuestionsInput
    connect?: QuestionSetWhereUniqueInput
    update?: XOR<XOR<QuestionSetUpdateToOneWithWhereWithoutQuestionsInput, QuestionSetUpdateWithoutQuestionsInput>, QuestionSetUncheckedUpdateWithoutQuestionsInput>
  }

  export type UserQuestionAnswerUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutQuestionInput, UserQuestionAnswerUncheckedCreateWithoutQuestionInput> | UserQuestionAnswerCreateWithoutQuestionInput[] | UserQuestionAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutQuestionInput | UserQuestionAnswerCreateOrConnectWithoutQuestionInput[]
    upsert?: UserQuestionAnswerUpsertWithWhereUniqueWithoutQuestionInput | UserQuestionAnswerUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: UserQuestionAnswerCreateManyQuestionInputEnvelope
    set?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    disconnect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    delete?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    update?: UserQuestionAnswerUpdateWithWhereUniqueWithoutQuestionInput | UserQuestionAnswerUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: UserQuestionAnswerUpdateManyWithWhereWithoutQuestionInput | UserQuestionAnswerUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
  }

  export type InsightCatalystUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<InsightCatalystCreateWithoutQuestionInput, InsightCatalystUncheckedCreateWithoutQuestionInput> | InsightCatalystCreateWithoutQuestionInput[] | InsightCatalystUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: InsightCatalystCreateOrConnectWithoutQuestionInput | InsightCatalystCreateOrConnectWithoutQuestionInput[]
    upsert?: InsightCatalystUpsertWithWhereUniqueWithoutQuestionInput | InsightCatalystUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: InsightCatalystCreateManyQuestionInputEnvelope
    set?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
    disconnect?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
    delete?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
    connect?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
    update?: InsightCatalystUpdateWithWhereUniqueWithoutQuestionInput | InsightCatalystUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: InsightCatalystUpdateManyWithWhereWithoutQuestionInput | InsightCatalystUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: InsightCatalystScalarWhereInput | InsightCatalystScalarWhereInput[]
  }

  export type UserQuestionAnswerUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutQuestionInput, UserQuestionAnswerUncheckedCreateWithoutQuestionInput> | UserQuestionAnswerCreateWithoutQuestionInput[] | UserQuestionAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutQuestionInput | UserQuestionAnswerCreateOrConnectWithoutQuestionInput[]
    upsert?: UserQuestionAnswerUpsertWithWhereUniqueWithoutQuestionInput | UserQuestionAnswerUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: UserQuestionAnswerCreateManyQuestionInputEnvelope
    set?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    disconnect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    delete?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    update?: UserQuestionAnswerUpdateWithWhereUniqueWithoutQuestionInput | UserQuestionAnswerUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: UserQuestionAnswerUpdateManyWithWhereWithoutQuestionInput | UserQuestionAnswerUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
  }

  export type InsightCatalystUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<InsightCatalystCreateWithoutQuestionInput, InsightCatalystUncheckedCreateWithoutQuestionInput> | InsightCatalystCreateWithoutQuestionInput[] | InsightCatalystUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: InsightCatalystCreateOrConnectWithoutQuestionInput | InsightCatalystCreateOrConnectWithoutQuestionInput[]
    upsert?: InsightCatalystUpsertWithWhereUniqueWithoutQuestionInput | InsightCatalystUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: InsightCatalystCreateManyQuestionInputEnvelope
    set?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
    disconnect?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
    delete?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
    connect?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
    update?: InsightCatalystUpdateWithWhereUniqueWithoutQuestionInput | InsightCatalystUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: InsightCatalystUpdateManyWithWhereWithoutQuestionInput | InsightCatalystUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: InsightCatalystScalarWhereInput | InsightCatalystScalarWhereInput[]
  }

  export type QuestionCreateNestedOneWithoutUserAnswersInput = {
    create?: XOR<QuestionCreateWithoutUserAnswersInput, QuestionUncheckedCreateWithoutUserAnswersInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutUserAnswersInput
    connect?: QuestionWhereUniqueInput
  }

  export type QuestionSetCreateNestedOneWithoutUserAnswersInput = {
    create?: XOR<QuestionSetCreateWithoutUserAnswersInput, QuestionSetUncheckedCreateWithoutUserAnswersInput>
    connectOrCreate?: QuestionSetCreateOrConnectWithoutUserAnswersInput
    connect?: QuestionSetWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutQuestionAnswersInput = {
    create?: XOR<UserCreateWithoutQuestionAnswersInput, UserUncheckedCreateWithoutQuestionAnswersInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionAnswersInput
    connect?: UserWhereUniqueInput
  }

  export type UserStudySessionCreateNestedOneWithoutUserQuestionAnswersInput = {
    create?: XOR<UserStudySessionCreateWithoutUserQuestionAnswersInput, UserStudySessionUncheckedCreateWithoutUserQuestionAnswersInput>
    connectOrCreate?: UserStudySessionCreateOrConnectWithoutUserQuestionAnswersInput
    connect?: UserStudySessionWhereUniqueInput
  }

  export type QuestionUpdateOneRequiredWithoutUserAnswersNestedInput = {
    create?: XOR<QuestionCreateWithoutUserAnswersInput, QuestionUncheckedCreateWithoutUserAnswersInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutUserAnswersInput
    upsert?: QuestionUpsertWithoutUserAnswersInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutUserAnswersInput, QuestionUpdateWithoutUserAnswersInput>, QuestionUncheckedUpdateWithoutUserAnswersInput>
  }

  export type QuestionSetUpdateOneWithoutUserAnswersNestedInput = {
    create?: XOR<QuestionSetCreateWithoutUserAnswersInput, QuestionSetUncheckedCreateWithoutUserAnswersInput>
    connectOrCreate?: QuestionSetCreateOrConnectWithoutUserAnswersInput
    upsert?: QuestionSetUpsertWithoutUserAnswersInput
    disconnect?: QuestionSetWhereInput | boolean
    delete?: QuestionSetWhereInput | boolean
    connect?: QuestionSetWhereUniqueInput
    update?: XOR<XOR<QuestionSetUpdateToOneWithWhereWithoutUserAnswersInput, QuestionSetUpdateWithoutUserAnswersInput>, QuestionSetUncheckedUpdateWithoutUserAnswersInput>
  }

  export type UserUpdateOneRequiredWithoutQuestionAnswersNestedInput = {
    create?: XOR<UserCreateWithoutQuestionAnswersInput, UserUncheckedCreateWithoutQuestionAnswersInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionAnswersInput
    upsert?: UserUpsertWithoutQuestionAnswersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutQuestionAnswersInput, UserUpdateWithoutQuestionAnswersInput>, UserUncheckedUpdateWithoutQuestionAnswersInput>
  }

  export type UserStudySessionUpdateOneWithoutUserQuestionAnswersNestedInput = {
    create?: XOR<UserStudySessionCreateWithoutUserQuestionAnswersInput, UserStudySessionUncheckedCreateWithoutUserQuestionAnswersInput>
    connectOrCreate?: UserStudySessionCreateOrConnectWithoutUserQuestionAnswersInput
    upsert?: UserStudySessionUpsertWithoutUserQuestionAnswersInput
    disconnect?: UserStudySessionWhereInput | boolean
    delete?: UserStudySessionWhereInput | boolean
    connect?: UserStudySessionWhereUniqueInput
    update?: XOR<XOR<UserStudySessionUpdateToOneWithWhereWithoutUserQuestionAnswersInput, UserStudySessionUpdateWithoutUserQuestionAnswersInput>, UserStudySessionUncheckedUpdateWithoutUserQuestionAnswersInput>
  }

  export type UserQuestionAnswerCreateNestedManyWithoutStudySessionInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutStudySessionInput, UserQuestionAnswerUncheckedCreateWithoutStudySessionInput> | UserQuestionAnswerCreateWithoutStudySessionInput[] | UserQuestionAnswerUncheckedCreateWithoutStudySessionInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutStudySessionInput | UserQuestionAnswerCreateOrConnectWithoutStudySessionInput[]
    createMany?: UserQuestionAnswerCreateManyStudySessionInputEnvelope
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutStudySessionsInput = {
    create?: XOR<UserCreateWithoutStudySessionsInput, UserUncheckedCreateWithoutStudySessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudySessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserQuestionAnswerUncheckedCreateNestedManyWithoutStudySessionInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutStudySessionInput, UserQuestionAnswerUncheckedCreateWithoutStudySessionInput> | UserQuestionAnswerCreateWithoutStudySessionInput[] | UserQuestionAnswerUncheckedCreateWithoutStudySessionInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutStudySessionInput | UserQuestionAnswerCreateOrConnectWithoutStudySessionInput[]
    createMany?: UserQuestionAnswerCreateManyStudySessionInputEnvelope
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
  }

  export type UserQuestionAnswerUpdateManyWithoutStudySessionNestedInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutStudySessionInput, UserQuestionAnswerUncheckedCreateWithoutStudySessionInput> | UserQuestionAnswerCreateWithoutStudySessionInput[] | UserQuestionAnswerUncheckedCreateWithoutStudySessionInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutStudySessionInput | UserQuestionAnswerCreateOrConnectWithoutStudySessionInput[]
    upsert?: UserQuestionAnswerUpsertWithWhereUniqueWithoutStudySessionInput | UserQuestionAnswerUpsertWithWhereUniqueWithoutStudySessionInput[]
    createMany?: UserQuestionAnswerCreateManyStudySessionInputEnvelope
    set?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    disconnect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    delete?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    update?: UserQuestionAnswerUpdateWithWhereUniqueWithoutStudySessionInput | UserQuestionAnswerUpdateWithWhereUniqueWithoutStudySessionInput[]
    updateMany?: UserQuestionAnswerUpdateManyWithWhereWithoutStudySessionInput | UserQuestionAnswerUpdateManyWithWhereWithoutStudySessionInput[]
    deleteMany?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutStudySessionsNestedInput = {
    create?: XOR<UserCreateWithoutStudySessionsInput, UserUncheckedCreateWithoutStudySessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudySessionsInput
    upsert?: UserUpsertWithoutStudySessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStudySessionsInput, UserUpdateWithoutStudySessionsInput>, UserUncheckedUpdateWithoutStudySessionsInput>
  }

  export type UserQuestionAnswerUncheckedUpdateManyWithoutStudySessionNestedInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutStudySessionInput, UserQuestionAnswerUncheckedCreateWithoutStudySessionInput> | UserQuestionAnswerCreateWithoutStudySessionInput[] | UserQuestionAnswerUncheckedCreateWithoutStudySessionInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutStudySessionInput | UserQuestionAnswerCreateOrConnectWithoutStudySessionInput[]
    upsert?: UserQuestionAnswerUpsertWithWhereUniqueWithoutStudySessionInput | UserQuestionAnswerUpsertWithWhereUniqueWithoutStudySessionInput[]
    createMany?: UserQuestionAnswerCreateManyStudySessionInputEnvelope
    set?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    disconnect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    delete?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    update?: UserQuestionAnswerUpdateWithWhereUniqueWithoutStudySessionInput | UserQuestionAnswerUpdateWithWhereUniqueWithoutStudySessionInput[]
    updateMany?: UserQuestionAnswerUpdateManyWithWhereWithoutStudySessionInput | UserQuestionAnswerUpdateManyWithWhereWithoutStudySessionInput[]
    deleteMany?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutNotesInput = {
    create?: XOR<UserCreateWithoutNotesInput, UserUncheckedCreateWithoutNotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotesInput
    connect?: UserWhereUniqueInput
  }

  export type FolderCreateNestedOneWithoutNotesInput = {
    create?: XOR<FolderCreateWithoutNotesInput, FolderUncheckedCreateWithoutNotesInput>
    connectOrCreate?: FolderCreateOrConnectWithoutNotesInput
    connect?: FolderWhereUniqueInput
  }

  export type QuestionSetCreateNestedOneWithoutNotesInput = {
    create?: XOR<QuestionSetCreateWithoutNotesInput, QuestionSetUncheckedCreateWithoutNotesInput>
    connectOrCreate?: QuestionSetCreateOrConnectWithoutNotesInput
    connect?: QuestionSetWhereUniqueInput
  }

  export type InsightCatalystCreateNestedManyWithoutNoteInput = {
    create?: XOR<InsightCatalystCreateWithoutNoteInput, InsightCatalystUncheckedCreateWithoutNoteInput> | InsightCatalystCreateWithoutNoteInput[] | InsightCatalystUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: InsightCatalystCreateOrConnectWithoutNoteInput | InsightCatalystCreateOrConnectWithoutNoteInput[]
    createMany?: InsightCatalystCreateManyNoteInputEnvelope
    connect?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
  }

  export type InsightCatalystUncheckedCreateNestedManyWithoutNoteInput = {
    create?: XOR<InsightCatalystCreateWithoutNoteInput, InsightCatalystUncheckedCreateWithoutNoteInput> | InsightCatalystCreateWithoutNoteInput[] | InsightCatalystUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: InsightCatalystCreateOrConnectWithoutNoteInput | InsightCatalystCreateOrConnectWithoutNoteInput[]
    createMany?: InsightCatalystCreateManyNoteInputEnvelope
    connect?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutNotesNestedInput = {
    create?: XOR<UserCreateWithoutNotesInput, UserUncheckedCreateWithoutNotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotesInput
    upsert?: UserUpsertWithoutNotesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotesInput, UserUpdateWithoutNotesInput>, UserUncheckedUpdateWithoutNotesInput>
  }

  export type FolderUpdateOneWithoutNotesNestedInput = {
    create?: XOR<FolderCreateWithoutNotesInput, FolderUncheckedCreateWithoutNotesInput>
    connectOrCreate?: FolderCreateOrConnectWithoutNotesInput
    upsert?: FolderUpsertWithoutNotesInput
    disconnect?: FolderWhereInput | boolean
    delete?: FolderWhereInput | boolean
    connect?: FolderWhereUniqueInput
    update?: XOR<XOR<FolderUpdateToOneWithWhereWithoutNotesInput, FolderUpdateWithoutNotesInput>, FolderUncheckedUpdateWithoutNotesInput>
  }

  export type QuestionSetUpdateOneWithoutNotesNestedInput = {
    create?: XOR<QuestionSetCreateWithoutNotesInput, QuestionSetUncheckedCreateWithoutNotesInput>
    connectOrCreate?: QuestionSetCreateOrConnectWithoutNotesInput
    upsert?: QuestionSetUpsertWithoutNotesInput
    disconnect?: QuestionSetWhereInput | boolean
    delete?: QuestionSetWhereInput | boolean
    connect?: QuestionSetWhereUniqueInput
    update?: XOR<XOR<QuestionSetUpdateToOneWithWhereWithoutNotesInput, QuestionSetUpdateWithoutNotesInput>, QuestionSetUncheckedUpdateWithoutNotesInput>
  }

  export type InsightCatalystUpdateManyWithoutNoteNestedInput = {
    create?: XOR<InsightCatalystCreateWithoutNoteInput, InsightCatalystUncheckedCreateWithoutNoteInput> | InsightCatalystCreateWithoutNoteInput[] | InsightCatalystUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: InsightCatalystCreateOrConnectWithoutNoteInput | InsightCatalystCreateOrConnectWithoutNoteInput[]
    upsert?: InsightCatalystUpsertWithWhereUniqueWithoutNoteInput | InsightCatalystUpsertWithWhereUniqueWithoutNoteInput[]
    createMany?: InsightCatalystCreateManyNoteInputEnvelope
    set?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
    disconnect?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
    delete?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
    connect?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
    update?: InsightCatalystUpdateWithWhereUniqueWithoutNoteInput | InsightCatalystUpdateWithWhereUniqueWithoutNoteInput[]
    updateMany?: InsightCatalystUpdateManyWithWhereWithoutNoteInput | InsightCatalystUpdateManyWithWhereWithoutNoteInput[]
    deleteMany?: InsightCatalystScalarWhereInput | InsightCatalystScalarWhereInput[]
  }

  export type InsightCatalystUncheckedUpdateManyWithoutNoteNestedInput = {
    create?: XOR<InsightCatalystCreateWithoutNoteInput, InsightCatalystUncheckedCreateWithoutNoteInput> | InsightCatalystCreateWithoutNoteInput[] | InsightCatalystUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: InsightCatalystCreateOrConnectWithoutNoteInput | InsightCatalystCreateOrConnectWithoutNoteInput[]
    upsert?: InsightCatalystUpsertWithWhereUniqueWithoutNoteInput | InsightCatalystUpsertWithWhereUniqueWithoutNoteInput[]
    createMany?: InsightCatalystCreateManyNoteInputEnvelope
    set?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
    disconnect?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
    delete?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
    connect?: InsightCatalystWhereUniqueInput | InsightCatalystWhereUniqueInput[]
    update?: InsightCatalystUpdateWithWhereUniqueWithoutNoteInput | InsightCatalystUpdateWithWhereUniqueWithoutNoteInput[]
    updateMany?: InsightCatalystUpdateManyWithWhereWithoutNoteInput | InsightCatalystUpdateManyWithWhereWithoutNoteInput[]
    deleteMany?: InsightCatalystScalarWhereInput | InsightCatalystScalarWhereInput[]
  }

  export type InsightCatalystCreateimageUrlsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutInsightCatalystsInput = {
    create?: XOR<UserCreateWithoutInsightCatalystsInput, UserUncheckedCreateWithoutInsightCatalystsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInsightCatalystsInput
    connect?: UserWhereUniqueInput
  }

  export type NoteCreateNestedOneWithoutInsightCatalystsInput = {
    create?: XOR<NoteCreateWithoutInsightCatalystsInput, NoteUncheckedCreateWithoutInsightCatalystsInput>
    connectOrCreate?: NoteCreateOrConnectWithoutInsightCatalystsInput
    connect?: NoteWhereUniqueInput
  }

  export type QuestionCreateNestedOneWithoutInsightCatalystsInput = {
    create?: XOR<QuestionCreateWithoutInsightCatalystsInput, QuestionUncheckedCreateWithoutInsightCatalystsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutInsightCatalystsInput
    connect?: QuestionWhereUniqueInput
  }

  export type InsightCatalystUpdateimageUrlsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutInsightCatalystsNestedInput = {
    create?: XOR<UserCreateWithoutInsightCatalystsInput, UserUncheckedCreateWithoutInsightCatalystsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInsightCatalystsInput
    upsert?: UserUpsertWithoutInsightCatalystsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInsightCatalystsInput, UserUpdateWithoutInsightCatalystsInput>, UserUncheckedUpdateWithoutInsightCatalystsInput>
  }

  export type NoteUpdateOneWithoutInsightCatalystsNestedInput = {
    create?: XOR<NoteCreateWithoutInsightCatalystsInput, NoteUncheckedCreateWithoutInsightCatalystsInput>
    connectOrCreate?: NoteCreateOrConnectWithoutInsightCatalystsInput
    upsert?: NoteUpsertWithoutInsightCatalystsInput
    disconnect?: NoteWhereInput | boolean
    delete?: NoteWhereInput | boolean
    connect?: NoteWhereUniqueInput
    update?: XOR<XOR<NoteUpdateToOneWithWhereWithoutInsightCatalystsInput, NoteUpdateWithoutInsightCatalystsInput>, NoteUncheckedUpdateWithoutInsightCatalystsInput>
  }

  export type QuestionUpdateOneWithoutInsightCatalystsNestedInput = {
    create?: XOR<QuestionCreateWithoutInsightCatalystsInput, QuestionUncheckedCreateWithoutInsightCatalystsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutInsightCatalystsInput
    upsert?: QuestionUpsertWithoutInsightCatalystsInput
    disconnect?: QuestionWhereInput | boolean
    delete?: QuestionWhereInput | boolean
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutInsightCatalystsInput, QuestionUpdateWithoutInsightCatalystsInput>, QuestionUncheckedUpdateWithoutInsightCatalystsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type FolderCreateWithoutUserInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    currentMasteryScore?: number | null
    masteryHistory?: FolderCreatemasteryHistoryInput | InputJsonValue[]
    imageUrls?: FolderCreateimageUrlsInput | string[]
    isPinned?: boolean
    questionSets?: QuestionSetCreateNestedManyWithoutFolderInput
    notes?: NoteCreateNestedManyWithoutFolderInput
    parent?: FolderCreateNestedOneWithoutChildrenInput
    children?: FolderCreateNestedManyWithoutParentInput
  }

  export type FolderUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    currentMasteryScore?: number | null
    masteryHistory?: FolderCreatemasteryHistoryInput | InputJsonValue[]
    parentId?: number | null
    imageUrls?: FolderCreateimageUrlsInput | string[]
    isPinned?: boolean
    questionSets?: QuestionSetUncheckedCreateNestedManyWithoutFolderInput
    notes?: NoteUncheckedCreateNestedManyWithoutFolderInput
    children?: FolderUncheckedCreateNestedManyWithoutParentInput
  }

  export type FolderCreateOrConnectWithoutUserInput = {
    where: FolderWhereUniqueInput
    create: XOR<FolderCreateWithoutUserInput, FolderUncheckedCreateWithoutUserInput>
  }

  export type FolderCreateManyUserInputEnvelope = {
    data: FolderCreateManyUserInput | FolderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserQuestionAnswerCreateWithoutUserInput = {
    isCorrect: boolean
    confidence?: number | null
    timeSpent: number
    answeredAt?: Date | string
    scoreAchieved: number
    createdAt?: Date | string
    feedbackFromAI?: string | null
    updatedAt?: Date | string
    userAnswerText?: string | null
    uueFocusTested?: string | null
    question: QuestionCreateNestedOneWithoutUserAnswersInput
    questionSet?: QuestionSetCreateNestedOneWithoutUserAnswersInput
    studySession?: UserStudySessionCreateNestedOneWithoutUserQuestionAnswersInput
  }

  export type UserQuestionAnswerUncheckedCreateWithoutUserInput = {
    id?: number
    questionId: number
    isCorrect: boolean
    confidence?: number | null
    timeSpent: number
    answeredAt?: Date | string
    scoreAchieved: number
    createdAt?: Date | string
    feedbackFromAI?: string | null
    questionSetId?: number | null
    updatedAt?: Date | string
    userAnswerText?: string | null
    uueFocusTested?: string | null
    userStudySessionId?: number | null
  }

  export type UserQuestionAnswerCreateOrConnectWithoutUserInput = {
    where: UserQuestionAnswerWhereUniqueInput
    create: XOR<UserQuestionAnswerCreateWithoutUserInput, UserQuestionAnswerUncheckedCreateWithoutUserInput>
  }

  export type UserQuestionAnswerCreateManyUserInputEnvelope = {
    data: UserQuestionAnswerCreateManyUserInput | UserQuestionAnswerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserStudySessionCreateWithoutUserInput = {
    sessionStartedAt?: Date | string | null
    sessionEndedAt?: Date | string
    timeSpentSeconds: number
    answeredQuestionsCount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userQuestionAnswers?: UserQuestionAnswerCreateNestedManyWithoutStudySessionInput
  }

  export type UserStudySessionUncheckedCreateWithoutUserInput = {
    id?: number
    sessionStartedAt?: Date | string | null
    sessionEndedAt?: Date | string
    timeSpentSeconds: number
    answeredQuestionsCount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userQuestionAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutStudySessionInput
  }

  export type UserStudySessionCreateOrConnectWithoutUserInput = {
    where: UserStudySessionWhereUniqueInput
    create: XOR<UserStudySessionCreateWithoutUserInput, UserStudySessionUncheckedCreateWithoutUserInput>
  }

  export type UserStudySessionCreateManyUserInputEnvelope = {
    data: UserStudySessionCreateManyUserInput | UserStudySessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NoteCreateWithoutUserInput = {
    title: string
    content: JsonNullValueInput | InputJsonValue
    plainText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    folder?: FolderCreateNestedOneWithoutNotesInput
    questionSet?: QuestionSetCreateNestedOneWithoutNotesInput
    insightCatalysts?: InsightCatalystCreateNestedManyWithoutNoteInput
  }

  export type NoteUncheckedCreateWithoutUserInput = {
    id?: number
    title: string
    content: JsonNullValueInput | InputJsonValue
    plainText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    folderId?: number | null
    questionSetId?: number | null
    insightCatalysts?: InsightCatalystUncheckedCreateNestedManyWithoutNoteInput
  }

  export type NoteCreateOrConnectWithoutUserInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutUserInput, NoteUncheckedCreateWithoutUserInput>
  }

  export type NoteCreateManyUserInputEnvelope = {
    data: NoteCreateManyUserInput | NoteCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type InsightCatalystCreateWithoutUserInput = {
    type: string
    text: string
    explanation?: string | null
    imageUrls?: InsightCatalystCreateimageUrlsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    note?: NoteCreateNestedOneWithoutInsightCatalystsInput
    question?: QuestionCreateNestedOneWithoutInsightCatalystsInput
  }

  export type InsightCatalystUncheckedCreateWithoutUserInput = {
    id?: number
    type: string
    text: string
    explanation?: string | null
    imageUrls?: InsightCatalystCreateimageUrlsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    noteId?: number | null
    questionId?: number | null
  }

  export type InsightCatalystCreateOrConnectWithoutUserInput = {
    where: InsightCatalystWhereUniqueInput
    create: XOR<InsightCatalystCreateWithoutUserInput, InsightCatalystUncheckedCreateWithoutUserInput>
  }

  export type InsightCatalystCreateManyUserInputEnvelope = {
    data: InsightCatalystCreateManyUserInput | InsightCatalystCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FolderUpsertWithWhereUniqueWithoutUserInput = {
    where: FolderWhereUniqueInput
    update: XOR<FolderUpdateWithoutUserInput, FolderUncheckedUpdateWithoutUserInput>
    create: XOR<FolderCreateWithoutUserInput, FolderUncheckedCreateWithoutUserInput>
  }

  export type FolderUpdateWithWhereUniqueWithoutUserInput = {
    where: FolderWhereUniqueInput
    data: XOR<FolderUpdateWithoutUserInput, FolderUncheckedUpdateWithoutUserInput>
  }

  export type FolderUpdateManyWithWhereWithoutUserInput = {
    where: FolderScalarWhereInput
    data: XOR<FolderUpdateManyMutationInput, FolderUncheckedUpdateManyWithoutUserInput>
  }

  export type FolderScalarWhereInput = {
    AND?: FolderScalarWhereInput | FolderScalarWhereInput[]
    OR?: FolderScalarWhereInput[]
    NOT?: FolderScalarWhereInput | FolderScalarWhereInput[]
    id?: IntFilter<"Folder"> | number
    name?: StringFilter<"Folder"> | string
    description?: StringNullableFilter<"Folder"> | string | null
    userId?: IntFilter<"Folder"> | number
    createdAt?: DateTimeFilter<"Folder"> | Date | string
    updatedAt?: DateTimeFilter<"Folder"> | Date | string
    currentMasteryScore?: FloatNullableFilter<"Folder"> | number | null
    masteryHistory?: JsonNullableListFilter<"Folder">
    parentId?: IntNullableFilter<"Folder"> | number | null
    imageUrls?: StringNullableListFilter<"Folder">
    isPinned?: BoolFilter<"Folder"> | boolean
  }

  export type UserQuestionAnswerUpsertWithWhereUniqueWithoutUserInput = {
    where: UserQuestionAnswerWhereUniqueInput
    update: XOR<UserQuestionAnswerUpdateWithoutUserInput, UserQuestionAnswerUncheckedUpdateWithoutUserInput>
    create: XOR<UserQuestionAnswerCreateWithoutUserInput, UserQuestionAnswerUncheckedCreateWithoutUserInput>
  }

  export type UserQuestionAnswerUpdateWithWhereUniqueWithoutUserInput = {
    where: UserQuestionAnswerWhereUniqueInput
    data: XOR<UserQuestionAnswerUpdateWithoutUserInput, UserQuestionAnswerUncheckedUpdateWithoutUserInput>
  }

  export type UserQuestionAnswerUpdateManyWithWhereWithoutUserInput = {
    where: UserQuestionAnswerScalarWhereInput
    data: XOR<UserQuestionAnswerUpdateManyMutationInput, UserQuestionAnswerUncheckedUpdateManyWithoutUserInput>
  }

  export type UserQuestionAnswerScalarWhereInput = {
    AND?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
    OR?: UserQuestionAnswerScalarWhereInput[]
    NOT?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
    id?: IntFilter<"UserQuestionAnswer"> | number
    userId?: IntFilter<"UserQuestionAnswer"> | number
    questionId?: IntFilter<"UserQuestionAnswer"> | number
    isCorrect?: BoolFilter<"UserQuestionAnswer"> | boolean
    confidence?: IntNullableFilter<"UserQuestionAnswer"> | number | null
    timeSpent?: IntFilter<"UserQuestionAnswer"> | number
    answeredAt?: DateTimeFilter<"UserQuestionAnswer"> | Date | string
    scoreAchieved?: FloatFilter<"UserQuestionAnswer"> | number
    createdAt?: DateTimeFilter<"UserQuestionAnswer"> | Date | string
    feedbackFromAI?: StringNullableFilter<"UserQuestionAnswer"> | string | null
    questionSetId?: IntNullableFilter<"UserQuestionAnswer"> | number | null
    updatedAt?: DateTimeFilter<"UserQuestionAnswer"> | Date | string
    userAnswerText?: StringNullableFilter<"UserQuestionAnswer"> | string | null
    uueFocusTested?: StringNullableFilter<"UserQuestionAnswer"> | string | null
    userStudySessionId?: IntNullableFilter<"UserQuestionAnswer"> | number | null
  }

  export type UserStudySessionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserStudySessionWhereUniqueInput
    update: XOR<UserStudySessionUpdateWithoutUserInput, UserStudySessionUncheckedUpdateWithoutUserInput>
    create: XOR<UserStudySessionCreateWithoutUserInput, UserStudySessionUncheckedCreateWithoutUserInput>
  }

  export type UserStudySessionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserStudySessionWhereUniqueInput
    data: XOR<UserStudySessionUpdateWithoutUserInput, UserStudySessionUncheckedUpdateWithoutUserInput>
  }

  export type UserStudySessionUpdateManyWithWhereWithoutUserInput = {
    where: UserStudySessionScalarWhereInput
    data: XOR<UserStudySessionUpdateManyMutationInput, UserStudySessionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserStudySessionScalarWhereInput = {
    AND?: UserStudySessionScalarWhereInput | UserStudySessionScalarWhereInput[]
    OR?: UserStudySessionScalarWhereInput[]
    NOT?: UserStudySessionScalarWhereInput | UserStudySessionScalarWhereInput[]
    id?: IntFilter<"UserStudySession"> | number
    userId?: IntFilter<"UserStudySession"> | number
    sessionStartedAt?: DateTimeNullableFilter<"UserStudySession"> | Date | string | null
    sessionEndedAt?: DateTimeFilter<"UserStudySession"> | Date | string
    timeSpentSeconds?: IntFilter<"UserStudySession"> | number
    answeredQuestionsCount?: IntFilter<"UserStudySession"> | number
    createdAt?: DateTimeFilter<"UserStudySession"> | Date | string
    updatedAt?: DateTimeFilter<"UserStudySession"> | Date | string
  }

  export type NoteUpsertWithWhereUniqueWithoutUserInput = {
    where: NoteWhereUniqueInput
    update: XOR<NoteUpdateWithoutUserInput, NoteUncheckedUpdateWithoutUserInput>
    create: XOR<NoteCreateWithoutUserInput, NoteUncheckedCreateWithoutUserInput>
  }

  export type NoteUpdateWithWhereUniqueWithoutUserInput = {
    where: NoteWhereUniqueInput
    data: XOR<NoteUpdateWithoutUserInput, NoteUncheckedUpdateWithoutUserInput>
  }

  export type NoteUpdateManyWithWhereWithoutUserInput = {
    where: NoteScalarWhereInput
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyWithoutUserInput>
  }

  export type NoteScalarWhereInput = {
    AND?: NoteScalarWhereInput | NoteScalarWhereInput[]
    OR?: NoteScalarWhereInput[]
    NOT?: NoteScalarWhereInput | NoteScalarWhereInput[]
    id?: IntFilter<"Note"> | number
    title?: StringFilter<"Note"> | string
    content?: JsonFilter<"Note">
    plainText?: StringNullableFilter<"Note"> | string | null
    createdAt?: DateTimeFilter<"Note"> | Date | string
    updatedAt?: DateTimeFilter<"Note"> | Date | string
    userId?: IntFilter<"Note"> | number
    folderId?: IntNullableFilter<"Note"> | number | null
    questionSetId?: IntNullableFilter<"Note"> | number | null
  }

  export type InsightCatalystUpsertWithWhereUniqueWithoutUserInput = {
    where: InsightCatalystWhereUniqueInput
    update: XOR<InsightCatalystUpdateWithoutUserInput, InsightCatalystUncheckedUpdateWithoutUserInput>
    create: XOR<InsightCatalystCreateWithoutUserInput, InsightCatalystUncheckedCreateWithoutUserInput>
  }

  export type InsightCatalystUpdateWithWhereUniqueWithoutUserInput = {
    where: InsightCatalystWhereUniqueInput
    data: XOR<InsightCatalystUpdateWithoutUserInput, InsightCatalystUncheckedUpdateWithoutUserInput>
  }

  export type InsightCatalystUpdateManyWithWhereWithoutUserInput = {
    where: InsightCatalystScalarWhereInput
    data: XOR<InsightCatalystUpdateManyMutationInput, InsightCatalystUncheckedUpdateManyWithoutUserInput>
  }

  export type InsightCatalystScalarWhereInput = {
    AND?: InsightCatalystScalarWhereInput | InsightCatalystScalarWhereInput[]
    OR?: InsightCatalystScalarWhereInput[]
    NOT?: InsightCatalystScalarWhereInput | InsightCatalystScalarWhereInput[]
    id?: IntFilter<"InsightCatalyst"> | number
    type?: StringFilter<"InsightCatalyst"> | string
    text?: StringFilter<"InsightCatalyst"> | string
    explanation?: StringNullableFilter<"InsightCatalyst"> | string | null
    imageUrls?: StringNullableListFilter<"InsightCatalyst">
    createdAt?: DateTimeFilter<"InsightCatalyst"> | Date | string
    updatedAt?: DateTimeFilter<"InsightCatalyst"> | Date | string
    userId?: IntFilter<"InsightCatalyst"> | number
    noteId?: IntNullableFilter<"InsightCatalyst"> | number | null
    questionId?: IntNullableFilter<"InsightCatalyst"> | number | null
  }

  export type UserCreateWithoutFoldersInput = {
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dailyStudyTimeMinutes?: number
    questionAnswers?: UserQuestionAnswerCreateNestedManyWithoutUserInput
    studySessions?: UserStudySessionCreateNestedManyWithoutUserInput
    notes?: NoteCreateNestedManyWithoutUserInput
    insightCatalysts?: InsightCatalystCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFoldersInput = {
    id?: number
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dailyStudyTimeMinutes?: number
    questionAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutUserInput
    studySessions?: UserStudySessionUncheckedCreateNestedManyWithoutUserInput
    notes?: NoteUncheckedCreateNestedManyWithoutUserInput
    insightCatalysts?: InsightCatalystUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFoldersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFoldersInput, UserUncheckedCreateWithoutFoldersInput>
  }

  export type QuestionSetCreateWithoutFolderInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    currentIntervalDays?: number | null
    exploreScore?: number
    lastReviewedAt?: Date | string | null
    nextReviewAt?: Date | string | null
    reviewCount?: number
    understandScore?: number
    useScore?: number
    currentForgottenPercentage?: number | null
    currentTotalMasteryScore?: number
    currentUUESetStage?: string
    forgettingCurveParams?: NullableJsonNullValueInput | InputJsonValue
    masteryHistory?: QuestionSetCreatemasteryHistoryInput | InputJsonValue[]
    source?: string | null
    instructions?: string | null
    isTracked?: boolean
    imageUrls?: QuestionSetCreateimageUrlsInput | string[]
    isPinned?: boolean
    notes?: NoteCreateNestedManyWithoutQuestionSetInput
    questions?: QuestionCreateNestedManyWithoutQuestionSetInput
    userAnswers?: UserQuestionAnswerCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetUncheckedCreateWithoutFolderInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    currentIntervalDays?: number | null
    exploreScore?: number
    lastReviewedAt?: Date | string | null
    nextReviewAt?: Date | string | null
    reviewCount?: number
    understandScore?: number
    useScore?: number
    currentForgottenPercentage?: number | null
    currentTotalMasteryScore?: number
    currentUUESetStage?: string
    forgettingCurveParams?: NullableJsonNullValueInput | InputJsonValue
    masteryHistory?: QuestionSetCreatemasteryHistoryInput | InputJsonValue[]
    source?: string | null
    instructions?: string | null
    isTracked?: boolean
    imageUrls?: QuestionSetCreateimageUrlsInput | string[]
    isPinned?: boolean
    notes?: NoteUncheckedCreateNestedManyWithoutQuestionSetInput
    questions?: QuestionUncheckedCreateNestedManyWithoutQuestionSetInput
    userAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetCreateOrConnectWithoutFolderInput = {
    where: QuestionSetWhereUniqueInput
    create: XOR<QuestionSetCreateWithoutFolderInput, QuestionSetUncheckedCreateWithoutFolderInput>
  }

  export type QuestionSetCreateManyFolderInputEnvelope = {
    data: QuestionSetCreateManyFolderInput | QuestionSetCreateManyFolderInput[]
    skipDuplicates?: boolean
  }

  export type NoteCreateWithoutFolderInput = {
    title: string
    content: JsonNullValueInput | InputJsonValue
    plainText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutNotesInput
    questionSet?: QuestionSetCreateNestedOneWithoutNotesInput
    insightCatalysts?: InsightCatalystCreateNestedManyWithoutNoteInput
  }

  export type NoteUncheckedCreateWithoutFolderInput = {
    id?: number
    title: string
    content: JsonNullValueInput | InputJsonValue
    plainText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    questionSetId?: number | null
    insightCatalysts?: InsightCatalystUncheckedCreateNestedManyWithoutNoteInput
  }

  export type NoteCreateOrConnectWithoutFolderInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutFolderInput, NoteUncheckedCreateWithoutFolderInput>
  }

  export type NoteCreateManyFolderInputEnvelope = {
    data: NoteCreateManyFolderInput | NoteCreateManyFolderInput[]
    skipDuplicates?: boolean
  }

  export type FolderCreateWithoutChildrenInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    currentMasteryScore?: number | null
    masteryHistory?: FolderCreatemasteryHistoryInput | InputJsonValue[]
    imageUrls?: FolderCreateimageUrlsInput | string[]
    isPinned?: boolean
    user: UserCreateNestedOneWithoutFoldersInput
    questionSets?: QuestionSetCreateNestedManyWithoutFolderInput
    notes?: NoteCreateNestedManyWithoutFolderInput
    parent?: FolderCreateNestedOneWithoutChildrenInput
  }

  export type FolderUncheckedCreateWithoutChildrenInput = {
    id?: number
    name: string
    description?: string | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    currentMasteryScore?: number | null
    masteryHistory?: FolderCreatemasteryHistoryInput | InputJsonValue[]
    parentId?: number | null
    imageUrls?: FolderCreateimageUrlsInput | string[]
    isPinned?: boolean
    questionSets?: QuestionSetUncheckedCreateNestedManyWithoutFolderInput
    notes?: NoteUncheckedCreateNestedManyWithoutFolderInput
  }

  export type FolderCreateOrConnectWithoutChildrenInput = {
    where: FolderWhereUniqueInput
    create: XOR<FolderCreateWithoutChildrenInput, FolderUncheckedCreateWithoutChildrenInput>
  }

  export type FolderCreateWithoutParentInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    currentMasteryScore?: number | null
    masteryHistory?: FolderCreatemasteryHistoryInput | InputJsonValue[]
    imageUrls?: FolderCreateimageUrlsInput | string[]
    isPinned?: boolean
    user: UserCreateNestedOneWithoutFoldersInput
    questionSets?: QuestionSetCreateNestedManyWithoutFolderInput
    notes?: NoteCreateNestedManyWithoutFolderInput
    children?: FolderCreateNestedManyWithoutParentInput
  }

  export type FolderUncheckedCreateWithoutParentInput = {
    id?: number
    name: string
    description?: string | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    currentMasteryScore?: number | null
    masteryHistory?: FolderCreatemasteryHistoryInput | InputJsonValue[]
    imageUrls?: FolderCreateimageUrlsInput | string[]
    isPinned?: boolean
    questionSets?: QuestionSetUncheckedCreateNestedManyWithoutFolderInput
    notes?: NoteUncheckedCreateNestedManyWithoutFolderInput
    children?: FolderUncheckedCreateNestedManyWithoutParentInput
  }

  export type FolderCreateOrConnectWithoutParentInput = {
    where: FolderWhereUniqueInput
    create: XOR<FolderCreateWithoutParentInput, FolderUncheckedCreateWithoutParentInput>
  }

  export type FolderCreateManyParentInputEnvelope = {
    data: FolderCreateManyParentInput | FolderCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutFoldersInput = {
    update: XOR<UserUpdateWithoutFoldersInput, UserUncheckedUpdateWithoutFoldersInput>
    create: XOR<UserCreateWithoutFoldersInput, UserUncheckedCreateWithoutFoldersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFoldersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFoldersInput, UserUncheckedUpdateWithoutFoldersInput>
  }

  export type UserUpdateWithoutFoldersInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyStudyTimeMinutes?: IntFieldUpdateOperationsInput | number
    questionAnswers?: UserQuestionAnswerUpdateManyWithoutUserNestedInput
    studySessions?: UserStudySessionUpdateManyWithoutUserNestedInput
    notes?: NoteUpdateManyWithoutUserNestedInput
    insightCatalysts?: InsightCatalystUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFoldersInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyStudyTimeMinutes?: IntFieldUpdateOperationsInput | number
    questionAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutUserNestedInput
    studySessions?: UserStudySessionUncheckedUpdateManyWithoutUserNestedInput
    notes?: NoteUncheckedUpdateManyWithoutUserNestedInput
    insightCatalysts?: InsightCatalystUncheckedUpdateManyWithoutUserNestedInput
  }

  export type QuestionSetUpsertWithWhereUniqueWithoutFolderInput = {
    where: QuestionSetWhereUniqueInput
    update: XOR<QuestionSetUpdateWithoutFolderInput, QuestionSetUncheckedUpdateWithoutFolderInput>
    create: XOR<QuestionSetCreateWithoutFolderInput, QuestionSetUncheckedCreateWithoutFolderInput>
  }

  export type QuestionSetUpdateWithWhereUniqueWithoutFolderInput = {
    where: QuestionSetWhereUniqueInput
    data: XOR<QuestionSetUpdateWithoutFolderInput, QuestionSetUncheckedUpdateWithoutFolderInput>
  }

  export type QuestionSetUpdateManyWithWhereWithoutFolderInput = {
    where: QuestionSetScalarWhereInput
    data: XOR<QuestionSetUpdateManyMutationInput, QuestionSetUncheckedUpdateManyWithoutFolderInput>
  }

  export type QuestionSetScalarWhereInput = {
    AND?: QuestionSetScalarWhereInput | QuestionSetScalarWhereInput[]
    OR?: QuestionSetScalarWhereInput[]
    NOT?: QuestionSetScalarWhereInput | QuestionSetScalarWhereInput[]
    id?: IntFilter<"QuestionSet"> | number
    name?: StringFilter<"QuestionSet"> | string
    folderId?: IntFilter<"QuestionSet"> | number
    createdAt?: DateTimeFilter<"QuestionSet"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionSet"> | Date | string
    currentIntervalDays?: FloatNullableFilter<"QuestionSet"> | number | null
    exploreScore?: FloatFilter<"QuestionSet"> | number
    lastReviewedAt?: DateTimeNullableFilter<"QuestionSet"> | Date | string | null
    nextReviewAt?: DateTimeNullableFilter<"QuestionSet"> | Date | string | null
    reviewCount?: IntFilter<"QuestionSet"> | number
    understandScore?: FloatFilter<"QuestionSet"> | number
    useScore?: FloatFilter<"QuestionSet"> | number
    currentForgottenPercentage?: FloatNullableFilter<"QuestionSet"> | number | null
    currentTotalMasteryScore?: FloatFilter<"QuestionSet"> | number
    currentUUESetStage?: StringFilter<"QuestionSet"> | string
    forgettingCurveParams?: JsonNullableFilter<"QuestionSet">
    masteryHistory?: JsonNullableListFilter<"QuestionSet">
    source?: StringNullableFilter<"QuestionSet"> | string | null
    instructions?: StringNullableFilter<"QuestionSet"> | string | null
    isTracked?: BoolFilter<"QuestionSet"> | boolean
    imageUrls?: StringNullableListFilter<"QuestionSet">
    isPinned?: BoolFilter<"QuestionSet"> | boolean
  }

  export type NoteUpsertWithWhereUniqueWithoutFolderInput = {
    where: NoteWhereUniqueInput
    update: XOR<NoteUpdateWithoutFolderInput, NoteUncheckedUpdateWithoutFolderInput>
    create: XOR<NoteCreateWithoutFolderInput, NoteUncheckedCreateWithoutFolderInput>
  }

  export type NoteUpdateWithWhereUniqueWithoutFolderInput = {
    where: NoteWhereUniqueInput
    data: XOR<NoteUpdateWithoutFolderInput, NoteUncheckedUpdateWithoutFolderInput>
  }

  export type NoteUpdateManyWithWhereWithoutFolderInput = {
    where: NoteScalarWhereInput
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyWithoutFolderInput>
  }

  export type FolderUpsertWithoutChildrenInput = {
    update: XOR<FolderUpdateWithoutChildrenInput, FolderUncheckedUpdateWithoutChildrenInput>
    create: XOR<FolderCreateWithoutChildrenInput, FolderUncheckedCreateWithoutChildrenInput>
    where?: FolderWhereInput
  }

  export type FolderUpdateToOneWithWhereWithoutChildrenInput = {
    where?: FolderWhereInput
    data: XOR<FolderUpdateWithoutChildrenInput, FolderUncheckedUpdateWithoutChildrenInput>
  }

  export type FolderUpdateWithoutChildrenInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    masteryHistory?: FolderUpdatemasteryHistoryInput | InputJsonValue[]
    imageUrls?: FolderUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutFoldersNestedInput
    questionSets?: QuestionSetUpdateManyWithoutFolderNestedInput
    notes?: NoteUpdateManyWithoutFolderNestedInput
    parent?: FolderUpdateOneWithoutChildrenNestedInput
  }

  export type FolderUncheckedUpdateWithoutChildrenInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    masteryHistory?: FolderUpdatemasteryHistoryInput | InputJsonValue[]
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    imageUrls?: FolderUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    questionSets?: QuestionSetUncheckedUpdateManyWithoutFolderNestedInput
    notes?: NoteUncheckedUpdateManyWithoutFolderNestedInput
  }

  export type FolderUpsertWithWhereUniqueWithoutParentInput = {
    where: FolderWhereUniqueInput
    update: XOR<FolderUpdateWithoutParentInput, FolderUncheckedUpdateWithoutParentInput>
    create: XOR<FolderCreateWithoutParentInput, FolderUncheckedCreateWithoutParentInput>
  }

  export type FolderUpdateWithWhereUniqueWithoutParentInput = {
    where: FolderWhereUniqueInput
    data: XOR<FolderUpdateWithoutParentInput, FolderUncheckedUpdateWithoutParentInput>
  }

  export type FolderUpdateManyWithWhereWithoutParentInput = {
    where: FolderScalarWhereInput
    data: XOR<FolderUpdateManyMutationInput, FolderUncheckedUpdateManyWithoutParentInput>
  }

  export type NoteCreateWithoutQuestionSetInput = {
    title: string
    content: JsonNullValueInput | InputJsonValue
    plainText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutNotesInput
    folder?: FolderCreateNestedOneWithoutNotesInput
    insightCatalysts?: InsightCatalystCreateNestedManyWithoutNoteInput
  }

  export type NoteUncheckedCreateWithoutQuestionSetInput = {
    id?: number
    title: string
    content: JsonNullValueInput | InputJsonValue
    plainText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    folderId?: number | null
    insightCatalysts?: InsightCatalystUncheckedCreateNestedManyWithoutNoteInput
  }

  export type NoteCreateOrConnectWithoutQuestionSetInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutQuestionSetInput, NoteUncheckedCreateWithoutQuestionSetInput>
  }

  export type NoteCreateManyQuestionSetInputEnvelope = {
    data: NoteCreateManyQuestionSetInput | NoteCreateManyQuestionSetInput[]
    skipDuplicates?: boolean
  }

  export type QuestionCreateWithoutQuestionSetInput = {
    answer?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    options?: QuestionCreateoptionsInput | string[]
    questionType: string
    text: string
    conceptTags?: QuestionCreateconceptTagsInput | string[]
    lastAnswerCorrect?: boolean | null
    uueFocus?: string
    totalMarksAvailable?: number
    markingCriteria?: NullableJsonNullValueInput | InputJsonValue
    currentMasteryScore?: number | null
    difficultyScore?: number | null
    timesAnsweredCorrectly?: number
    timesAnsweredIncorrectly?: number
    selfMark?: boolean
    autoMark?: boolean
    aiGenerated?: boolean
    inCat?: string | null
    imageUrls?: QuestionCreateimageUrlsInput | string[]
    userAnswers?: UserQuestionAnswerCreateNestedManyWithoutQuestionInput
    insightCatalysts?: InsightCatalystCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutQuestionSetInput = {
    id?: number
    answer?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    options?: QuestionCreateoptionsInput | string[]
    questionType: string
    text: string
    conceptTags?: QuestionCreateconceptTagsInput | string[]
    lastAnswerCorrect?: boolean | null
    uueFocus?: string
    totalMarksAvailable?: number
    markingCriteria?: NullableJsonNullValueInput | InputJsonValue
    currentMasteryScore?: number | null
    difficultyScore?: number | null
    timesAnsweredCorrectly?: number
    timesAnsweredIncorrectly?: number
    selfMark?: boolean
    autoMark?: boolean
    aiGenerated?: boolean
    inCat?: string | null
    imageUrls?: QuestionCreateimageUrlsInput | string[]
    userAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutQuestionInput
    insightCatalysts?: InsightCatalystUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutQuestionSetInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutQuestionSetInput, QuestionUncheckedCreateWithoutQuestionSetInput>
  }

  export type QuestionCreateManyQuestionSetInputEnvelope = {
    data: QuestionCreateManyQuestionSetInput | QuestionCreateManyQuestionSetInput[]
    skipDuplicates?: boolean
  }

  export type FolderCreateWithoutQuestionSetsInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    currentMasteryScore?: number | null
    masteryHistory?: FolderCreatemasteryHistoryInput | InputJsonValue[]
    imageUrls?: FolderCreateimageUrlsInput | string[]
    isPinned?: boolean
    user: UserCreateNestedOneWithoutFoldersInput
    notes?: NoteCreateNestedManyWithoutFolderInput
    parent?: FolderCreateNestedOneWithoutChildrenInput
    children?: FolderCreateNestedManyWithoutParentInput
  }

  export type FolderUncheckedCreateWithoutQuestionSetsInput = {
    id?: number
    name: string
    description?: string | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    currentMasteryScore?: number | null
    masteryHistory?: FolderCreatemasteryHistoryInput | InputJsonValue[]
    parentId?: number | null
    imageUrls?: FolderCreateimageUrlsInput | string[]
    isPinned?: boolean
    notes?: NoteUncheckedCreateNestedManyWithoutFolderInput
    children?: FolderUncheckedCreateNestedManyWithoutParentInput
  }

  export type FolderCreateOrConnectWithoutQuestionSetsInput = {
    where: FolderWhereUniqueInput
    create: XOR<FolderCreateWithoutQuestionSetsInput, FolderUncheckedCreateWithoutQuestionSetsInput>
  }

  export type UserQuestionAnswerCreateWithoutQuestionSetInput = {
    isCorrect: boolean
    confidence?: number | null
    timeSpent: number
    answeredAt?: Date | string
    scoreAchieved: number
    createdAt?: Date | string
    feedbackFromAI?: string | null
    updatedAt?: Date | string
    userAnswerText?: string | null
    uueFocusTested?: string | null
    question: QuestionCreateNestedOneWithoutUserAnswersInput
    user: UserCreateNestedOneWithoutQuestionAnswersInput
    studySession?: UserStudySessionCreateNestedOneWithoutUserQuestionAnswersInput
  }

  export type UserQuestionAnswerUncheckedCreateWithoutQuestionSetInput = {
    id?: number
    userId: number
    questionId: number
    isCorrect: boolean
    confidence?: number | null
    timeSpent: number
    answeredAt?: Date | string
    scoreAchieved: number
    createdAt?: Date | string
    feedbackFromAI?: string | null
    updatedAt?: Date | string
    userAnswerText?: string | null
    uueFocusTested?: string | null
    userStudySessionId?: number | null
  }

  export type UserQuestionAnswerCreateOrConnectWithoutQuestionSetInput = {
    where: UserQuestionAnswerWhereUniqueInput
    create: XOR<UserQuestionAnswerCreateWithoutQuestionSetInput, UserQuestionAnswerUncheckedCreateWithoutQuestionSetInput>
  }

  export type UserQuestionAnswerCreateManyQuestionSetInputEnvelope = {
    data: UserQuestionAnswerCreateManyQuestionSetInput | UserQuestionAnswerCreateManyQuestionSetInput[]
    skipDuplicates?: boolean
  }

  export type NoteUpsertWithWhereUniqueWithoutQuestionSetInput = {
    where: NoteWhereUniqueInput
    update: XOR<NoteUpdateWithoutQuestionSetInput, NoteUncheckedUpdateWithoutQuestionSetInput>
    create: XOR<NoteCreateWithoutQuestionSetInput, NoteUncheckedCreateWithoutQuestionSetInput>
  }

  export type NoteUpdateWithWhereUniqueWithoutQuestionSetInput = {
    where: NoteWhereUniqueInput
    data: XOR<NoteUpdateWithoutQuestionSetInput, NoteUncheckedUpdateWithoutQuestionSetInput>
  }

  export type NoteUpdateManyWithWhereWithoutQuestionSetInput = {
    where: NoteScalarWhereInput
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyWithoutQuestionSetInput>
  }

  export type QuestionUpsertWithWhereUniqueWithoutQuestionSetInput = {
    where: QuestionWhereUniqueInput
    update: XOR<QuestionUpdateWithoutQuestionSetInput, QuestionUncheckedUpdateWithoutQuestionSetInput>
    create: XOR<QuestionCreateWithoutQuestionSetInput, QuestionUncheckedCreateWithoutQuestionSetInput>
  }

  export type QuestionUpdateWithWhereUniqueWithoutQuestionSetInput = {
    where: QuestionWhereUniqueInput
    data: XOR<QuestionUpdateWithoutQuestionSetInput, QuestionUncheckedUpdateWithoutQuestionSetInput>
  }

  export type QuestionUpdateManyWithWhereWithoutQuestionSetInput = {
    where: QuestionScalarWhereInput
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyWithoutQuestionSetInput>
  }

  export type QuestionScalarWhereInput = {
    AND?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    OR?: QuestionScalarWhereInput[]
    NOT?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    id?: IntFilter<"Question"> | number
    answer?: StringNullableFilter<"Question"> | string | null
    questionSetId?: IntFilter<"Question"> | number
    createdAt?: DateTimeFilter<"Question"> | Date | string
    updatedAt?: DateTimeFilter<"Question"> | Date | string
    options?: StringNullableListFilter<"Question">
    questionType?: StringFilter<"Question"> | string
    text?: StringFilter<"Question"> | string
    conceptTags?: StringNullableListFilter<"Question">
    lastAnswerCorrect?: BoolNullableFilter<"Question"> | boolean | null
    uueFocus?: StringFilter<"Question"> | string
    totalMarksAvailable?: IntFilter<"Question"> | number
    markingCriteria?: JsonNullableFilter<"Question">
    currentMasteryScore?: FloatNullableFilter<"Question"> | number | null
    difficultyScore?: FloatNullableFilter<"Question"> | number | null
    timesAnsweredCorrectly?: IntFilter<"Question"> | number
    timesAnsweredIncorrectly?: IntFilter<"Question"> | number
    selfMark?: BoolFilter<"Question"> | boolean
    autoMark?: BoolFilter<"Question"> | boolean
    aiGenerated?: BoolFilter<"Question"> | boolean
    inCat?: StringNullableFilter<"Question"> | string | null
    imageUrls?: StringNullableListFilter<"Question">
  }

  export type FolderUpsertWithoutQuestionSetsInput = {
    update: XOR<FolderUpdateWithoutQuestionSetsInput, FolderUncheckedUpdateWithoutQuestionSetsInput>
    create: XOR<FolderCreateWithoutQuestionSetsInput, FolderUncheckedCreateWithoutQuestionSetsInput>
    where?: FolderWhereInput
  }

  export type FolderUpdateToOneWithWhereWithoutQuestionSetsInput = {
    where?: FolderWhereInput
    data: XOR<FolderUpdateWithoutQuestionSetsInput, FolderUncheckedUpdateWithoutQuestionSetsInput>
  }

  export type FolderUpdateWithoutQuestionSetsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    masteryHistory?: FolderUpdatemasteryHistoryInput | InputJsonValue[]
    imageUrls?: FolderUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutFoldersNestedInput
    notes?: NoteUpdateManyWithoutFolderNestedInput
    parent?: FolderUpdateOneWithoutChildrenNestedInput
    children?: FolderUpdateManyWithoutParentNestedInput
  }

  export type FolderUncheckedUpdateWithoutQuestionSetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    masteryHistory?: FolderUpdatemasteryHistoryInput | InputJsonValue[]
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    imageUrls?: FolderUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    notes?: NoteUncheckedUpdateManyWithoutFolderNestedInput
    children?: FolderUncheckedUpdateManyWithoutParentNestedInput
  }

  export type UserQuestionAnswerUpsertWithWhereUniqueWithoutQuestionSetInput = {
    where: UserQuestionAnswerWhereUniqueInput
    update: XOR<UserQuestionAnswerUpdateWithoutQuestionSetInput, UserQuestionAnswerUncheckedUpdateWithoutQuestionSetInput>
    create: XOR<UserQuestionAnswerCreateWithoutQuestionSetInput, UserQuestionAnswerUncheckedCreateWithoutQuestionSetInput>
  }

  export type UserQuestionAnswerUpdateWithWhereUniqueWithoutQuestionSetInput = {
    where: UserQuestionAnswerWhereUniqueInput
    data: XOR<UserQuestionAnswerUpdateWithoutQuestionSetInput, UserQuestionAnswerUncheckedUpdateWithoutQuestionSetInput>
  }

  export type UserQuestionAnswerUpdateManyWithWhereWithoutQuestionSetInput = {
    where: UserQuestionAnswerScalarWhereInput
    data: XOR<UserQuestionAnswerUpdateManyMutationInput, UserQuestionAnswerUncheckedUpdateManyWithoutQuestionSetInput>
  }

  export type QuestionSetCreateWithoutQuestionsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    currentIntervalDays?: number | null
    exploreScore?: number
    lastReviewedAt?: Date | string | null
    nextReviewAt?: Date | string | null
    reviewCount?: number
    understandScore?: number
    useScore?: number
    currentForgottenPercentage?: number | null
    currentTotalMasteryScore?: number
    currentUUESetStage?: string
    forgettingCurveParams?: NullableJsonNullValueInput | InputJsonValue
    masteryHistory?: QuestionSetCreatemasteryHistoryInput | InputJsonValue[]
    source?: string | null
    instructions?: string | null
    isTracked?: boolean
    imageUrls?: QuestionSetCreateimageUrlsInput | string[]
    isPinned?: boolean
    notes?: NoteCreateNestedManyWithoutQuestionSetInput
    folder: FolderCreateNestedOneWithoutQuestionSetsInput
    userAnswers?: UserQuestionAnswerCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetUncheckedCreateWithoutQuestionsInput = {
    id?: number
    name: string
    folderId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    currentIntervalDays?: number | null
    exploreScore?: number
    lastReviewedAt?: Date | string | null
    nextReviewAt?: Date | string | null
    reviewCount?: number
    understandScore?: number
    useScore?: number
    currentForgottenPercentage?: number | null
    currentTotalMasteryScore?: number
    currentUUESetStage?: string
    forgettingCurveParams?: NullableJsonNullValueInput | InputJsonValue
    masteryHistory?: QuestionSetCreatemasteryHistoryInput | InputJsonValue[]
    source?: string | null
    instructions?: string | null
    isTracked?: boolean
    imageUrls?: QuestionSetCreateimageUrlsInput | string[]
    isPinned?: boolean
    notes?: NoteUncheckedCreateNestedManyWithoutQuestionSetInput
    userAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetCreateOrConnectWithoutQuestionsInput = {
    where: QuestionSetWhereUniqueInput
    create: XOR<QuestionSetCreateWithoutQuestionsInput, QuestionSetUncheckedCreateWithoutQuestionsInput>
  }

  export type UserQuestionAnswerCreateWithoutQuestionInput = {
    isCorrect: boolean
    confidence?: number | null
    timeSpent: number
    answeredAt?: Date | string
    scoreAchieved: number
    createdAt?: Date | string
    feedbackFromAI?: string | null
    updatedAt?: Date | string
    userAnswerText?: string | null
    uueFocusTested?: string | null
    questionSet?: QuestionSetCreateNestedOneWithoutUserAnswersInput
    user: UserCreateNestedOneWithoutQuestionAnswersInput
    studySession?: UserStudySessionCreateNestedOneWithoutUserQuestionAnswersInput
  }

  export type UserQuestionAnswerUncheckedCreateWithoutQuestionInput = {
    id?: number
    userId: number
    isCorrect: boolean
    confidence?: number | null
    timeSpent: number
    answeredAt?: Date | string
    scoreAchieved: number
    createdAt?: Date | string
    feedbackFromAI?: string | null
    questionSetId?: number | null
    updatedAt?: Date | string
    userAnswerText?: string | null
    uueFocusTested?: string | null
    userStudySessionId?: number | null
  }

  export type UserQuestionAnswerCreateOrConnectWithoutQuestionInput = {
    where: UserQuestionAnswerWhereUniqueInput
    create: XOR<UserQuestionAnswerCreateWithoutQuestionInput, UserQuestionAnswerUncheckedCreateWithoutQuestionInput>
  }

  export type UserQuestionAnswerCreateManyQuestionInputEnvelope = {
    data: UserQuestionAnswerCreateManyQuestionInput | UserQuestionAnswerCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type InsightCatalystCreateWithoutQuestionInput = {
    type: string
    text: string
    explanation?: string | null
    imageUrls?: InsightCatalystCreateimageUrlsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutInsightCatalystsInput
    note?: NoteCreateNestedOneWithoutInsightCatalystsInput
  }

  export type InsightCatalystUncheckedCreateWithoutQuestionInput = {
    id?: number
    type: string
    text: string
    explanation?: string | null
    imageUrls?: InsightCatalystCreateimageUrlsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    noteId?: number | null
  }

  export type InsightCatalystCreateOrConnectWithoutQuestionInput = {
    where: InsightCatalystWhereUniqueInput
    create: XOR<InsightCatalystCreateWithoutQuestionInput, InsightCatalystUncheckedCreateWithoutQuestionInput>
  }

  export type InsightCatalystCreateManyQuestionInputEnvelope = {
    data: InsightCatalystCreateManyQuestionInput | InsightCatalystCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type QuestionSetUpsertWithoutQuestionsInput = {
    update: XOR<QuestionSetUpdateWithoutQuestionsInput, QuestionSetUncheckedUpdateWithoutQuestionsInput>
    create: XOR<QuestionSetCreateWithoutQuestionsInput, QuestionSetUncheckedCreateWithoutQuestionsInput>
    where?: QuestionSetWhereInput
  }

  export type QuestionSetUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: QuestionSetWhereInput
    data: XOR<QuestionSetUpdateWithoutQuestionsInput, QuestionSetUncheckedUpdateWithoutQuestionsInput>
  }

  export type QuestionSetUpdateWithoutQuestionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentIntervalDays?: NullableFloatFieldUpdateOperationsInput | number | null
    exploreScore?: FloatFieldUpdateOperationsInput | number
    lastReviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewCount?: IntFieldUpdateOperationsInput | number
    understandScore?: FloatFieldUpdateOperationsInput | number
    useScore?: FloatFieldUpdateOperationsInput | number
    currentForgottenPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    currentTotalMasteryScore?: FloatFieldUpdateOperationsInput | number
    currentUUESetStage?: StringFieldUpdateOperationsInput | string
    forgettingCurveParams?: NullableJsonNullValueInput | InputJsonValue
    masteryHistory?: QuestionSetUpdatemasteryHistoryInput | InputJsonValue[]
    source?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    isTracked?: BoolFieldUpdateOperationsInput | boolean
    imageUrls?: QuestionSetUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    notes?: NoteUpdateManyWithoutQuestionSetNestedInput
    folder?: FolderUpdateOneRequiredWithoutQuestionSetsNestedInput
    userAnswers?: UserQuestionAnswerUpdateManyWithoutQuestionSetNestedInput
  }

  export type QuestionSetUncheckedUpdateWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    folderId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentIntervalDays?: NullableFloatFieldUpdateOperationsInput | number | null
    exploreScore?: FloatFieldUpdateOperationsInput | number
    lastReviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewCount?: IntFieldUpdateOperationsInput | number
    understandScore?: FloatFieldUpdateOperationsInput | number
    useScore?: FloatFieldUpdateOperationsInput | number
    currentForgottenPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    currentTotalMasteryScore?: FloatFieldUpdateOperationsInput | number
    currentUUESetStage?: StringFieldUpdateOperationsInput | string
    forgettingCurveParams?: NullableJsonNullValueInput | InputJsonValue
    masteryHistory?: QuestionSetUpdatemasteryHistoryInput | InputJsonValue[]
    source?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    isTracked?: BoolFieldUpdateOperationsInput | boolean
    imageUrls?: QuestionSetUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    notes?: NoteUncheckedUpdateManyWithoutQuestionSetNestedInput
    userAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutQuestionSetNestedInput
  }

  export type UserQuestionAnswerUpsertWithWhereUniqueWithoutQuestionInput = {
    where: UserQuestionAnswerWhereUniqueInput
    update: XOR<UserQuestionAnswerUpdateWithoutQuestionInput, UserQuestionAnswerUncheckedUpdateWithoutQuestionInput>
    create: XOR<UserQuestionAnswerCreateWithoutQuestionInput, UserQuestionAnswerUncheckedCreateWithoutQuestionInput>
  }

  export type UserQuestionAnswerUpdateWithWhereUniqueWithoutQuestionInput = {
    where: UserQuestionAnswerWhereUniqueInput
    data: XOR<UserQuestionAnswerUpdateWithoutQuestionInput, UserQuestionAnswerUncheckedUpdateWithoutQuestionInput>
  }

  export type UserQuestionAnswerUpdateManyWithWhereWithoutQuestionInput = {
    where: UserQuestionAnswerScalarWhereInput
    data: XOR<UserQuestionAnswerUpdateManyMutationInput, UserQuestionAnswerUncheckedUpdateManyWithoutQuestionInput>
  }

  export type InsightCatalystUpsertWithWhereUniqueWithoutQuestionInput = {
    where: InsightCatalystWhereUniqueInput
    update: XOR<InsightCatalystUpdateWithoutQuestionInput, InsightCatalystUncheckedUpdateWithoutQuestionInput>
    create: XOR<InsightCatalystCreateWithoutQuestionInput, InsightCatalystUncheckedCreateWithoutQuestionInput>
  }

  export type InsightCatalystUpdateWithWhereUniqueWithoutQuestionInput = {
    where: InsightCatalystWhereUniqueInput
    data: XOR<InsightCatalystUpdateWithoutQuestionInput, InsightCatalystUncheckedUpdateWithoutQuestionInput>
  }

  export type InsightCatalystUpdateManyWithWhereWithoutQuestionInput = {
    where: InsightCatalystScalarWhereInput
    data: XOR<InsightCatalystUpdateManyMutationInput, InsightCatalystUncheckedUpdateManyWithoutQuestionInput>
  }

  export type QuestionCreateWithoutUserAnswersInput = {
    answer?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    options?: QuestionCreateoptionsInput | string[]
    questionType: string
    text: string
    conceptTags?: QuestionCreateconceptTagsInput | string[]
    lastAnswerCorrect?: boolean | null
    uueFocus?: string
    totalMarksAvailable?: number
    markingCriteria?: NullableJsonNullValueInput | InputJsonValue
    currentMasteryScore?: number | null
    difficultyScore?: number | null
    timesAnsweredCorrectly?: number
    timesAnsweredIncorrectly?: number
    selfMark?: boolean
    autoMark?: boolean
    aiGenerated?: boolean
    inCat?: string | null
    imageUrls?: QuestionCreateimageUrlsInput | string[]
    questionSet: QuestionSetCreateNestedOneWithoutQuestionsInput
    insightCatalysts?: InsightCatalystCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutUserAnswersInput = {
    id?: number
    answer?: string | null
    questionSetId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    options?: QuestionCreateoptionsInput | string[]
    questionType: string
    text: string
    conceptTags?: QuestionCreateconceptTagsInput | string[]
    lastAnswerCorrect?: boolean | null
    uueFocus?: string
    totalMarksAvailable?: number
    markingCriteria?: NullableJsonNullValueInput | InputJsonValue
    currentMasteryScore?: number | null
    difficultyScore?: number | null
    timesAnsweredCorrectly?: number
    timesAnsweredIncorrectly?: number
    selfMark?: boolean
    autoMark?: boolean
    aiGenerated?: boolean
    inCat?: string | null
    imageUrls?: QuestionCreateimageUrlsInput | string[]
    insightCatalysts?: InsightCatalystUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutUserAnswersInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutUserAnswersInput, QuestionUncheckedCreateWithoutUserAnswersInput>
  }

  export type QuestionSetCreateWithoutUserAnswersInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    currentIntervalDays?: number | null
    exploreScore?: number
    lastReviewedAt?: Date | string | null
    nextReviewAt?: Date | string | null
    reviewCount?: number
    understandScore?: number
    useScore?: number
    currentForgottenPercentage?: number | null
    currentTotalMasteryScore?: number
    currentUUESetStage?: string
    forgettingCurveParams?: NullableJsonNullValueInput | InputJsonValue
    masteryHistory?: QuestionSetCreatemasteryHistoryInput | InputJsonValue[]
    source?: string | null
    instructions?: string | null
    isTracked?: boolean
    imageUrls?: QuestionSetCreateimageUrlsInput | string[]
    isPinned?: boolean
    notes?: NoteCreateNestedManyWithoutQuestionSetInput
    questions?: QuestionCreateNestedManyWithoutQuestionSetInput
    folder: FolderCreateNestedOneWithoutQuestionSetsInput
  }

  export type QuestionSetUncheckedCreateWithoutUserAnswersInput = {
    id?: number
    name: string
    folderId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    currentIntervalDays?: number | null
    exploreScore?: number
    lastReviewedAt?: Date | string | null
    nextReviewAt?: Date | string | null
    reviewCount?: number
    understandScore?: number
    useScore?: number
    currentForgottenPercentage?: number | null
    currentTotalMasteryScore?: number
    currentUUESetStage?: string
    forgettingCurveParams?: NullableJsonNullValueInput | InputJsonValue
    masteryHistory?: QuestionSetCreatemasteryHistoryInput | InputJsonValue[]
    source?: string | null
    instructions?: string | null
    isTracked?: boolean
    imageUrls?: QuestionSetCreateimageUrlsInput | string[]
    isPinned?: boolean
    notes?: NoteUncheckedCreateNestedManyWithoutQuestionSetInput
    questions?: QuestionUncheckedCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetCreateOrConnectWithoutUserAnswersInput = {
    where: QuestionSetWhereUniqueInput
    create: XOR<QuestionSetCreateWithoutUserAnswersInput, QuestionSetUncheckedCreateWithoutUserAnswersInput>
  }

  export type UserCreateWithoutQuestionAnswersInput = {
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dailyStudyTimeMinutes?: number
    folders?: FolderCreateNestedManyWithoutUserInput
    studySessions?: UserStudySessionCreateNestedManyWithoutUserInput
    notes?: NoteCreateNestedManyWithoutUserInput
    insightCatalysts?: InsightCatalystCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutQuestionAnswersInput = {
    id?: number
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dailyStudyTimeMinutes?: number
    folders?: FolderUncheckedCreateNestedManyWithoutUserInput
    studySessions?: UserStudySessionUncheckedCreateNestedManyWithoutUserInput
    notes?: NoteUncheckedCreateNestedManyWithoutUserInput
    insightCatalysts?: InsightCatalystUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutQuestionAnswersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutQuestionAnswersInput, UserUncheckedCreateWithoutQuestionAnswersInput>
  }

  export type UserStudySessionCreateWithoutUserQuestionAnswersInput = {
    sessionStartedAt?: Date | string | null
    sessionEndedAt?: Date | string
    timeSpentSeconds: number
    answeredQuestionsCount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStudySessionsInput
  }

  export type UserStudySessionUncheckedCreateWithoutUserQuestionAnswersInput = {
    id?: number
    userId: number
    sessionStartedAt?: Date | string | null
    sessionEndedAt?: Date | string
    timeSpentSeconds: number
    answeredQuestionsCount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStudySessionCreateOrConnectWithoutUserQuestionAnswersInput = {
    where: UserStudySessionWhereUniqueInput
    create: XOR<UserStudySessionCreateWithoutUserQuestionAnswersInput, UserStudySessionUncheckedCreateWithoutUserQuestionAnswersInput>
  }

  export type QuestionUpsertWithoutUserAnswersInput = {
    update: XOR<QuestionUpdateWithoutUserAnswersInput, QuestionUncheckedUpdateWithoutUserAnswersInput>
    create: XOR<QuestionCreateWithoutUserAnswersInput, QuestionUncheckedCreateWithoutUserAnswersInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutUserAnswersInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutUserAnswersInput, QuestionUncheckedUpdateWithoutUserAnswersInput>
  }

  export type QuestionUpdateWithoutUserAnswersInput = {
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: QuestionUpdateoptionsInput | string[]
    questionType?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    conceptTags?: QuestionUpdateconceptTagsInput | string[]
    lastAnswerCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    uueFocus?: StringFieldUpdateOperationsInput | string
    totalMarksAvailable?: IntFieldUpdateOperationsInput | number
    markingCriteria?: NullableJsonNullValueInput | InputJsonValue
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    difficultyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    timesAnsweredCorrectly?: IntFieldUpdateOperationsInput | number
    timesAnsweredIncorrectly?: IntFieldUpdateOperationsInput | number
    selfMark?: BoolFieldUpdateOperationsInput | boolean
    autoMark?: BoolFieldUpdateOperationsInput | boolean
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    inCat?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrls?: QuestionUpdateimageUrlsInput | string[]
    questionSet?: QuestionSetUpdateOneRequiredWithoutQuestionsNestedInput
    insightCatalysts?: InsightCatalystUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutUserAnswersInput = {
    id?: IntFieldUpdateOperationsInput | number
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    questionSetId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: QuestionUpdateoptionsInput | string[]
    questionType?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    conceptTags?: QuestionUpdateconceptTagsInput | string[]
    lastAnswerCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    uueFocus?: StringFieldUpdateOperationsInput | string
    totalMarksAvailable?: IntFieldUpdateOperationsInput | number
    markingCriteria?: NullableJsonNullValueInput | InputJsonValue
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    difficultyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    timesAnsweredCorrectly?: IntFieldUpdateOperationsInput | number
    timesAnsweredIncorrectly?: IntFieldUpdateOperationsInput | number
    selfMark?: BoolFieldUpdateOperationsInput | boolean
    autoMark?: BoolFieldUpdateOperationsInput | boolean
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    inCat?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrls?: QuestionUpdateimageUrlsInput | string[]
    insightCatalysts?: InsightCatalystUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionSetUpsertWithoutUserAnswersInput = {
    update: XOR<QuestionSetUpdateWithoutUserAnswersInput, QuestionSetUncheckedUpdateWithoutUserAnswersInput>
    create: XOR<QuestionSetCreateWithoutUserAnswersInput, QuestionSetUncheckedCreateWithoutUserAnswersInput>
    where?: QuestionSetWhereInput
  }

  export type QuestionSetUpdateToOneWithWhereWithoutUserAnswersInput = {
    where?: QuestionSetWhereInput
    data: XOR<QuestionSetUpdateWithoutUserAnswersInput, QuestionSetUncheckedUpdateWithoutUserAnswersInput>
  }

  export type QuestionSetUpdateWithoutUserAnswersInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentIntervalDays?: NullableFloatFieldUpdateOperationsInput | number | null
    exploreScore?: FloatFieldUpdateOperationsInput | number
    lastReviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewCount?: IntFieldUpdateOperationsInput | number
    understandScore?: FloatFieldUpdateOperationsInput | number
    useScore?: FloatFieldUpdateOperationsInput | number
    currentForgottenPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    currentTotalMasteryScore?: FloatFieldUpdateOperationsInput | number
    currentUUESetStage?: StringFieldUpdateOperationsInput | string
    forgettingCurveParams?: NullableJsonNullValueInput | InputJsonValue
    masteryHistory?: QuestionSetUpdatemasteryHistoryInput | InputJsonValue[]
    source?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    isTracked?: BoolFieldUpdateOperationsInput | boolean
    imageUrls?: QuestionSetUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    notes?: NoteUpdateManyWithoutQuestionSetNestedInput
    questions?: QuestionUpdateManyWithoutQuestionSetNestedInput
    folder?: FolderUpdateOneRequiredWithoutQuestionSetsNestedInput
  }

  export type QuestionSetUncheckedUpdateWithoutUserAnswersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    folderId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentIntervalDays?: NullableFloatFieldUpdateOperationsInput | number | null
    exploreScore?: FloatFieldUpdateOperationsInput | number
    lastReviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewCount?: IntFieldUpdateOperationsInput | number
    understandScore?: FloatFieldUpdateOperationsInput | number
    useScore?: FloatFieldUpdateOperationsInput | number
    currentForgottenPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    currentTotalMasteryScore?: FloatFieldUpdateOperationsInput | number
    currentUUESetStage?: StringFieldUpdateOperationsInput | string
    forgettingCurveParams?: NullableJsonNullValueInput | InputJsonValue
    masteryHistory?: QuestionSetUpdatemasteryHistoryInput | InputJsonValue[]
    source?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    isTracked?: BoolFieldUpdateOperationsInput | boolean
    imageUrls?: QuestionSetUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    notes?: NoteUncheckedUpdateManyWithoutQuestionSetNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutQuestionSetNestedInput
  }

  export type UserUpsertWithoutQuestionAnswersInput = {
    update: XOR<UserUpdateWithoutQuestionAnswersInput, UserUncheckedUpdateWithoutQuestionAnswersInput>
    create: XOR<UserCreateWithoutQuestionAnswersInput, UserUncheckedCreateWithoutQuestionAnswersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutQuestionAnswersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutQuestionAnswersInput, UserUncheckedUpdateWithoutQuestionAnswersInput>
  }

  export type UserUpdateWithoutQuestionAnswersInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyStudyTimeMinutes?: IntFieldUpdateOperationsInput | number
    folders?: FolderUpdateManyWithoutUserNestedInput
    studySessions?: UserStudySessionUpdateManyWithoutUserNestedInput
    notes?: NoteUpdateManyWithoutUserNestedInput
    insightCatalysts?: InsightCatalystUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutQuestionAnswersInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyStudyTimeMinutes?: IntFieldUpdateOperationsInput | number
    folders?: FolderUncheckedUpdateManyWithoutUserNestedInput
    studySessions?: UserStudySessionUncheckedUpdateManyWithoutUserNestedInput
    notes?: NoteUncheckedUpdateManyWithoutUserNestedInput
    insightCatalysts?: InsightCatalystUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserStudySessionUpsertWithoutUserQuestionAnswersInput = {
    update: XOR<UserStudySessionUpdateWithoutUserQuestionAnswersInput, UserStudySessionUncheckedUpdateWithoutUserQuestionAnswersInput>
    create: XOR<UserStudySessionCreateWithoutUserQuestionAnswersInput, UserStudySessionUncheckedCreateWithoutUserQuestionAnswersInput>
    where?: UserStudySessionWhereInput
  }

  export type UserStudySessionUpdateToOneWithWhereWithoutUserQuestionAnswersInput = {
    where?: UserStudySessionWhereInput
    data: XOR<UserStudySessionUpdateWithoutUserQuestionAnswersInput, UserStudySessionUncheckedUpdateWithoutUserQuestionAnswersInput>
  }

  export type UserStudySessionUpdateWithoutUserQuestionAnswersInput = {
    sessionStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessionEndedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeSpentSeconds?: IntFieldUpdateOperationsInput | number
    answeredQuestionsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStudySessionsNestedInput
  }

  export type UserStudySessionUncheckedUpdateWithoutUserQuestionAnswersInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    sessionStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessionEndedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeSpentSeconds?: IntFieldUpdateOperationsInput | number
    answeredQuestionsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestionAnswerCreateWithoutStudySessionInput = {
    isCorrect: boolean
    confidence?: number | null
    timeSpent: number
    answeredAt?: Date | string
    scoreAchieved: number
    createdAt?: Date | string
    feedbackFromAI?: string | null
    updatedAt?: Date | string
    userAnswerText?: string | null
    uueFocusTested?: string | null
    question: QuestionCreateNestedOneWithoutUserAnswersInput
    questionSet?: QuestionSetCreateNestedOneWithoutUserAnswersInput
    user: UserCreateNestedOneWithoutQuestionAnswersInput
  }

  export type UserQuestionAnswerUncheckedCreateWithoutStudySessionInput = {
    id?: number
    userId: number
    questionId: number
    isCorrect: boolean
    confidence?: number | null
    timeSpent: number
    answeredAt?: Date | string
    scoreAchieved: number
    createdAt?: Date | string
    feedbackFromAI?: string | null
    questionSetId?: number | null
    updatedAt?: Date | string
    userAnswerText?: string | null
    uueFocusTested?: string | null
  }

  export type UserQuestionAnswerCreateOrConnectWithoutStudySessionInput = {
    where: UserQuestionAnswerWhereUniqueInput
    create: XOR<UserQuestionAnswerCreateWithoutStudySessionInput, UserQuestionAnswerUncheckedCreateWithoutStudySessionInput>
  }

  export type UserQuestionAnswerCreateManyStudySessionInputEnvelope = {
    data: UserQuestionAnswerCreateManyStudySessionInput | UserQuestionAnswerCreateManyStudySessionInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutStudySessionsInput = {
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dailyStudyTimeMinutes?: number
    folders?: FolderCreateNestedManyWithoutUserInput
    questionAnswers?: UserQuestionAnswerCreateNestedManyWithoutUserInput
    notes?: NoteCreateNestedManyWithoutUserInput
    insightCatalysts?: InsightCatalystCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStudySessionsInput = {
    id?: number
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dailyStudyTimeMinutes?: number
    folders?: FolderUncheckedCreateNestedManyWithoutUserInput
    questionAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutUserInput
    notes?: NoteUncheckedCreateNestedManyWithoutUserInput
    insightCatalysts?: InsightCatalystUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStudySessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudySessionsInput, UserUncheckedCreateWithoutStudySessionsInput>
  }

  export type UserQuestionAnswerUpsertWithWhereUniqueWithoutStudySessionInput = {
    where: UserQuestionAnswerWhereUniqueInput
    update: XOR<UserQuestionAnswerUpdateWithoutStudySessionInput, UserQuestionAnswerUncheckedUpdateWithoutStudySessionInput>
    create: XOR<UserQuestionAnswerCreateWithoutStudySessionInput, UserQuestionAnswerUncheckedCreateWithoutStudySessionInput>
  }

  export type UserQuestionAnswerUpdateWithWhereUniqueWithoutStudySessionInput = {
    where: UserQuestionAnswerWhereUniqueInput
    data: XOR<UserQuestionAnswerUpdateWithoutStudySessionInput, UserQuestionAnswerUncheckedUpdateWithoutStudySessionInput>
  }

  export type UserQuestionAnswerUpdateManyWithWhereWithoutStudySessionInput = {
    where: UserQuestionAnswerScalarWhereInput
    data: XOR<UserQuestionAnswerUpdateManyMutationInput, UserQuestionAnswerUncheckedUpdateManyWithoutStudySessionInput>
  }

  export type UserUpsertWithoutStudySessionsInput = {
    update: XOR<UserUpdateWithoutStudySessionsInput, UserUncheckedUpdateWithoutStudySessionsInput>
    create: XOR<UserCreateWithoutStudySessionsInput, UserUncheckedCreateWithoutStudySessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStudySessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStudySessionsInput, UserUncheckedUpdateWithoutStudySessionsInput>
  }

  export type UserUpdateWithoutStudySessionsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyStudyTimeMinutes?: IntFieldUpdateOperationsInput | number
    folders?: FolderUpdateManyWithoutUserNestedInput
    questionAnswers?: UserQuestionAnswerUpdateManyWithoutUserNestedInput
    notes?: NoteUpdateManyWithoutUserNestedInput
    insightCatalysts?: InsightCatalystUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStudySessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyStudyTimeMinutes?: IntFieldUpdateOperationsInput | number
    folders?: FolderUncheckedUpdateManyWithoutUserNestedInput
    questionAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutUserNestedInput
    notes?: NoteUncheckedUpdateManyWithoutUserNestedInput
    insightCatalysts?: InsightCatalystUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutNotesInput = {
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dailyStudyTimeMinutes?: number
    folders?: FolderCreateNestedManyWithoutUserInput
    questionAnswers?: UserQuestionAnswerCreateNestedManyWithoutUserInput
    studySessions?: UserStudySessionCreateNestedManyWithoutUserInput
    insightCatalysts?: InsightCatalystCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotesInput = {
    id?: number
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dailyStudyTimeMinutes?: number
    folders?: FolderUncheckedCreateNestedManyWithoutUserInput
    questionAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutUserInput
    studySessions?: UserStudySessionUncheckedCreateNestedManyWithoutUserInput
    insightCatalysts?: InsightCatalystUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotesInput, UserUncheckedCreateWithoutNotesInput>
  }

  export type FolderCreateWithoutNotesInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    currentMasteryScore?: number | null
    masteryHistory?: FolderCreatemasteryHistoryInput | InputJsonValue[]
    imageUrls?: FolderCreateimageUrlsInput | string[]
    isPinned?: boolean
    user: UserCreateNestedOneWithoutFoldersInput
    questionSets?: QuestionSetCreateNestedManyWithoutFolderInput
    parent?: FolderCreateNestedOneWithoutChildrenInput
    children?: FolderCreateNestedManyWithoutParentInput
  }

  export type FolderUncheckedCreateWithoutNotesInput = {
    id?: number
    name: string
    description?: string | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    currentMasteryScore?: number | null
    masteryHistory?: FolderCreatemasteryHistoryInput | InputJsonValue[]
    parentId?: number | null
    imageUrls?: FolderCreateimageUrlsInput | string[]
    isPinned?: boolean
    questionSets?: QuestionSetUncheckedCreateNestedManyWithoutFolderInput
    children?: FolderUncheckedCreateNestedManyWithoutParentInput
  }

  export type FolderCreateOrConnectWithoutNotesInput = {
    where: FolderWhereUniqueInput
    create: XOR<FolderCreateWithoutNotesInput, FolderUncheckedCreateWithoutNotesInput>
  }

  export type QuestionSetCreateWithoutNotesInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    currentIntervalDays?: number | null
    exploreScore?: number
    lastReviewedAt?: Date | string | null
    nextReviewAt?: Date | string | null
    reviewCount?: number
    understandScore?: number
    useScore?: number
    currentForgottenPercentage?: number | null
    currentTotalMasteryScore?: number
    currentUUESetStage?: string
    forgettingCurveParams?: NullableJsonNullValueInput | InputJsonValue
    masteryHistory?: QuestionSetCreatemasteryHistoryInput | InputJsonValue[]
    source?: string | null
    instructions?: string | null
    isTracked?: boolean
    imageUrls?: QuestionSetCreateimageUrlsInput | string[]
    isPinned?: boolean
    questions?: QuestionCreateNestedManyWithoutQuestionSetInput
    folder: FolderCreateNestedOneWithoutQuestionSetsInput
    userAnswers?: UserQuestionAnswerCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetUncheckedCreateWithoutNotesInput = {
    id?: number
    name: string
    folderId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    currentIntervalDays?: number | null
    exploreScore?: number
    lastReviewedAt?: Date | string | null
    nextReviewAt?: Date | string | null
    reviewCount?: number
    understandScore?: number
    useScore?: number
    currentForgottenPercentage?: number | null
    currentTotalMasteryScore?: number
    currentUUESetStage?: string
    forgettingCurveParams?: NullableJsonNullValueInput | InputJsonValue
    masteryHistory?: QuestionSetCreatemasteryHistoryInput | InputJsonValue[]
    source?: string | null
    instructions?: string | null
    isTracked?: boolean
    imageUrls?: QuestionSetCreateimageUrlsInput | string[]
    isPinned?: boolean
    questions?: QuestionUncheckedCreateNestedManyWithoutQuestionSetInput
    userAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetCreateOrConnectWithoutNotesInput = {
    where: QuestionSetWhereUniqueInput
    create: XOR<QuestionSetCreateWithoutNotesInput, QuestionSetUncheckedCreateWithoutNotesInput>
  }

  export type InsightCatalystCreateWithoutNoteInput = {
    type: string
    text: string
    explanation?: string | null
    imageUrls?: InsightCatalystCreateimageUrlsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutInsightCatalystsInput
    question?: QuestionCreateNestedOneWithoutInsightCatalystsInput
  }

  export type InsightCatalystUncheckedCreateWithoutNoteInput = {
    id?: number
    type: string
    text: string
    explanation?: string | null
    imageUrls?: InsightCatalystCreateimageUrlsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    questionId?: number | null
  }

  export type InsightCatalystCreateOrConnectWithoutNoteInput = {
    where: InsightCatalystWhereUniqueInput
    create: XOR<InsightCatalystCreateWithoutNoteInput, InsightCatalystUncheckedCreateWithoutNoteInput>
  }

  export type InsightCatalystCreateManyNoteInputEnvelope = {
    data: InsightCatalystCreateManyNoteInput | InsightCatalystCreateManyNoteInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutNotesInput = {
    update: XOR<UserUpdateWithoutNotesInput, UserUncheckedUpdateWithoutNotesInput>
    create: XOR<UserCreateWithoutNotesInput, UserUncheckedCreateWithoutNotesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotesInput, UserUncheckedUpdateWithoutNotesInput>
  }

  export type UserUpdateWithoutNotesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyStudyTimeMinutes?: IntFieldUpdateOperationsInput | number
    folders?: FolderUpdateManyWithoutUserNestedInput
    questionAnswers?: UserQuestionAnswerUpdateManyWithoutUserNestedInput
    studySessions?: UserStudySessionUpdateManyWithoutUserNestedInput
    insightCatalysts?: InsightCatalystUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyStudyTimeMinutes?: IntFieldUpdateOperationsInput | number
    folders?: FolderUncheckedUpdateManyWithoutUserNestedInput
    questionAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutUserNestedInput
    studySessions?: UserStudySessionUncheckedUpdateManyWithoutUserNestedInput
    insightCatalysts?: InsightCatalystUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FolderUpsertWithoutNotesInput = {
    update: XOR<FolderUpdateWithoutNotesInput, FolderUncheckedUpdateWithoutNotesInput>
    create: XOR<FolderCreateWithoutNotesInput, FolderUncheckedCreateWithoutNotesInput>
    where?: FolderWhereInput
  }

  export type FolderUpdateToOneWithWhereWithoutNotesInput = {
    where?: FolderWhereInput
    data: XOR<FolderUpdateWithoutNotesInput, FolderUncheckedUpdateWithoutNotesInput>
  }

  export type FolderUpdateWithoutNotesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    masteryHistory?: FolderUpdatemasteryHistoryInput | InputJsonValue[]
    imageUrls?: FolderUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutFoldersNestedInput
    questionSets?: QuestionSetUpdateManyWithoutFolderNestedInput
    parent?: FolderUpdateOneWithoutChildrenNestedInput
    children?: FolderUpdateManyWithoutParentNestedInput
  }

  export type FolderUncheckedUpdateWithoutNotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    masteryHistory?: FolderUpdatemasteryHistoryInput | InputJsonValue[]
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    imageUrls?: FolderUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    questionSets?: QuestionSetUncheckedUpdateManyWithoutFolderNestedInput
    children?: FolderUncheckedUpdateManyWithoutParentNestedInput
  }

  export type QuestionSetUpsertWithoutNotesInput = {
    update: XOR<QuestionSetUpdateWithoutNotesInput, QuestionSetUncheckedUpdateWithoutNotesInput>
    create: XOR<QuestionSetCreateWithoutNotesInput, QuestionSetUncheckedCreateWithoutNotesInput>
    where?: QuestionSetWhereInput
  }

  export type QuestionSetUpdateToOneWithWhereWithoutNotesInput = {
    where?: QuestionSetWhereInput
    data: XOR<QuestionSetUpdateWithoutNotesInput, QuestionSetUncheckedUpdateWithoutNotesInput>
  }

  export type QuestionSetUpdateWithoutNotesInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentIntervalDays?: NullableFloatFieldUpdateOperationsInput | number | null
    exploreScore?: FloatFieldUpdateOperationsInput | number
    lastReviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewCount?: IntFieldUpdateOperationsInput | number
    understandScore?: FloatFieldUpdateOperationsInput | number
    useScore?: FloatFieldUpdateOperationsInput | number
    currentForgottenPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    currentTotalMasteryScore?: FloatFieldUpdateOperationsInput | number
    currentUUESetStage?: StringFieldUpdateOperationsInput | string
    forgettingCurveParams?: NullableJsonNullValueInput | InputJsonValue
    masteryHistory?: QuestionSetUpdatemasteryHistoryInput | InputJsonValue[]
    source?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    isTracked?: BoolFieldUpdateOperationsInput | boolean
    imageUrls?: QuestionSetUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    questions?: QuestionUpdateManyWithoutQuestionSetNestedInput
    folder?: FolderUpdateOneRequiredWithoutQuestionSetsNestedInput
    userAnswers?: UserQuestionAnswerUpdateManyWithoutQuestionSetNestedInput
  }

  export type QuestionSetUncheckedUpdateWithoutNotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    folderId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentIntervalDays?: NullableFloatFieldUpdateOperationsInput | number | null
    exploreScore?: FloatFieldUpdateOperationsInput | number
    lastReviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewCount?: IntFieldUpdateOperationsInput | number
    understandScore?: FloatFieldUpdateOperationsInput | number
    useScore?: FloatFieldUpdateOperationsInput | number
    currentForgottenPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    currentTotalMasteryScore?: FloatFieldUpdateOperationsInput | number
    currentUUESetStage?: StringFieldUpdateOperationsInput | string
    forgettingCurveParams?: NullableJsonNullValueInput | InputJsonValue
    masteryHistory?: QuestionSetUpdatemasteryHistoryInput | InputJsonValue[]
    source?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    isTracked?: BoolFieldUpdateOperationsInput | boolean
    imageUrls?: QuestionSetUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    questions?: QuestionUncheckedUpdateManyWithoutQuestionSetNestedInput
    userAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutQuestionSetNestedInput
  }

  export type InsightCatalystUpsertWithWhereUniqueWithoutNoteInput = {
    where: InsightCatalystWhereUniqueInput
    update: XOR<InsightCatalystUpdateWithoutNoteInput, InsightCatalystUncheckedUpdateWithoutNoteInput>
    create: XOR<InsightCatalystCreateWithoutNoteInput, InsightCatalystUncheckedCreateWithoutNoteInput>
  }

  export type InsightCatalystUpdateWithWhereUniqueWithoutNoteInput = {
    where: InsightCatalystWhereUniqueInput
    data: XOR<InsightCatalystUpdateWithoutNoteInput, InsightCatalystUncheckedUpdateWithoutNoteInput>
  }

  export type InsightCatalystUpdateManyWithWhereWithoutNoteInput = {
    where: InsightCatalystScalarWhereInput
    data: XOR<InsightCatalystUpdateManyMutationInput, InsightCatalystUncheckedUpdateManyWithoutNoteInput>
  }

  export type UserCreateWithoutInsightCatalystsInput = {
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dailyStudyTimeMinutes?: number
    folders?: FolderCreateNestedManyWithoutUserInput
    questionAnswers?: UserQuestionAnswerCreateNestedManyWithoutUserInput
    studySessions?: UserStudySessionCreateNestedManyWithoutUserInput
    notes?: NoteCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInsightCatalystsInput = {
    id?: number
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dailyStudyTimeMinutes?: number
    folders?: FolderUncheckedCreateNestedManyWithoutUserInput
    questionAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutUserInput
    studySessions?: UserStudySessionUncheckedCreateNestedManyWithoutUserInput
    notes?: NoteUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInsightCatalystsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInsightCatalystsInput, UserUncheckedCreateWithoutInsightCatalystsInput>
  }

  export type NoteCreateWithoutInsightCatalystsInput = {
    title: string
    content: JsonNullValueInput | InputJsonValue
    plainText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutNotesInput
    folder?: FolderCreateNestedOneWithoutNotesInput
    questionSet?: QuestionSetCreateNestedOneWithoutNotesInput
  }

  export type NoteUncheckedCreateWithoutInsightCatalystsInput = {
    id?: number
    title: string
    content: JsonNullValueInput | InputJsonValue
    plainText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    folderId?: number | null
    questionSetId?: number | null
  }

  export type NoteCreateOrConnectWithoutInsightCatalystsInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutInsightCatalystsInput, NoteUncheckedCreateWithoutInsightCatalystsInput>
  }

  export type QuestionCreateWithoutInsightCatalystsInput = {
    answer?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    options?: QuestionCreateoptionsInput | string[]
    questionType: string
    text: string
    conceptTags?: QuestionCreateconceptTagsInput | string[]
    lastAnswerCorrect?: boolean | null
    uueFocus?: string
    totalMarksAvailable?: number
    markingCriteria?: NullableJsonNullValueInput | InputJsonValue
    currentMasteryScore?: number | null
    difficultyScore?: number | null
    timesAnsweredCorrectly?: number
    timesAnsweredIncorrectly?: number
    selfMark?: boolean
    autoMark?: boolean
    aiGenerated?: boolean
    inCat?: string | null
    imageUrls?: QuestionCreateimageUrlsInput | string[]
    questionSet: QuestionSetCreateNestedOneWithoutQuestionsInput
    userAnswers?: UserQuestionAnswerCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutInsightCatalystsInput = {
    id?: number
    answer?: string | null
    questionSetId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    options?: QuestionCreateoptionsInput | string[]
    questionType: string
    text: string
    conceptTags?: QuestionCreateconceptTagsInput | string[]
    lastAnswerCorrect?: boolean | null
    uueFocus?: string
    totalMarksAvailable?: number
    markingCriteria?: NullableJsonNullValueInput | InputJsonValue
    currentMasteryScore?: number | null
    difficultyScore?: number | null
    timesAnsweredCorrectly?: number
    timesAnsweredIncorrectly?: number
    selfMark?: boolean
    autoMark?: boolean
    aiGenerated?: boolean
    inCat?: string | null
    imageUrls?: QuestionCreateimageUrlsInput | string[]
    userAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutInsightCatalystsInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutInsightCatalystsInput, QuestionUncheckedCreateWithoutInsightCatalystsInput>
  }

  export type UserUpsertWithoutInsightCatalystsInput = {
    update: XOR<UserUpdateWithoutInsightCatalystsInput, UserUncheckedUpdateWithoutInsightCatalystsInput>
    create: XOR<UserCreateWithoutInsightCatalystsInput, UserUncheckedCreateWithoutInsightCatalystsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInsightCatalystsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInsightCatalystsInput, UserUncheckedUpdateWithoutInsightCatalystsInput>
  }

  export type UserUpdateWithoutInsightCatalystsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyStudyTimeMinutes?: IntFieldUpdateOperationsInput | number
    folders?: FolderUpdateManyWithoutUserNestedInput
    questionAnswers?: UserQuestionAnswerUpdateManyWithoutUserNestedInput
    studySessions?: UserStudySessionUpdateManyWithoutUserNestedInput
    notes?: NoteUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInsightCatalystsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyStudyTimeMinutes?: IntFieldUpdateOperationsInput | number
    folders?: FolderUncheckedUpdateManyWithoutUserNestedInput
    questionAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutUserNestedInput
    studySessions?: UserStudySessionUncheckedUpdateManyWithoutUserNestedInput
    notes?: NoteUncheckedUpdateManyWithoutUserNestedInput
  }

  export type NoteUpsertWithoutInsightCatalystsInput = {
    update: XOR<NoteUpdateWithoutInsightCatalystsInput, NoteUncheckedUpdateWithoutInsightCatalystsInput>
    create: XOR<NoteCreateWithoutInsightCatalystsInput, NoteUncheckedCreateWithoutInsightCatalystsInput>
    where?: NoteWhereInput
  }

  export type NoteUpdateToOneWithWhereWithoutInsightCatalystsInput = {
    where?: NoteWhereInput
    data: XOR<NoteUpdateWithoutInsightCatalystsInput, NoteUncheckedUpdateWithoutInsightCatalystsInput>
  }

  export type NoteUpdateWithoutInsightCatalystsInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    plainText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotesNestedInput
    folder?: FolderUpdateOneWithoutNotesNestedInput
    questionSet?: QuestionSetUpdateOneWithoutNotesNestedInput
  }

  export type NoteUncheckedUpdateWithoutInsightCatalystsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    plainText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    folderId?: NullableIntFieldUpdateOperationsInput | number | null
    questionSetId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type QuestionUpsertWithoutInsightCatalystsInput = {
    update: XOR<QuestionUpdateWithoutInsightCatalystsInput, QuestionUncheckedUpdateWithoutInsightCatalystsInput>
    create: XOR<QuestionCreateWithoutInsightCatalystsInput, QuestionUncheckedCreateWithoutInsightCatalystsInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutInsightCatalystsInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutInsightCatalystsInput, QuestionUncheckedUpdateWithoutInsightCatalystsInput>
  }

  export type QuestionUpdateWithoutInsightCatalystsInput = {
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: QuestionUpdateoptionsInput | string[]
    questionType?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    conceptTags?: QuestionUpdateconceptTagsInput | string[]
    lastAnswerCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    uueFocus?: StringFieldUpdateOperationsInput | string
    totalMarksAvailable?: IntFieldUpdateOperationsInput | number
    markingCriteria?: NullableJsonNullValueInput | InputJsonValue
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    difficultyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    timesAnsweredCorrectly?: IntFieldUpdateOperationsInput | number
    timesAnsweredIncorrectly?: IntFieldUpdateOperationsInput | number
    selfMark?: BoolFieldUpdateOperationsInput | boolean
    autoMark?: BoolFieldUpdateOperationsInput | boolean
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    inCat?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrls?: QuestionUpdateimageUrlsInput | string[]
    questionSet?: QuestionSetUpdateOneRequiredWithoutQuestionsNestedInput
    userAnswers?: UserQuestionAnswerUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutInsightCatalystsInput = {
    id?: IntFieldUpdateOperationsInput | number
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    questionSetId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: QuestionUpdateoptionsInput | string[]
    questionType?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    conceptTags?: QuestionUpdateconceptTagsInput | string[]
    lastAnswerCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    uueFocus?: StringFieldUpdateOperationsInput | string
    totalMarksAvailable?: IntFieldUpdateOperationsInput | number
    markingCriteria?: NullableJsonNullValueInput | InputJsonValue
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    difficultyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    timesAnsweredCorrectly?: IntFieldUpdateOperationsInput | number
    timesAnsweredIncorrectly?: IntFieldUpdateOperationsInput | number
    selfMark?: BoolFieldUpdateOperationsInput | boolean
    autoMark?: BoolFieldUpdateOperationsInput | boolean
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    inCat?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrls?: QuestionUpdateimageUrlsInput | string[]
    userAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type FolderCreateManyUserInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    currentMasteryScore?: number | null
    masteryHistory?: FolderCreatemasteryHistoryInput | InputJsonValue[]
    parentId?: number | null
    imageUrls?: FolderCreateimageUrlsInput | string[]
    isPinned?: boolean
  }

  export type UserQuestionAnswerCreateManyUserInput = {
    id?: number
    questionId: number
    isCorrect: boolean
    confidence?: number | null
    timeSpent: number
    answeredAt?: Date | string
    scoreAchieved: number
    createdAt?: Date | string
    feedbackFromAI?: string | null
    questionSetId?: number | null
    updatedAt?: Date | string
    userAnswerText?: string | null
    uueFocusTested?: string | null
    userStudySessionId?: number | null
  }

  export type UserStudySessionCreateManyUserInput = {
    id?: number
    sessionStartedAt?: Date | string | null
    sessionEndedAt?: Date | string
    timeSpentSeconds: number
    answeredQuestionsCount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NoteCreateManyUserInput = {
    id?: number
    title: string
    content: JsonNullValueInput | InputJsonValue
    plainText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    folderId?: number | null
    questionSetId?: number | null
  }

  export type InsightCatalystCreateManyUserInput = {
    id?: number
    type: string
    text: string
    explanation?: string | null
    imageUrls?: InsightCatalystCreateimageUrlsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    noteId?: number | null
    questionId?: number | null
  }

  export type FolderUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    masteryHistory?: FolderUpdatemasteryHistoryInput | InputJsonValue[]
    imageUrls?: FolderUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    questionSets?: QuestionSetUpdateManyWithoutFolderNestedInput
    notes?: NoteUpdateManyWithoutFolderNestedInput
    parent?: FolderUpdateOneWithoutChildrenNestedInput
    children?: FolderUpdateManyWithoutParentNestedInput
  }

  export type FolderUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    masteryHistory?: FolderUpdatemasteryHistoryInput | InputJsonValue[]
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    imageUrls?: FolderUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    questionSets?: QuestionSetUncheckedUpdateManyWithoutFolderNestedInput
    notes?: NoteUncheckedUpdateManyWithoutFolderNestedInput
    children?: FolderUncheckedUpdateManyWithoutParentNestedInput
  }

  export type FolderUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    masteryHistory?: FolderUpdatemasteryHistoryInput | InputJsonValue[]
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    imageUrls?: FolderUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserQuestionAnswerUpdateWithoutUserInput = {
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    confidence?: NullableIntFieldUpdateOperationsInput | number | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreAchieved?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackFromAI?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userAnswerText?: NullableStringFieldUpdateOperationsInput | string | null
    uueFocusTested?: NullableStringFieldUpdateOperationsInput | string | null
    question?: QuestionUpdateOneRequiredWithoutUserAnswersNestedInput
    questionSet?: QuestionSetUpdateOneWithoutUserAnswersNestedInput
    studySession?: UserStudySessionUpdateOneWithoutUserQuestionAnswersNestedInput
  }

  export type UserQuestionAnswerUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    confidence?: NullableIntFieldUpdateOperationsInput | number | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreAchieved?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackFromAI?: NullableStringFieldUpdateOperationsInput | string | null
    questionSetId?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userAnswerText?: NullableStringFieldUpdateOperationsInput | string | null
    uueFocusTested?: NullableStringFieldUpdateOperationsInput | string | null
    userStudySessionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserQuestionAnswerUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    confidence?: NullableIntFieldUpdateOperationsInput | number | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreAchieved?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackFromAI?: NullableStringFieldUpdateOperationsInput | string | null
    questionSetId?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userAnswerText?: NullableStringFieldUpdateOperationsInput | string | null
    uueFocusTested?: NullableStringFieldUpdateOperationsInput | string | null
    userStudySessionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserStudySessionUpdateWithoutUserInput = {
    sessionStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessionEndedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeSpentSeconds?: IntFieldUpdateOperationsInput | number
    answeredQuestionsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userQuestionAnswers?: UserQuestionAnswerUpdateManyWithoutStudySessionNestedInput
  }

  export type UserStudySessionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessionEndedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeSpentSeconds?: IntFieldUpdateOperationsInput | number
    answeredQuestionsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userQuestionAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutStudySessionNestedInput
  }

  export type UserStudySessionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessionEndedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeSpentSeconds?: IntFieldUpdateOperationsInput | number
    answeredQuestionsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoteUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    plainText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folder?: FolderUpdateOneWithoutNotesNestedInput
    questionSet?: QuestionSetUpdateOneWithoutNotesNestedInput
    insightCatalysts?: InsightCatalystUpdateManyWithoutNoteNestedInput
  }

  export type NoteUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    plainText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folderId?: NullableIntFieldUpdateOperationsInput | number | null
    questionSetId?: NullableIntFieldUpdateOperationsInput | number | null
    insightCatalysts?: InsightCatalystUncheckedUpdateManyWithoutNoteNestedInput
  }

  export type NoteUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    plainText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folderId?: NullableIntFieldUpdateOperationsInput | number | null
    questionSetId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type InsightCatalystUpdateWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrls?: InsightCatalystUpdateimageUrlsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NoteUpdateOneWithoutInsightCatalystsNestedInput
    question?: QuestionUpdateOneWithoutInsightCatalystsNestedInput
  }

  export type InsightCatalystUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrls?: InsightCatalystUpdateimageUrlsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    noteId?: NullableIntFieldUpdateOperationsInput | number | null
    questionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type InsightCatalystUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrls?: InsightCatalystUpdateimageUrlsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    noteId?: NullableIntFieldUpdateOperationsInput | number | null
    questionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type QuestionSetCreateManyFolderInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    currentIntervalDays?: number | null
    exploreScore?: number
    lastReviewedAt?: Date | string | null
    nextReviewAt?: Date | string | null
    reviewCount?: number
    understandScore?: number
    useScore?: number
    currentForgottenPercentage?: number | null
    currentTotalMasteryScore?: number
    currentUUESetStage?: string
    forgettingCurveParams?: NullableJsonNullValueInput | InputJsonValue
    masteryHistory?: QuestionSetCreatemasteryHistoryInput | InputJsonValue[]
    source?: string | null
    instructions?: string | null
    isTracked?: boolean
    imageUrls?: QuestionSetCreateimageUrlsInput | string[]
    isPinned?: boolean
  }

  export type NoteCreateManyFolderInput = {
    id?: number
    title: string
    content: JsonNullValueInput | InputJsonValue
    plainText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    questionSetId?: number | null
  }

  export type FolderCreateManyParentInput = {
    id?: number
    name: string
    description?: string | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    currentMasteryScore?: number | null
    masteryHistory?: FolderCreatemasteryHistoryInput | InputJsonValue[]
    imageUrls?: FolderCreateimageUrlsInput | string[]
    isPinned?: boolean
  }

  export type QuestionSetUpdateWithoutFolderInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentIntervalDays?: NullableFloatFieldUpdateOperationsInput | number | null
    exploreScore?: FloatFieldUpdateOperationsInput | number
    lastReviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewCount?: IntFieldUpdateOperationsInput | number
    understandScore?: FloatFieldUpdateOperationsInput | number
    useScore?: FloatFieldUpdateOperationsInput | number
    currentForgottenPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    currentTotalMasteryScore?: FloatFieldUpdateOperationsInput | number
    currentUUESetStage?: StringFieldUpdateOperationsInput | string
    forgettingCurveParams?: NullableJsonNullValueInput | InputJsonValue
    masteryHistory?: QuestionSetUpdatemasteryHistoryInput | InputJsonValue[]
    source?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    isTracked?: BoolFieldUpdateOperationsInput | boolean
    imageUrls?: QuestionSetUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    notes?: NoteUpdateManyWithoutQuestionSetNestedInput
    questions?: QuestionUpdateManyWithoutQuestionSetNestedInput
    userAnswers?: UserQuestionAnswerUpdateManyWithoutQuestionSetNestedInput
  }

  export type QuestionSetUncheckedUpdateWithoutFolderInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentIntervalDays?: NullableFloatFieldUpdateOperationsInput | number | null
    exploreScore?: FloatFieldUpdateOperationsInput | number
    lastReviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewCount?: IntFieldUpdateOperationsInput | number
    understandScore?: FloatFieldUpdateOperationsInput | number
    useScore?: FloatFieldUpdateOperationsInput | number
    currentForgottenPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    currentTotalMasteryScore?: FloatFieldUpdateOperationsInput | number
    currentUUESetStage?: StringFieldUpdateOperationsInput | string
    forgettingCurveParams?: NullableJsonNullValueInput | InputJsonValue
    masteryHistory?: QuestionSetUpdatemasteryHistoryInput | InputJsonValue[]
    source?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    isTracked?: BoolFieldUpdateOperationsInput | boolean
    imageUrls?: QuestionSetUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    notes?: NoteUncheckedUpdateManyWithoutQuestionSetNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutQuestionSetNestedInput
    userAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutQuestionSetNestedInput
  }

  export type QuestionSetUncheckedUpdateManyWithoutFolderInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentIntervalDays?: NullableFloatFieldUpdateOperationsInput | number | null
    exploreScore?: FloatFieldUpdateOperationsInput | number
    lastReviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewCount?: IntFieldUpdateOperationsInput | number
    understandScore?: FloatFieldUpdateOperationsInput | number
    useScore?: FloatFieldUpdateOperationsInput | number
    currentForgottenPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    currentTotalMasteryScore?: FloatFieldUpdateOperationsInput | number
    currentUUESetStage?: StringFieldUpdateOperationsInput | string
    forgettingCurveParams?: NullableJsonNullValueInput | InputJsonValue
    masteryHistory?: QuestionSetUpdatemasteryHistoryInput | InputJsonValue[]
    source?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    isTracked?: BoolFieldUpdateOperationsInput | boolean
    imageUrls?: QuestionSetUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NoteUpdateWithoutFolderInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    plainText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotesNestedInput
    questionSet?: QuestionSetUpdateOneWithoutNotesNestedInput
    insightCatalysts?: InsightCatalystUpdateManyWithoutNoteNestedInput
  }

  export type NoteUncheckedUpdateWithoutFolderInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    plainText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    questionSetId?: NullableIntFieldUpdateOperationsInput | number | null
    insightCatalysts?: InsightCatalystUncheckedUpdateManyWithoutNoteNestedInput
  }

  export type NoteUncheckedUpdateManyWithoutFolderInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    plainText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    questionSetId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FolderUpdateWithoutParentInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    masteryHistory?: FolderUpdatemasteryHistoryInput | InputJsonValue[]
    imageUrls?: FolderUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutFoldersNestedInput
    questionSets?: QuestionSetUpdateManyWithoutFolderNestedInput
    notes?: NoteUpdateManyWithoutFolderNestedInput
    children?: FolderUpdateManyWithoutParentNestedInput
  }

  export type FolderUncheckedUpdateWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    masteryHistory?: FolderUpdatemasteryHistoryInput | InputJsonValue[]
    imageUrls?: FolderUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    questionSets?: QuestionSetUncheckedUpdateManyWithoutFolderNestedInput
    notes?: NoteUncheckedUpdateManyWithoutFolderNestedInput
    children?: FolderUncheckedUpdateManyWithoutParentNestedInput
  }

  export type FolderUncheckedUpdateManyWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    masteryHistory?: FolderUpdatemasteryHistoryInput | InputJsonValue[]
    imageUrls?: FolderUpdateimageUrlsInput | string[]
    isPinned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NoteCreateManyQuestionSetInput = {
    id?: number
    title: string
    content: JsonNullValueInput | InputJsonValue
    plainText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    folderId?: number | null
  }

  export type QuestionCreateManyQuestionSetInput = {
    id?: number
    answer?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    options?: QuestionCreateoptionsInput | string[]
    questionType: string
    text: string
    conceptTags?: QuestionCreateconceptTagsInput | string[]
    lastAnswerCorrect?: boolean | null
    uueFocus?: string
    totalMarksAvailable?: number
    markingCriteria?: NullableJsonNullValueInput | InputJsonValue
    currentMasteryScore?: number | null
    difficultyScore?: number | null
    timesAnsweredCorrectly?: number
    timesAnsweredIncorrectly?: number
    selfMark?: boolean
    autoMark?: boolean
    aiGenerated?: boolean
    inCat?: string | null
    imageUrls?: QuestionCreateimageUrlsInput | string[]
  }

  export type UserQuestionAnswerCreateManyQuestionSetInput = {
    id?: number
    userId: number
    questionId: number
    isCorrect: boolean
    confidence?: number | null
    timeSpent: number
    answeredAt?: Date | string
    scoreAchieved: number
    createdAt?: Date | string
    feedbackFromAI?: string | null
    updatedAt?: Date | string
    userAnswerText?: string | null
    uueFocusTested?: string | null
    userStudySessionId?: number | null
  }

  export type NoteUpdateWithoutQuestionSetInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    plainText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotesNestedInput
    folder?: FolderUpdateOneWithoutNotesNestedInput
    insightCatalysts?: InsightCatalystUpdateManyWithoutNoteNestedInput
  }

  export type NoteUncheckedUpdateWithoutQuestionSetInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    plainText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    folderId?: NullableIntFieldUpdateOperationsInput | number | null
    insightCatalysts?: InsightCatalystUncheckedUpdateManyWithoutNoteNestedInput
  }

  export type NoteUncheckedUpdateManyWithoutQuestionSetInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: JsonNullValueInput | InputJsonValue
    plainText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    folderId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type QuestionUpdateWithoutQuestionSetInput = {
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: QuestionUpdateoptionsInput | string[]
    questionType?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    conceptTags?: QuestionUpdateconceptTagsInput | string[]
    lastAnswerCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    uueFocus?: StringFieldUpdateOperationsInput | string
    totalMarksAvailable?: IntFieldUpdateOperationsInput | number
    markingCriteria?: NullableJsonNullValueInput | InputJsonValue
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    difficultyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    timesAnsweredCorrectly?: IntFieldUpdateOperationsInput | number
    timesAnsweredIncorrectly?: IntFieldUpdateOperationsInput | number
    selfMark?: BoolFieldUpdateOperationsInput | boolean
    autoMark?: BoolFieldUpdateOperationsInput | boolean
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    inCat?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrls?: QuestionUpdateimageUrlsInput | string[]
    userAnswers?: UserQuestionAnswerUpdateManyWithoutQuestionNestedInput
    insightCatalysts?: InsightCatalystUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutQuestionSetInput = {
    id?: IntFieldUpdateOperationsInput | number
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: QuestionUpdateoptionsInput | string[]
    questionType?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    conceptTags?: QuestionUpdateconceptTagsInput | string[]
    lastAnswerCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    uueFocus?: StringFieldUpdateOperationsInput | string
    totalMarksAvailable?: IntFieldUpdateOperationsInput | number
    markingCriteria?: NullableJsonNullValueInput | InputJsonValue
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    difficultyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    timesAnsweredCorrectly?: IntFieldUpdateOperationsInput | number
    timesAnsweredIncorrectly?: IntFieldUpdateOperationsInput | number
    selfMark?: BoolFieldUpdateOperationsInput | boolean
    autoMark?: BoolFieldUpdateOperationsInput | boolean
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    inCat?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrls?: QuestionUpdateimageUrlsInput | string[]
    userAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutQuestionNestedInput
    insightCatalysts?: InsightCatalystUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateManyWithoutQuestionSetInput = {
    id?: IntFieldUpdateOperationsInput | number
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: QuestionUpdateoptionsInput | string[]
    questionType?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    conceptTags?: QuestionUpdateconceptTagsInput | string[]
    lastAnswerCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    uueFocus?: StringFieldUpdateOperationsInput | string
    totalMarksAvailable?: IntFieldUpdateOperationsInput | number
    markingCriteria?: NullableJsonNullValueInput | InputJsonValue
    currentMasteryScore?: NullableFloatFieldUpdateOperationsInput | number | null
    difficultyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    timesAnsweredCorrectly?: IntFieldUpdateOperationsInput | number
    timesAnsweredIncorrectly?: IntFieldUpdateOperationsInput | number
    selfMark?: BoolFieldUpdateOperationsInput | boolean
    autoMark?: BoolFieldUpdateOperationsInput | boolean
    aiGenerated?: BoolFieldUpdateOperationsInput | boolean
    inCat?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrls?: QuestionUpdateimageUrlsInput | string[]
  }

  export type UserQuestionAnswerUpdateWithoutQuestionSetInput = {
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    confidence?: NullableIntFieldUpdateOperationsInput | number | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreAchieved?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackFromAI?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userAnswerText?: NullableStringFieldUpdateOperationsInput | string | null
    uueFocusTested?: NullableStringFieldUpdateOperationsInput | string | null
    question?: QuestionUpdateOneRequiredWithoutUserAnswersNestedInput
    user?: UserUpdateOneRequiredWithoutQuestionAnswersNestedInput
    studySession?: UserStudySessionUpdateOneWithoutUserQuestionAnswersNestedInput
  }

  export type UserQuestionAnswerUncheckedUpdateWithoutQuestionSetInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    confidence?: NullableIntFieldUpdateOperationsInput | number | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreAchieved?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackFromAI?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userAnswerText?: NullableStringFieldUpdateOperationsInput | string | null
    uueFocusTested?: NullableStringFieldUpdateOperationsInput | string | null
    userStudySessionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserQuestionAnswerUncheckedUpdateManyWithoutQuestionSetInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    confidence?: NullableIntFieldUpdateOperationsInput | number | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreAchieved?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackFromAI?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userAnswerText?: NullableStringFieldUpdateOperationsInput | string | null
    uueFocusTested?: NullableStringFieldUpdateOperationsInput | string | null
    userStudySessionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserQuestionAnswerCreateManyQuestionInput = {
    id?: number
    userId: number
    isCorrect: boolean
    confidence?: number | null
    timeSpent: number
    answeredAt?: Date | string
    scoreAchieved: number
    createdAt?: Date | string
    feedbackFromAI?: string | null
    questionSetId?: number | null
    updatedAt?: Date | string
    userAnswerText?: string | null
    uueFocusTested?: string | null
    userStudySessionId?: number | null
  }

  export type InsightCatalystCreateManyQuestionInput = {
    id?: number
    type: string
    text: string
    explanation?: string | null
    imageUrls?: InsightCatalystCreateimageUrlsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    noteId?: number | null
  }

  export type UserQuestionAnswerUpdateWithoutQuestionInput = {
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    confidence?: NullableIntFieldUpdateOperationsInput | number | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreAchieved?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackFromAI?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userAnswerText?: NullableStringFieldUpdateOperationsInput | string | null
    uueFocusTested?: NullableStringFieldUpdateOperationsInput | string | null
    questionSet?: QuestionSetUpdateOneWithoutUserAnswersNestedInput
    user?: UserUpdateOneRequiredWithoutQuestionAnswersNestedInput
    studySession?: UserStudySessionUpdateOneWithoutUserQuestionAnswersNestedInput
  }

  export type UserQuestionAnswerUncheckedUpdateWithoutQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    confidence?: NullableIntFieldUpdateOperationsInput | number | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreAchieved?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackFromAI?: NullableStringFieldUpdateOperationsInput | string | null
    questionSetId?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userAnswerText?: NullableStringFieldUpdateOperationsInput | string | null
    uueFocusTested?: NullableStringFieldUpdateOperationsInput | string | null
    userStudySessionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserQuestionAnswerUncheckedUpdateManyWithoutQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    confidence?: NullableIntFieldUpdateOperationsInput | number | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreAchieved?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackFromAI?: NullableStringFieldUpdateOperationsInput | string | null
    questionSetId?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userAnswerText?: NullableStringFieldUpdateOperationsInput | string | null
    uueFocusTested?: NullableStringFieldUpdateOperationsInput | string | null
    userStudySessionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type InsightCatalystUpdateWithoutQuestionInput = {
    type?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrls?: InsightCatalystUpdateimageUrlsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutInsightCatalystsNestedInput
    note?: NoteUpdateOneWithoutInsightCatalystsNestedInput
  }

  export type InsightCatalystUncheckedUpdateWithoutQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrls?: InsightCatalystUpdateimageUrlsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    noteId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type InsightCatalystUncheckedUpdateManyWithoutQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrls?: InsightCatalystUpdateimageUrlsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    noteId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserQuestionAnswerCreateManyStudySessionInput = {
    id?: number
    userId: number
    questionId: number
    isCorrect: boolean
    confidence?: number | null
    timeSpent: number
    answeredAt?: Date | string
    scoreAchieved: number
    createdAt?: Date | string
    feedbackFromAI?: string | null
    questionSetId?: number | null
    updatedAt?: Date | string
    userAnswerText?: string | null
    uueFocusTested?: string | null
  }

  export type UserQuestionAnswerUpdateWithoutStudySessionInput = {
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    confidence?: NullableIntFieldUpdateOperationsInput | number | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreAchieved?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackFromAI?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userAnswerText?: NullableStringFieldUpdateOperationsInput | string | null
    uueFocusTested?: NullableStringFieldUpdateOperationsInput | string | null
    question?: QuestionUpdateOneRequiredWithoutUserAnswersNestedInput
    questionSet?: QuestionSetUpdateOneWithoutUserAnswersNestedInput
    user?: UserUpdateOneRequiredWithoutQuestionAnswersNestedInput
  }

  export type UserQuestionAnswerUncheckedUpdateWithoutStudySessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    confidence?: NullableIntFieldUpdateOperationsInput | number | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreAchieved?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackFromAI?: NullableStringFieldUpdateOperationsInput | string | null
    questionSetId?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userAnswerText?: NullableStringFieldUpdateOperationsInput | string | null
    uueFocusTested?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserQuestionAnswerUncheckedUpdateManyWithoutStudySessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    confidence?: NullableIntFieldUpdateOperationsInput | number | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreAchieved?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackFromAI?: NullableStringFieldUpdateOperationsInput | string | null
    questionSetId?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userAnswerText?: NullableStringFieldUpdateOperationsInput | string | null
    uueFocusTested?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InsightCatalystCreateManyNoteInput = {
    id?: number
    type: string
    text: string
    explanation?: string | null
    imageUrls?: InsightCatalystCreateimageUrlsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    questionId?: number | null
  }

  export type InsightCatalystUpdateWithoutNoteInput = {
    type?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrls?: InsightCatalystUpdateimageUrlsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutInsightCatalystsNestedInput
    question?: QuestionUpdateOneWithoutInsightCatalystsNestedInput
  }

  export type InsightCatalystUncheckedUpdateWithoutNoteInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrls?: InsightCatalystUpdateimageUrlsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    questionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type InsightCatalystUncheckedUpdateManyWithoutNoteInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrls?: InsightCatalystUpdateimageUrlsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    questionId?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}