
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.KnowledgePrimitiveScalarFieldEnum = {
  id: 'id',
  primitiveId: 'primitiveId',
  title: 'title',
  description: 'description',
  primitiveType: 'primitiveType',
  difficultyLevel: 'difficultyLevel',
  estimatedTimeMinutes: 'estimatedTimeMinutes',
  userId: 'userId',
  blueprintId: 'blueprintId',
  trackingIntensity: 'trackingIntensity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  conceptTags: 'conceptTags',
  prerequisiteIds: 'prerequisiteIds',
  relatedConceptIds: 'relatedConceptIds',
  complexityScore: 'complexityScore',
  estimatedPrerequisites: 'estimatedPrerequisites',
  isCoreConcept: 'isCoreConcept'
};

exports.Prisma.MasteryCriterionScalarFieldEnum = {
  id: 'id',
  criterionId: 'criterionId',
  title: 'title',
  description: 'description',
  ueeLevel: 'ueeLevel',
  isRequired: 'isRequired',
  userId: 'userId',
  primitiveId: 'primitiveId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  weight: 'weight'
};

exports.Prisma.UserPrimitiveProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  primitiveId: 'primitiveId',
  blueprintId: 'blueprintId',
  masteryLevel: 'masteryLevel',
  trackingIntensity: 'trackingIntensity',
  lastReviewedAt: 'lastReviewedAt',
  nextReviewAt: 'nextReviewAt',
  reviewCount: 'reviewCount',
  successfulReviews: 'successfulReviews',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserCriterionMasteryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  criterionId: 'criterionId',
  primitiveId: 'primitiveId',
  blueprintId: 'blueprintId',
  isMastered: 'isMastered',
  masteredAt: 'masteredAt',
  lastAttemptedAt: 'lastAttemptedAt',
  attemptCount: 'attemptCount',
  successfulAttempts: 'successfulAttempts',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserQuestionAnswerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  questionSetId: 'questionSetId',
  questionId: 'questionId',
  primitiveId: 'primitiveId',
  blueprintId: 'blueprintId',
  userAnswer: 'userAnswer',
  isCorrect: 'isCorrect',
  marksAwarded: 'marksAwarded',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserStudySessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  questionSetId: 'questionSetId',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  totalQuestions: 'totalQuestions',
  correctAnswers: 'correctAnswers',
  totalMarks: 'totalMarks',
  marksAwarded: 'marksAwarded'
};

exports.Prisma.QuestionSetStudySessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  questionSetId: 'questionSetId',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  totalQuestions: 'totalQuestions',
  correctAnswers: 'correctAnswers',
  totalMarks: 'totalMarks',
  marksAwarded: 'marksAwarded',
  difficultyLevel: 'difficultyLevel',
  masteryScore: 'masteryScore',
  timeSpentMinutes: 'timeSpentMinutes'
};

exports.Prisma.ScheduledReviewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  questionSetId: 'questionSetId',
  primitiveId: 'primitiveId',
  scheduledFor: 'scheduledFor',
  completed: 'completed',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NoteScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  userId: 'userId',
  folderId: 'folderId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  generatedFromBlueprintId: 'generatedFromBlueprintId',
  imageUrls: 'imageUrls',
  isPinned: 'isPinned',
  contentBlocks: 'contentBlocks',
  contentHtml: 'contentHtml',
  plainText: 'plainText',
  contentVersion: 'contentVersion'
};

exports.Prisma.InsightCatalystScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  userId: 'userId',
  noteId: 'noteId',
  primitiveId: 'primitiveId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  questionSetId: 'questionSetId',
  questionText: 'questionText',
  answerText: 'answerText',
  marksAvailable: 'marksAvailable',
  criterionId: 'criterionId'
};

exports.Prisma.QuestionSetScalarFieldEnum = {
  id: 'id',
  title: 'title',
  userId: 'userId',
  folderId: 'folderId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  marksAvailable: 'marksAvailable',
  generatedFromBlueprintId: 'generatedFromBlueprintId',
  imageUrls: 'imageUrls',
  isPinned: 'isPinned',
  isTracked: 'isTracked'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  dailyStudyTimeMinutes: 'dailyStudyTimeMinutes',
  stripeCustomerId: 'stripeCustomerId',
  subscriptionStatus: 'subscriptionStatus',
  subscriptionId: 'subscriptionId',
  plan: 'plan',
  subscriptionEndDate: 'subscriptionEndDate',
  googleId: 'googleId',
  isVerified: 'isVerified'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.FolderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  currentMasteryScore: 'currentMasteryScore',
  masteryHistory: 'masteryHistory',
  parentId: 'parentId',
  imageUrls: 'imageUrls',
  isPinned: 'isPinned'
};

exports.Prisma.LearningBlueprintScalarFieldEnum = {
  id: 'id',
  sourceText: 'sourceText',
  blueprintJson: 'blueprintJson',
  folderId: 'folderId',
  title: 'title',
  description: 'description',
  sourceId: 'sourceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.PinnedReviewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  primitiveId: 'primitiveId',
  reviewAt: 'reviewAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserBucketPreferencesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  criticalSize: 'criticalSize',
  coreSize: 'coreSize',
  plusSize: 'plusSize',
  addMoreIncrement: 'addMoreIncrement',
  maxDailyLimit: 'maxDailyLimit',
  masteryThresholdLevel: 'masteryThresholdLevel',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPrimitiveDailySummaryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  primitiveId: 'primitiveId',
  primitiveTitle: 'primitiveTitle',
  masteryLevel: 'masteryLevel',
  nextReviewAt: 'nextReviewAt',
  totalCriteria: 'totalCriteria',
  masteredCriteria: 'masteredCriteria',
  weightedMasteryScore: 'weightedMasteryScore',
  canProgressToNext: 'canProgressToNext',
  lastCalculated: 'lastCalculated'
};

exports.Prisma.UserMemoryScalarFieldEnum = {
  id: 'id',
  cognitiveApproach: 'cognitiveApproach',
  explanationStyles: 'explanationStyles',
  interactionStyle: 'interactionStyle',
  primaryGoal: 'primaryGoal',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LearningPathScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  pathName: 'pathName',
  description: 'description',
  targetMasteryLevel: 'targetMasteryLevel',
  estimatedDurationDays: 'estimatedDurationDays',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LearningPathStepScalarFieldEnum = {
  id: 'id',
  learningPathId: 'learningPathId',
  primitiveId: 'primitiveId',
  stepOrder: 'stepOrder',
  isCompleted: 'isCompleted',
  completedAt: 'completedAt',
  estimatedTimeMinutes: 'estimatedTimeMinutes'
};

exports.Prisma.UserMemoryInsightScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  insightType: 'insightType',
  title: 'title',
  content: 'content',
  relatedPrimitiveIds: 'relatedPrimitiveIds',
  confidenceScore: 'confidenceScore',
  isActionable: 'isActionable',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserLearningAnalyticsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  date: 'date',
  totalStudyTimeMinutes: 'totalStudyTimeMinutes',
  conceptsReviewed: 'conceptsReviewed',
  conceptsMastered: 'conceptsMastered',
  averageMasteryScore: 'averageMasteryScore',
  learningEfficiency: 'learningEfficiency',
  focusAreas: 'focusAreas',
  achievements: 'achievements'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.TrackingIntensity = exports.$Enums.TrackingIntensity = {
  DENSE: 'DENSE',
  NORMAL: 'NORMAL',
  SPARSE: 'SPARSE'
};

exports.MasteryThresholdLevel = exports.$Enums.MasteryThresholdLevel = {
  SURVEY: 'SURVEY',
  PROFICIENT: 'PROFICIENT',
  EXPERT: 'EXPERT'
};

exports.CognitiveApproach = exports.$Enums.CognitiveApproach = {
  TOP_DOWN: 'TOP_DOWN',
  BOTTOM_UP: 'BOTTOM_UP',
  ADAPTIVE: 'ADAPTIVE'
};

exports.InteractionStyle = exports.$Enums.InteractionStyle = {
  DIRECT: 'DIRECT',
  SOCRATIC: 'SOCRATIC'
};

exports.ExplanationStyle = exports.$Enums.ExplanationStyle = {
  ANALOGY_DRIVEN: 'ANALOGY_DRIVEN',
  PRACTICAL_EXAMPLES: 'PRACTICAL_EXAMPLES',
  TEXTUAL_DETAILED: 'TEXTUAL_DETAILED'
};

exports.Prisma.ModelName = {
  KnowledgePrimitive: 'KnowledgePrimitive',
  MasteryCriterion: 'MasteryCriterion',
  UserPrimitiveProgress: 'UserPrimitiveProgress',
  UserCriterionMastery: 'UserCriterionMastery',
  UserQuestionAnswer: 'UserQuestionAnswer',
  UserStudySession: 'UserStudySession',
  QuestionSetStudySession: 'QuestionSetStudySession',
  ScheduledReview: 'ScheduledReview',
  Note: 'Note',
  InsightCatalyst: 'InsightCatalyst',
  Question: 'Question',
  QuestionSet: 'QuestionSet',
  User: 'User',
  VerificationToken: 'VerificationToken',
  Folder: 'Folder',
  LearningBlueprint: 'LearningBlueprint',
  PinnedReview: 'PinnedReview',
  UserBucketPreferences: 'UserBucketPreferences',
  UserPrimitiveDailySummary: 'UserPrimitiveDailySummary',
  UserMemory: 'UserMemory',
  LearningPath: 'LearningPath',
  LearningPathStep: 'LearningPathStep',
  UserMemoryInsight: 'UserMemoryInsight',
  UserLearningAnalytics: 'UserLearningAnalytics'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
