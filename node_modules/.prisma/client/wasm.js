
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  dailyStudyTimeMinutes: 'dailyStudyTimeMinutes',
  name: 'name',
  plan: 'plan',
  stripeCustomerId: 'stripeCustomerId',
  subscriptionId: 'subscriptionId',
  subscriptionStatus: 'subscriptionStatus',
  subscriptionEndDate: 'subscriptionEndDate',
  learningStyle: 'learningStyle',
  experienceLevel: 'experienceLevel',
  autoAdjustment: 'autoAdjustment',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.LearningBlueprintScalarFieldEnum = {
  id: 'id',
  sourceText: 'sourceText',
  blueprintJson: 'blueprintJson',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  sourceId: 'sourceId',
  description: 'description',
  title: 'title'
};

exports.Prisma.BlueprintSectionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  name: 'name',
  description: 'description',
  blueprintId: 'blueprintId',
  parentSectionId: 'parentSectionId',
  depth: 'depth',
  orderIndex: 'orderIndex',
  difficulty: 'difficulty',
  estimatedTimeMinutes: 'estimatedTimeMinutes',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NoteSectionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  contentBlocks: 'contentBlocks',
  contentHtml: 'contentHtml',
  plainText: 'plainText',
  contentVersion: 'contentVersion',
  blueprintSectionId: 'blueprintSectionId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  generatedFromBlueprintId: 'generatedFromBlueprintId'
};

exports.Prisma.MasteryCriterionScalarFieldEnum = {
  id: 'id',
  criterionId: 'criterionId',
  title: 'title',
  description: 'description',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  weight: 'weight',
  assessmentType: 'assessmentType',
  attemptsAllowed: 'attemptsAllowed',
  blueprintSectionId: 'blueprintSectionId',
  complexityScore: 'complexityScore',
  knowledgePrimitiveId: 'knowledgePrimitiveId',
  masteryThreshold: 'masteryThreshold',
  timeLimit: 'timeLimit',
  uueStage: 'uueStage',
  difficulty: 'difficulty',
  estimatedPrimitiveCount: 'estimatedPrimitiveCount',
  relationshipComplexity: 'relationshipComplexity',
  maxPrimitives: 'maxPrimitives'
};

exports.Prisma.MasteryCriterionPrimitiveScalarFieldEnum = {
  id: 'id',
  criterionId: 'criterionId',
  primitiveId: 'primitiveId',
  relationshipType: 'relationshipType',
  weight: 'weight',
  strength: 'strength',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionInstanceScalarFieldEnum = {
  id: 'id',
  questionText: 'questionText',
  answer: 'answer',
  explanation: 'explanation',
  context: 'context',
  difficulty: 'difficulty',
  masteryCriterionId: 'masteryCriterionId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KnowledgePrimitiveScalarFieldEnum = {
  id: 'id',
  primitiveId: 'primitiveId',
  title: 'title',
  description: 'description',
  primitiveType: 'primitiveType',
  difficultyLevel: 'difficultyLevel',
  estimatedTimeMinutes: 'estimatedTimeMinutes',
  userId: 'userId',
  blueprintId: 'blueprintId',
  trackingIntensity: 'trackingIntensity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  complexityScore: 'complexityScore',
  conceptTags: 'conceptTags',
  estimatedPrerequisites: 'estimatedPrerequisites',
  isCoreConcept: 'isCoreConcept',
  prerequisiteIds: 'prerequisiteIds',
  relatedConceptIds: 'relatedConceptIds',
  blueprintSectionId: 'blueprintSectionId'
};

exports.Prisma.UserCriterionMasteryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  isMastered: 'isMastered',
  blueprintSectionId: 'blueprintSectionId',
  consecutiveFailures: 'consecutiveFailures',
  consecutiveIntervals: 'consecutiveIntervals',
  currentIntervalStep: 'currentIntervalStep',
  lastReviewedAt: 'lastReviewedAt',
  lastThresholdCheckDate: 'lastThresholdCheckDate',
  lastTwoAttempts: 'lastTwoAttempts',
  lastAttempt: 'lastAttempt',
  attempts: 'attempts',
  attemptHistory: 'attemptHistory',
  attemptCount: 'attemptCount',
  successfulAttempts: 'successfulAttempts',
  criterionId: 'criterionId',
  masteredAt: 'masteredAt',
  lastAttemptedAt: 'lastAttemptedAt',
  masteryCriterionId: 'masteryCriterionId',
  masteryScore: 'masteryScore',
  nextReviewAt: 'nextReviewAt',
  reviewCount: 'reviewCount',
  successfulReviews: 'successfulReviews',
  trackingIntensity: 'trackingIntensity',
  uueStage: 'uueStage',
  primitiveId: 'primitiveId',
  blueprintId: 'blueprintId',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserQuestionAnswerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  questionId: 'questionId',
  isCorrect: 'isCorrect',
  createdAt: 'createdAt',
  answerText: 'answerText',
  masteryCriterionId: 'masteryCriterionId',
  timeSpentSeconds: 'timeSpentSeconds',
  primitiveId: 'primitiveId'
};

exports.Prisma.UserPrimitiveProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  lastReviewedAt: 'lastReviewedAt',
  nextReviewAt: 'nextReviewAt',
  currentUeeLevel: 'currentUeeLevel',
  easeFactor: 'easeFactor',
  interval: 'interval',
  lapses: 'lapses',
  reviewCount: 'reviewCount',
  successfulReviews: 'successfulReviews',
  masteryLevel: 'masteryLevel',
  trackingIntensity: 'trackingIntensity',
  primitiveId: 'primitiveId',
  blueprintId: 'blueprintId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserStudySessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  answeredQuestionsCount: 'answeredQuestionsCount',
  createdAt: 'createdAt',
  sessionEndedAt: 'sessionEndedAt',
  sessionStartedAt: 'sessionStartedAt',
  timeSpentSeconds: 'timeSpentSeconds',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionSetStudySessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  questionSetId: 'questionSetId',
  createdAt: 'createdAt',
  sessionId: 'sessionId',
  sessionMarksAchieved: 'sessionMarksAchieved',
  sessionMarksAvailable: 'sessionMarksAvailable',
  srStageBefore: 'srStageBefore'
};

exports.Prisma.InsightCatalystScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  noteId: 'noteId',
  explanation: 'explanation',
  imageUrls: 'imageUrls',
  masteryCriterionId: 'masteryCriterionId',
  questionId: 'questionId',
  text: 'text',
  type: 'type',
  primitiveId: 'primitiveId'
};

exports.Prisma.ScheduledReviewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  questionSetId: 'questionSetId',
  createdAt: 'createdAt',
  reviewDate: 'reviewDate',
  status: 'status',
  type: 'type',
  primitiveId: 'primitiveId'
};

exports.Prisma.PinnedReviewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  reviewAt: 'reviewAt',
  primitiveId: 'primitiveId',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserBucketPreferencesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  bucketSize: 'bucketSize',
  reviewInterval: 'reviewInterval',
  criticalSize: 'criticalSize',
  coreSize: 'coreSize',
  plusSize: 'plusSize',
  masteryThresholdLevel: 'masteryThresholdLevel'
};

exports.Prisma.UserPrimitiveDailySummaryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  date: 'date',
  summary: 'summary',
  primitiveId: 'primitiveId',
  weightedMasteryScore: 'weightedMasteryScore',
  masteryLevel: 'masteryLevel',
  canProgressToNext: 'canProgressToNext',
  nextReviewAt: 'nextReviewAt',
  primitiveTitle: 'primitiveTitle',
  totalCriteria: 'totalCriteria',
  masteredCriteria: 'masteredCriteria',
  lastCalculated: 'lastCalculated'
};

exports.Prisma.UserLearningAnalyticsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  date: 'date',
  totalStudyTimeMinutes: 'totalStudyTimeMinutes',
  conceptsReviewed: 'conceptsReviewed',
  conceptsMastered: 'conceptsMastered',
  averageMasteryScore: 'averageMasteryScore',
  learningEfficiency: 'learningEfficiency',
  focusAreas: 'focusAreas',
  achievements: 'achievements'
};

exports.Prisma.UserMemoryInsightScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  insightType: 'insightType',
  title: 'title',
  content: 'content',
  relatedPrimitiveIds: 'relatedPrimitiveIds',
  confidenceScore: 'confidenceScore',
  isActionable: 'isActionable',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LearningPathScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  pathName: 'pathName',
  description: 'description',
  targetMasteryLevel: 'targetMasteryLevel',
  estimatedDurationDays: 'estimatedDurationDays',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LearningPathStepScalarFieldEnum = {
  id: 'id',
  learningPathId: 'learningPathId',
  primitiveId: 'primitiveId',
  stepOrder: 'stepOrder',
  isCompleted: 'isCompleted',
  completedAt: 'completedAt',
  estimatedTimeMinutes: 'estimatedTimeMinutes'
};

exports.Prisma.KnowledgeRelationshipScalarFieldEnum = {
  id: 'id',
  sourcePrimitiveId: 'sourcePrimitiveId',
  targetPrimitiveId: 'targetPrimitiveId',
  relationshipType: 'relationshipType',
  strength: 'strength',
  confidence: 'confidence',
  source: 'source',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MasteryCriterionRelationshipScalarFieldEnum = {
  id: 'id',
  sourceCriterionId: 'sourceCriterionId',
  targetCriterionId: 'targetCriterionId',
  relationshipType: 'relationshipType',
  strength: 'strength',
  confidence: 'confidence',
  source: 'source',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  questionSetId: 'questionSetId',
  totalMarksAvailable: 'totalMarksAvailable',
  aiGenerated: 'aiGenerated',
  answer: 'answer',
  autoMark: 'autoMark',
  conceptTags: 'conceptTags',
  createdAt: 'createdAt',
  currentMasteryScore: 'currentMasteryScore',
  difficultyScore: 'difficultyScore',
  imageUrls: 'imageUrls',
  inCat: 'inCat',
  lastAnswerCorrect: 'lastAnswerCorrect',
  markingCriteria: 'markingCriteria',
  masteryCriterionId: 'masteryCriterionId',
  options: 'options',
  questionType: 'questionType',
  selfMark: 'selfMark',
  text: 'text',
  timesAnsweredCorrectly: 'timesAnsweredCorrectly',
  timesAnsweredIncorrectly: 'timesAnsweredIncorrectly',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionSetScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isPinned: 'isPinned',
  isTracked: 'isTracked',
  generatedFromBlueprintId: 'generatedFromBlueprintId',
  instructions: 'instructions',
  name: 'name'
};

exports.Prisma.UserMemoryScalarFieldEnum = {
  id: 'id',
  primaryGoal: 'primaryGoal',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  cognitiveApproach: 'cognitiveApproach',
  explanationStyles: 'explanationStyles',
  interactionStyle: 'interactionStyle'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  createdAt: 'createdAt',
  expires: 'expires'
};

exports.Prisma.UserPreferencesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  learningStyle: 'learningStyle',
  experienceLevel: 'experienceLevel',
  autoAdjustment: 'autoAdjustment',
  lastUpdated: 'lastUpdated',
  masteryOptions: 'masteryOptions'
};

exports.Prisma.UserSectionPreferencesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sectionId: 'sectionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  difficulty: 'difficulty',
  timeAllocation: 'timeAllocation',
  masteryOptions: 'masteryOptions'
};

exports.Prisma.UserCriterionPreferencesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  criterionId: 'criterionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  difficulty: 'difficulty',
  timeAllocation: 'timeAllocation',
  masteryOptions: 'masteryOptions'
};

exports.Prisma.UserFeedbackScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  feedback: 'feedback',
  rating: 'rating',
  criterionId: 'criterionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.DifficultyLevel = exports.$Enums.DifficultyLevel = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED'
};

exports.AssessmentType = exports.$Enums.AssessmentType = {
  QUESTION_BASED: 'QUESTION_BASED',
  EXPLANATION_BASED: 'EXPLANATION_BASED',
  APPLICATION_BASED: 'APPLICATION_BASED',
  COMPARISON_BASED: 'COMPARISON_BASED',
  CREATION_BASED: 'CREATION_BASED'
};

exports.UueStage = exports.$Enums.UueStage = {
  UNDERSTAND: 'UNDERSTAND',
  USE: 'USE',
  EXPLORE: 'EXPLORE'
};

exports.PrimitiveRelationshipType = exports.$Enums.PrimitiveRelationshipType = {
  PRIMARY: 'PRIMARY',
  SECONDARY: 'SECONDARY',
  CONTEXTUAL: 'CONTEXTUAL'
};

exports.QuestionDifficulty = exports.$Enums.QuestionDifficulty = {
  EASY: 'EASY',
  MEDIUM: 'MEDIUM',
  HARD: 'HARD'
};

exports.TrackingIntensity = exports.$Enums.TrackingIntensity = {
  DENSE: 'DENSE',
  NORMAL: 'NORMAL',
  SPARSE: 'SPARSE'
};

exports.RelationshipType = exports.$Enums.RelationshipType = {
  PREREQUISITE: 'PREREQUISITE',
  RELATED: 'RELATED',
  SIMILAR: 'SIMILAR',
  ADVANCES_TO: 'ADVANCES_TO',
  DEMONSTRATES: 'DEMONSTRATES',
  CONTRADICTS: 'CONTRADICTS',
  SYNONYMOUS: 'SYNONYMOUS',
  PART_OF: 'PART_OF'
};

exports.RelationshipSource = exports.$Enums.RelationshipSource = {
  AI_GENERATED: 'AI_GENERATED',
  USER_CREATED: 'USER_CREATED',
  EXPERT_VERIFIED: 'EXPERT_VERIFIED',
  SYSTEM_INFERRED: 'SYSTEM_INFERRED'
};

exports.CriterionRelationshipType = exports.$Enums.CriterionRelationshipType = {
  PREREQUISITE: 'PREREQUISITE',
  ADVANCES_TO: 'ADVANCES_TO',
  RELATED: 'RELATED',
  SIMILAR: 'SIMILAR',
  PART_OF: 'PART_OF',
  DEMONSTRATES: 'DEMONSTRATES',
  SYNONYMOUS: 'SYNONYMOUS'
};

exports.CognitiveApproach = exports.$Enums.CognitiveApproach = {
  TOP_DOWN: 'TOP_DOWN',
  BOTTOM_UP: 'BOTTOM_UP',
  ADAPTIVE: 'ADAPTIVE'
};

exports.InteractionStyle = exports.$Enums.InteractionStyle = {
  DIRECT: 'DIRECT',
  SOCRATIC: 'SOCRATIC'
};

exports.ExplanationStyle = exports.$Enums.ExplanationStyle = {
  ANALOGY_DRIVEN: 'ANALOGY_DRIVEN',
  PRACTICAL_EXAMPLES: 'PRACTICAL_EXAMPLES',
  TEXTUAL_DETAILED: 'TEXTUAL_DETAILED'
};

exports.Prisma.ModelName = {
  User: 'User',
  LearningBlueprint: 'LearningBlueprint',
  BlueprintSection: 'BlueprintSection',
  NoteSection: 'NoteSection',
  MasteryCriterion: 'MasteryCriterion',
  MasteryCriterionPrimitive: 'MasteryCriterionPrimitive',
  QuestionInstance: 'QuestionInstance',
  KnowledgePrimitive: 'KnowledgePrimitive',
  UserCriterionMastery: 'UserCriterionMastery',
  UserQuestionAnswer: 'UserQuestionAnswer',
  UserPrimitiveProgress: 'UserPrimitiveProgress',
  UserStudySession: 'UserStudySession',
  QuestionSetStudySession: 'QuestionSetStudySession',
  InsightCatalyst: 'InsightCatalyst',
  ScheduledReview: 'ScheduledReview',
  PinnedReview: 'PinnedReview',
  UserBucketPreferences: 'UserBucketPreferences',
  UserPrimitiveDailySummary: 'UserPrimitiveDailySummary',
  UserLearningAnalytics: 'UserLearningAnalytics',
  UserMemoryInsight: 'UserMemoryInsight',
  LearningPath: 'LearningPath',
  LearningPathStep: 'LearningPathStep',
  KnowledgeRelationship: 'KnowledgeRelationship',
  MasteryCriterionRelationship: 'MasteryCriterionRelationship',
  Question: 'Question',
  QuestionSet: 'QuestionSet',
  UserMemory: 'UserMemory',
  VerificationToken: 'VerificationToken',
  UserPreferences: 'UserPreferences',
  UserSectionPreferences: 'UserSectionPreferences',
  UserCriterionPreferences: 'UserCriterionPreferences',
  UserFeedback: 'UserFeedback'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
