generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for UserMemory
enum CognitiveApproach {
  TOP_DOWN
  BOTTOM_UP
  ADAPTIVE
}

enum ExplanationStyle {
  ANALOGY_DRIVEN
  PRACTICAL_EXAMPLES
  TEXTUAL_DETAILED
}

enum InteractionStyle {
  DIRECT
  SOCRATIC
}

model UserMemory {
  id                Int                @id @default(autoincrement())
  cognitiveApproach CognitiveApproach?
  explanationStyles ExplanationStyle[]
  interactionStyle  InteractionStyle?
  primaryGoal       String?
  userId            Int                @unique
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([userId])
}

model User {
  id                       Int                       @id @default(autoincrement())
  email                    String                    @unique
  password                 String
  name                     String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  dailyStudyTimeMinutes    Int                       @default(0)
  folders                  Folder[]
  questionAnswers          UserQuestionAnswer[]
  studySessions            UserStudySession[]
  questionSetStudySessions QuestionSetStudySession[]
  notes                    Note[]
  insightCatalysts         InsightCatalyst[]
  scheduledReviews         ScheduledReview[]
  userMemory               UserMemory?

  @@index([email])
}

model Folder {
  id                  Int           @id @default(autoincrement())
  name                String
  description         String?
  userId              Int
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  currentMasteryScore Float?
  masteryHistory      Json[]
  parentId            Int?
  imageUrls           String[]
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionSets        QuestionSet[]
  notes               Note[]
  parent              Folder?       @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children            Folder[]      @relation("FolderHierarchy")
  isPinned            Boolean       @default(false)

  @@index([userId])
  @@index([parentId])
}

model QuestionSet {
  id                         Int                       @id @default(autoincrement())
  name                       String
  createdAt                  DateTime                  @default(now())
  updatedAt                  DateTime                  @updatedAt
  currentIntervalDays        Float?
  exploreScore               Float                     @default(0)
  lastReviewedAt             DateTime?
  nextReviewAt               DateTime?
  reviewCount                Int                       @default(0)
  understandScore            Float                     @default(0)
  useScore                   Float                     @default(0)
  currentForgottenPercentage Float?
  currentTotalMasteryScore   Float                     @default(0)
  currentUUESetStage         String                    @default("Explore")
  forgettingCurveParams      Json?
  masteryHistory             Json[]
  source                     String?
  instructions               String?
  isTracked                  Boolean                   @default(true)
  isPinned                   Boolean                   @default(false)
  folderId                   Int?
  folder                     Folder?                   @relation(fields: [folderId], references: [id], onDelete: SetNull)
  questions                  Question[]
  notes                      Note[]
  userAnswers                UserQuestionAnswer[]
  scheduledReviews           ScheduledReview[]
  questionSetStudySessions   QuestionSetStudySession[]

  // New fields for adaptive SR
  srStage      Int    @default(0)
  easeFactor   Float  @default(2.5)
  lapses       Int    @default(0)
  trackingMode String @default("AUTO")

  @@index([folderId])
}

model Question {
  id                       Int                       @id @default(autoincrement())
  answer                   String?
  questionSetId            Int
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  options                  String[]
  questionType             String
  text                     String
  conceptTags              String[]
  lastAnswerCorrect        Boolean?
  uueFocus                 String                    @default("Understand")
  totalMarksAvailable      Int                       @default(1) @map("marksAvailable")
  markingCriteria          Json?
  currentMasteryScore      Float?
  difficultyScore          Float?
  timesAnsweredCorrectly   Int                       @default(0)
  timesAnsweredIncorrectly Int                       @default(0)
  selfMark                 Boolean                   @default(false)
  autoMark                 Boolean                   @default(false)
  aiGenerated              Boolean                   @default(false)
  inCat                    String?
  imageUrls                String[]
  questionSet              QuestionSet               @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
  userAnswers              UserQuestionAnswer[]
  insightCatalysts         InsightCatalyst[]
  questionSetStudySessions QuestionSetStudySession[]

  @@index([questionSetId])
  @@index([uueFocus])
}

model UserQuestionAnswer {
  id                        Int                      @id @default(autoincrement())
  userId                    Int
  questionId                Int
  isCorrect                 Boolean
  confidence                Int?
  timeSpent                 Int
  answeredAt                DateTime                 @default(now())
  userAnswerText            String?
  scoreAchieved             Int
  questionSetId             Int?
  user                      User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question                  Question                 @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionSet               QuestionSet?             @relation(fields: [questionSetId], references: [id])
  questionSetStudySessionId Int?
  questionSetStudySession   QuestionSetStudySession? @relation(fields: [questionSetStudySessionId], references: [id])

  @@index([userId])
  @@index([questionId])
  @@index([questionSetId])
  @@index([answeredAt])
  @@index([questionSetStudySessionId])
}

model UserStudySession {
  id                     Int       @id @default(autoincrement())
  userId                 Int
  sessionStartedAt       DateTime?
  sessionEndedAt         DateTime  @default(now())
  timeSpentSeconds       Int
  answeredQuestionsCount Int
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @default(now()) @updatedAt

  questionSetStudySessions QuestionSetStudySession[]
  user                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionEndedAt])
}

model QuestionSetStudySession {
  id            Int              @id @default(autoincrement())
  userId        Int
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId     Int
  session       UserStudySession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  questionSetId Int
  questionSet   QuestionSet      @relation(fields: [questionSetId], references: [id], onDelete: Cascade)

  // Session-specific performance snapshot
  sessionMarksAchieved  Int // Sum of marks achieved for questions from this set in this session
  sessionMarksAvailable Int // Sum of marks available for questions from this set in this session
  questionsAnswered     Question[] // Direct references to questions answered in this session
  userQuestionAnswers   UserQuestionAnswer[] // The specific answers given in this session for this set

  srStageBefore Int // The SR stage of the QuestionSet before this session
  createdAt     DateTime @default(now())

  @@unique([sessionId, questionSetId])
  @@index([userId])
  @@index([questionSetId])
}

model Note {
  id               Int               @id @default(autoincrement())
  title            String
  content          Json
  plainText        String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userId           Int
  folderId         Int?
  questionSetId    Int?
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder           Folder?           @relation(fields: [folderId], references: [id], onDelete: SetNull)
  questionSet      QuestionSet?      @relation(fields: [questionSetId], references: [id], onDelete: SetNull)
  insightCatalysts InsightCatalyst[]

  @@index([userId])
  @@index([folderId])
  @@index([questionSetId])
}

model InsightCatalyst {
  id          Int       @id @default(autoincrement())
  type        String
  text        String
  explanation String?
  imageUrls   String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int
  noteId      Int?
  questionId  Int?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  note        Note?     @relation(fields: [noteId], references: [id], onDelete: SetNull)
  question    Question? @relation(fields: [questionId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([noteId])
  @@index([questionId])
}

// New model for scheduled reviews
model ScheduledReview {
  id            Int         @id @default(autoincrement())
  reviewDate    DateTime
  type          String // "AUTO" or "MANUAL"
  status        String      @default("PENDING") // "PENDING" or "COMPLETED"
  userId        Int
  questionSetId Int
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionSet   QuestionSet @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())

  @@index([userId, reviewDate])
}
