generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                  @id @default(autoincrement())
  email                 String               @unique
  password              String
  name                  String?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  dailyStudyTimeMinutes Int                  @default(0)
  folders               Folder[]
  questionAnswers       UserQuestionAnswer[]
  studySessions         UserStudySession[]
  notes                 Note[]
  insightCatalysts      InsightCatalyst[]
  scheduledReviews      ScheduledReview[]

  @@index([email])
}

model Folder {
  id                  Int           @id @default(autoincrement())
  name                String
  description         String?
  userId              Int
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  currentMasteryScore Float?
  masteryHistory      Json[]
  parentId            Int?
  imageUrls           String[]
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionSets        QuestionSet[]
  notes               Note[]
  parent              Folder?       @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children            Folder[]      @relation("FolderHierarchy")
  isPinned            Boolean       @default(false)

  @@index([userId])
  @@index([parentId])
}

model QuestionSet {
  id                         Int                  @id @default(autoincrement())
  name                       String
  createdAt                  DateTime             @default(now())
  updatedAt                  DateTime             @updatedAt
  currentIntervalDays        Float?
  exploreScore               Float                @default(0)
  lastReviewedAt             DateTime?
  nextReviewAt               DateTime?
  reviewCount                Int                  @default(0)
  understandScore            Float                @default(0)
  useScore                   Float                @default(0)
  currentForgottenPercentage Float?
  currentTotalMasteryScore   Float                @default(0)
  currentUUESetStage         String               @default("Explore")
  forgettingCurveParams      Json?
  masteryHistory             Json[]
  source                     String?
  instructions               String?
  isTracked                  Boolean              @default(true)
  folderId                   Int?
  folder                     Folder?              @relation(fields: [folderId], references: [id], onDelete: SetNull)
  questions                  Question[]
  notes                      Note[]
  userAnswers                UserQuestionAnswer[]
  scheduledReviews           ScheduledReview[]

  // New fields for adaptive SR
  srStage      Int    @default(0)
  easeFactor   Float  @default(2.5)
  lapses       Int    @default(0)
  trackingMode String @default("AUTO")

  @@index([folderId])
}

model Question {
  id                       Int                  @id @default(autoincrement())
  answer                   String?
  questionSetId            Int
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  options                  String[]
  questionType             String
  text                     String
  conceptTags              String[]
  lastAnswerCorrect        Boolean?
  uueFocus                 String               @default("Understand")
  totalMarksAvailable      Int                  @default(1) @map("marksAvailable")
  markingCriteria          Json?
  currentMasteryScore      Float?
  difficultyScore          Float?
  timesAnsweredCorrectly   Int                  @default(0)
  timesAnsweredIncorrectly Int                  @default(0)
  selfMark                 Boolean              @default(false)
  autoMark                 Boolean              @default(false)
  aiGenerated              Boolean              @default(false)
  inCat                    String?
  imageUrls                String[]
  questionSet              QuestionSet          @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
  userAnswers              UserQuestionAnswer[]
  insightCatalysts         InsightCatalyst[]

  @@index([questionSetId])
  @@index([uueFocus])
}

model UserQuestionAnswer {
  id                 Int               @id @default(autoincrement())
  userId             Int
  questionId         Int
  isCorrect          Boolean
  confidence         Int?
  timeSpent          Int
  answeredAt         DateTime          @default(now())
  scoreAchieved      Float
  createdAt          DateTime          @default(now())
  feedbackFromAI     String?
  questionSetId      Int?
  updatedAt          DateTime          @default(now()) @updatedAt
  userAnswerText     String?
  uueFocusTested     String?
  userStudySessionId Int?
  question           Question          @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionSet        QuestionSet?      @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  studySession       UserStudySession? @relation(fields: [userStudySessionId], references: [id])

  @@index([userId])
  @@index([questionId])
  @@index([questionSetId])
  @@index([answeredAt])
  @@index([userStudySessionId])
}

model UserStudySession {
  id                     Int                  @id @default(autoincrement())
  userId                 Int
  sessionStartedAt       DateTime?
  sessionEndedAt         DateTime             @default(now())
  timeSpentSeconds       Int
  answeredQuestionsCount Int
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @default(now()) @updatedAt
  userQuestionAnswers    UserQuestionAnswer[]
  user                   User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionEndedAt])
}

model Note {
  id               Int               @id @default(autoincrement())
  title            String
  content          Json
  plainText        String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userId           Int
  folderId         Int?
  questionSetId    Int?
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder           Folder?           @relation(fields: [folderId], references: [id], onDelete: SetNull)
  questionSet      QuestionSet?      @relation(fields: [questionSetId], references: [id], onDelete: SetNull)
  insightCatalysts InsightCatalyst[]

  @@index([userId])
  @@index([folderId])
  @@index([questionSetId])
}

model InsightCatalyst {
  id          Int       @id @default(autoincrement())
  type        String
  text        String
  explanation String?
  imageUrls   String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int
  noteId      Int?
  questionId  Int?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  note        Note?     @relation(fields: [noteId], references: [id], onDelete: SetNull)
  question    Question? @relation(fields: [questionId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([noteId])
  @@index([questionId])
}

// New model for scheduled reviews
model ScheduledReview {
  id            Int         @id @default(autoincrement())
  reviewDate    DateTime
  type          String // "AUTO" or "MANUAL"
  status        String      @default("PENDING") // "PENDING" or "COMPLETED"
  userId        Int
  questionSetId Int
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionSet   QuestionSet @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())

  @@index([userId, reviewDate])
}
