generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          Int                         @id @default(autoincrement())
  email                       String                      @unique
  password                    String
  createdAt                   DateTime                    @default(now())
  updatedAt                   DateTime                    @updatedAt
  dailyStudyTimeMinutes       Int                         @default(0)
  name                        String?
  plan                        String                      @default("free")
  stripeCustomerId            String?                     @unique
  subscriptionId              String?                     @unique
  subscriptionStatus          String?
  subscriptionEndDate         DateTime?
  learningStyle               String                      @default("VISUAL")
  experienceLevel             String                      @default("BEGINNER")
  autoAdjustment              Boolean                     @default(true)
  lastUpdated                 DateTime                    @default(now())
  blueprintSections           BlueprintSection[]
  insightCatalysts            InsightCatalyst[]
  knowledgePrimitives         KnowledgePrimitive[]
  learningBlueprints          LearningBlueprint[]
  learningPaths               LearningPath[]
  masteryCriteria             MasteryCriterion[]
  noteSections                NoteSection[]
  pinnedReviews               PinnedReview[]
  questionInstances           QuestionInstance[]
  questionSetStudySessions    QuestionSetStudySession[]
  scheduledReviews            ScheduledReview[]
  userBucketPreferences       UserBucketPreferences?
  userCriterionMasteries      UserCriterionMastery[]
  userLearningAnalytics       UserLearningAnalytics[]
  userMemory                  UserMemory?
  userMemoryInsights          UserMemoryInsight[]
  userPrimitiveDailySummaries UserPrimitiveDailySummary[]
  userPrimitiveProgresses     UserPrimitiveProgress[]
  userQuestionAnswers         UserQuestionAnswer[]
  userStudySessions           UserStudySession[]
  verificationTokens          VerificationToken[]
  userPreferences             UserPreferences?
  userSectionPreferences      UserSectionPreferences[]
  userCriterionPreferences    UserCriterionPreferences[]
  userFeedback                UserFeedback[]

  @@index([email])
}

model LearningBlueprint {
  id                      Int                     @id @default(autoincrement())
  sourceText              String
  blueprintJson           Json
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  userId                  Int
  sourceId                String?
  description             String?
  title                   String?
  blueprintSections       BlueprintSection[]
  knowledgePrimitives     KnowledgePrimitive[]
  generatedNotes          NoteSection[]
  user                    User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  generatedQuestionSets   QuestionSet[]
  userPrimitiveProgresses UserPrimitiveProgress[]

  @@index([userId])
}

model BlueprintSection {
  id                     Int                      @id @default(autoincrement())
  title                  String
  name                   String
  description            String?
  blueprintId            Int
  parentSectionId        Int?
  depth                  Int                      @default(0)
  orderIndex             Int                      @default(0)
  difficulty             DifficultyLevel          @default(BEGINNER)
  estimatedTimeMinutes   Int?
  userId                 Int
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  blueprint              LearningBlueprint        @relation(fields: [blueprintId], references: [id], onDelete: Cascade)
  parent                 BlueprintSection?        @relation("SectionHierarchy", fields: [parentSectionId], references: [id])
  children               BlueprintSection[]       @relation("SectionHierarchy")
  user                   User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  knowledgePrimitives    KnowledgePrimitive[]
  masteryCriteria        MasteryCriterion[]
  notes                  NoteSection[]
  userCriterionMasteries UserCriterionMastery[]
  userSectionPreferences UserSectionPreferences[]

  @@unique([blueprintId, parentSectionId, orderIndex])
  @@index([blueprintId])
  @@index([parentSectionId])
  @@index([userId])
  @@index([depth])
}

model NoteSection {
  id                       Int                @id @default(autoincrement())
  title                    String
  content                  String
  contentBlocks            Json?
  contentHtml              String?
  plainText                String?
  contentVersion           Int                @default(2)
  blueprintSectionId       Int
  userId                   Int
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  insightCatalysts         InsightCatalyst[]
  blueprintSection         BlueprintSection   @relation(fields: [blueprintSectionId], references: [id], onDelete: Cascade)
  generatedFromBlueprint   LearningBlueprint? @relation(fields: [generatedFromBlueprintId], references: [id])
  generatedFromBlueprintId Int?
  user                     User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([blueprintSectionId])
  @@index([userId])
  @@index([createdAt])
}

model MasteryCriterion {
  id          Int @id @default(autoincrement())
  criterionId Int @default(autoincrement())

  title                   String
  description             String?
  userId                  Int
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  weight                  Float             @default(1.0)
  assessmentType          AssessmentType    @default(QUESTION_BASED)
  attemptsAllowed         Int               @default(3)
  blueprintSectionId      Int
  complexityScore         Float?
  knowledgePrimitiveId    String
  masteryThreshold        Float             @default(0.8)
  timeLimit               Int?
  uueStage                UueStage          @default(UNDERSTAND)
  difficulty              Float             @default(0.5)
  estimatedPrimitiveCount Int               @default(1)
  relationshipComplexity  Float             @default(1.0)
  maxPrimitives           Int               @default(10)
  insightCatalysts        InsightCatalyst[]
  blueprintSection        BlueprintSection  @relation(fields: [blueprintSectionId], references: [id], onDelete: Cascade)

  knowledgePrimitive KnowledgePrimitive @relation(fields: [knowledgePrimitiveId], references: [primitiveId], onDelete: Cascade)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  prerequisiteFor MasteryCriterionRelationship[] @relation("CriterionPrerequisiteFor")

  requiresPrerequisites MasteryCriterionRelationship[] @relation("CriterionRequiresPrerequisites")

  questions                Question[]
  questionInstances        QuestionInstance[]
  userCriterionMasteries   UserCriterionMastery[]
  userQuestionAnswers      UserQuestionAnswer[]
  primitiveRelationships   MasteryCriterionPrimitive[]
  userCriterionPreferences UserCriterionPreferences[]
  userFeedback             UserFeedback[]

  @@index([knowledgePrimitiveId])
  @@index([blueprintSectionId])
  @@index([userId])
  @@index([uueStage])
  @@index([weight])
  @@index([complexityScore])
}

// New junction table for multi-primitive mastery criteria
model MasteryCriterionPrimitive {
  id               Int                       @id @default(autoincrement())
  criterionId      Int
  primitiveId      String
  relationshipType PrimitiveRelationshipType @default(PRIMARY)
  weight           Float                     @default(1.0)
  strength         Float                     @default(0.8)
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt

  masteryCriterion   MasteryCriterion   @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  knowledgePrimitive KnowledgePrimitive @relation(fields: [primitiveId], references: [primitiveId], onDelete: Cascade)

  @@unique([criterionId, primitiveId])
  @@index([criterionId])
  @@index([primitiveId])
  @@index([relationshipType])
}

model QuestionInstance {
  id                 Int                  @id @default(autoincrement())
  questionText       String
  answer             String
  explanation        String?
  context            String?
  difficulty         QuestionDifficulty   @default(MEDIUM)
  masteryCriterionId Int
  userId             Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  masteryCriterion   MasteryCriterion     @relation(fields: [masteryCriterionId], references: [id], onDelete: Cascade)
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAnswers        UserQuestionAnswer[]

  @@index([masteryCriterionId])
  @@index([userId])
  @@index([difficulty])
}

model KnowledgePrimitive {
  id                                   Int                         @id @default(autoincrement())
  primitiveId                          String                      @unique
  title                                String
  description                          String?
  primitiveType                        String
  difficultyLevel                      String
  estimatedTimeMinutes                 Int?
  userId                               Int
  blueprintId                          Int
  trackingIntensity                    TrackingIntensity           @default(NORMAL)
  createdAt                            DateTime                    @default(now())
  updatedAt                            DateTime                    @updatedAt
  complexityScore                      Float?
  conceptTags                          String[]                    @default([])
  estimatedPrerequisites               Int?
  isCoreConcept                        Boolean                     @default(false)
  prerequisiteIds                      String[]                    @default([])
  relatedConceptIds                    String[]                    @default([])
  blueprintSectionId                   Int?
  insightCatalysts                     InsightCatalyst[]
  blueprint                            LearningBlueprint           @relation(fields: [blueprintId], references: [id], onDelete: Cascade)
  blueprintSection                     BlueprintSection?           @relation(fields: [blueprintSectionId], references: [id])
  user                                 User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  prerequisiteForRelations             KnowledgeRelationship[]     @relation("PrerequisiteFor")
  requiresPrerequisites                KnowledgeRelationship[]     @relation("RequiresPrerequisites")
  learningPathSteps                    LearningPathStep[]
  masteryCriteria                      MasteryCriterion[]
  pinnedReviews                        PinnedReview[]
  scheduledReviews                     ScheduledReview[]
  dailySummaries                       UserPrimitiveDailySummary[]
  userPrimitiveProgresses              UserPrimitiveProgress[]
  userQuestionAnswers                  UserQuestionAnswer[]
  KnowledgePrimitive_Prerequisites_A   KnowledgePrimitive[]        @relation("Prerequisites")
  KnowledgePrimitive_Prerequisites_B   KnowledgePrimitive[]        @relation("Prerequisites")
  KnowledgePrimitive_RelatedConcepts_A KnowledgePrimitive[]        @relation("RelatedConcepts")
  KnowledgePrimitive_RelatedConcepts_B KnowledgePrimitive[]        @relation("RelatedConcepts")
  primitiveRelationships               MasteryCriterionPrimitive[]

  @@index([conceptTags])
  @@index([isCoreConcept])
  @@index([complexityScore])
  @@index([userId])
  @@index([blueprintId])
  @@index([blueprintSectionId])
  @@index([primitiveId])
}

model UserCriterionMastery {
  id                     String            @id @default(cuid())
  userId                 Int
  isMastered             Boolean           @default(false)
  blueprintSectionId     Int
  consecutiveFailures    Int               @default(0)
  consecutiveIntervals   Int               @default(0)
  currentIntervalStep    Int               @default(0)
  lastReviewedAt         DateTime?
  lastThresholdCheckDate DateTime?
  lastTwoAttempts        Float[]
  lastAttempt            DateTime?
  attempts               Int               @default(0)
  attemptHistory         Json              @default("[]")
  attemptCount           Int               @default(0)
  successfulAttempts     Int               @default(0)
  criterionId            Int               @default(0)
  masteredAt             DateTime?
  lastAttemptedAt        DateTime?
  masteryCriterionId     Int
  masteryScore           Float             @default(0.0)
  nextReviewAt           DateTime?
  reviewCount            Int               @default(0)
  successfulReviews      Int               @default(0)
  trackingIntensity      TrackingIntensity @default(NORMAL)
  uueStage               UueStage          @default(UNDERSTAND)
  primitiveId            String?
  blueprintId            Int?
  updatedAt              DateTime          @updatedAt
  blueprintSection       BlueprintSection  @relation(fields: [blueprintSectionId], references: [id], onDelete: Cascade)
  masteryCriterion       MasteryCriterion  @relation(fields: [masteryCriterionId], references: [id], onDelete: Cascade)
  user                   User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, masteryCriterionId])
  @@unique([userId, criterionId, primitiveId, blueprintId])
  @@index([userId])
  @@index([masteryCriterionId])
  @@index([blueprintSectionId])
  @@index([uueStage])
  @@index([lastAttempt])
}

model UserQuestionAnswer {
  id                 Int                 @id @default(autoincrement())
  userId             Int
  questionId         Int
  isCorrect          Boolean
  createdAt          DateTime            @default(now())
  answerText         String?
  masteryCriterionId Int?
  timeSpentSeconds   Int?
  primitiveId        Int?
  masteryCriterion   MasteryCriterion?   @relation(fields: [masteryCriterionId], references: [id])
  knowledgePrimitive KnowledgePrimitive? @relation(fields: [primitiveId], references: [id])
  questionInstance   QuestionInstance    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([questionId])
  @@index([createdAt])
  @@index([masteryCriterionId])
  @@index([primitiveId])
}

model UserPrimitiveProgress {
  id                Int                @id @default(autoincrement())
  userId            Int
  lastReviewedAt    DateTime?
  nextReviewAt      DateTime?
  currentUeeLevel   String             @default("Understand")
  easeFactor        Float              @default(2.5)
  interval          Float              @default(1.0)
  lapses            Int                @default(0)
  reviewCount       Int                @default(0)
  successfulReviews Int                @default(0)
  masteryLevel      String             @default("NOT_STARTED")
  trackingIntensity TrackingIntensity  @default(NORMAL)
  primitiveId       String
  blueprintId       Int?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  primitive         KnowledgePrimitive @relation(fields: [primitiveId], references: [primitiveId])
  blueprint         LearningBlueprint? @relation(fields: [blueprintId], references: [id])
  user              User               @relation(fields: [userId], references: [id])

  @@unique([userId, primitiveId])
  @@unique([userId, primitiveId, blueprintId])
  @@index([userId])
  @@index([primitiveId])
  @@index([nextReviewAt])
}

model UserStudySession {
  id                       Int                       @id @default(autoincrement())
  userId                   Int
  answeredQuestionsCount   Int
  createdAt                DateTime                  @default(now())
  sessionEndedAt           DateTime                  @default(now())
  sessionStartedAt         DateTime?
  timeSpentSeconds         Int
  updatedAt                DateTime                  @default(now()) @updatedAt
  questionSetStudySessions QuestionSetStudySession[]
  user                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionEndedAt])
}

model QuestionSetStudySession {
  id                    Int              @id @default(autoincrement())
  userId                Int
  questionSetId         Int
  createdAt             DateTime         @default(now())
  sessionId             Int
  sessionMarksAchieved  Int
  sessionMarksAvailable Int
  srStageBefore         Int
  questionSet           QuestionSet      @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
  session               UserStudySession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user                  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionsAnswered     Question[]       @relation("QuestionToQuestionSetStudySession")

  @@unique([sessionId, questionSetId])
  @@index([userId])
  @@index([questionSetId])
}

model InsightCatalyst {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  userId             Int
  noteId             Int?
  explanation        String?
  imageUrls          String[]
  masteryCriterionId Int?
  questionId         Int?
  text               String
  type               String
  primitiveId        Int?
  masteryCriterion   MasteryCriterion?   @relation(fields: [masteryCriterionId], references: [id])
  note               NoteSection?        @relation(fields: [noteId], references: [id])
  primitive          KnowledgePrimitive? @relation(fields: [primitiveId], references: [id])
  question           Question?           @relation(fields: [questionId], references: [id])
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([noteId])
  @@index([questionId])
  @@index([primitiveId])
  @@index([masteryCriterionId])
}

model ScheduledReview {
  id            Int                 @id @default(autoincrement())
  userId        Int
  questionSetId Int?
  createdAt     DateTime            @default(now())
  reviewDate    DateTime
  status        String              @default("PENDING")
  type          String
  primitiveId   Int?
  primitive     KnowledgePrimitive? @relation(fields: [primitiveId], references: [id])
  questionSet   QuestionSet?        @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, reviewDate])
  @@index([primitiveId])
}

model PinnedReview {
  id          Int                 @id @default(autoincrement())
  userId      Int
  createdAt   DateTime            @default(now())
  reviewAt    DateTime            @default(now())
  primitiveId String?
  updatedAt   DateTime            @updatedAt
  primitive   KnowledgePrimitive? @relation(fields: [primitiveId], references: [primitiveId])

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, primitiveId])
  @@index([userId])
  @@index([primitiveId])
  @@index([reviewAt])
}

model UserBucketPreferences {
  id                    Int      @id @default(autoincrement())
  userId                Int      @unique
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  bucketSize            Int      @default(10)
  reviewInterval        Int      @default(1)
  criticalSize          Int      @default(10)
  coreSize              Int      @default(15)
  plusSize              Int      @default(5)
  masteryThresholdLevel String   @default("PROFICIENT")
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserPrimitiveDailySummary {
  id                   Int                @id @default(autoincrement())
  userId               Int
  createdAt            DateTime           @default(now())
  date                 DateTime           @db.Date
  summary              Json
  primitiveId          String
  weightedMasteryScore Float              @default(0.0)
  masteryLevel         String             @default("NOT_STARTED")
  canProgressToNext    Boolean            @default(false)
  nextReviewAt         DateTime?
  primitiveTitle       String?
  totalCriteria        Int                @default(0)
  masteredCriteria     Int                @default(0)
  lastCalculated       DateTime           @default(now())
  primitive            KnowledgePrimitive @relation(fields: [primitiveId], references: [primitiveId])
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, primitiveId, date])
  @@index([userId])
  @@index([primitiveId])
  @@index([date])
  @@index([lastCalculated])
}

model UserLearningAnalytics {
  id                    Int      @id @default(autoincrement())
  userId                Int
  date                  DateTime @default(now())
  totalStudyTimeMinutes Int      @default(0)
  conceptsReviewed      Int      @default(0)
  conceptsMastered      Int      @default(0)
  averageMasteryScore   Float    @default(0)
  learningEfficiency    Float?
  focusAreas            String[] @default([])
  achievements          String[] @default([])
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])
}

model UserMemoryInsight {
  id                  Int      @id @default(autoincrement())
  userId              Int
  insightType         String
  title               String
  content             String
  relatedPrimitiveIds String[] @default([])
  confidenceScore     Float
  isActionable        Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, insightType])
  @@index([userId, confidenceScore])
}

model LearningPath {
  id                    Int                @id @default(autoincrement())
  userId                Int
  pathName              String
  description           String?
  targetMasteryLevel    String
  estimatedDurationDays Int?
  isActive              Boolean            @default(true)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  user                  User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  steps                 LearningPathStep[]

  @@index([userId, isActive])
}

model LearningPathStep {
  id                   Int                @id @default(autoincrement())
  learningPathId       Int
  primitiveId          String
  stepOrder            Int
  isCompleted          Boolean            @default(false)
  completedAt          DateTime?
  estimatedTimeMinutes Int?
  learningPath         LearningPath       @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  primitive            KnowledgePrimitive @relation(fields: [primitiveId], references: [primitiveId], onDelete: Cascade)

  @@unique([learningPathId, stepOrder])
  @@index([learningPathId, isCompleted])
  @@index([learningPathId])
  @@index([primitiveId])
}

model KnowledgeRelationship {
  id                Int                @id @default(autoincrement())
  sourcePrimitiveId Int
  targetPrimitiveId Int
  relationshipType  RelationshipType
  strength          Float              @default(1.0)
  confidence        Float              @default(0.8)
  source            RelationshipSource @default(AI_GENERATED)
  metadata          Json?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  sourcePrimitive   KnowledgePrimitive @relation("PrerequisiteFor", fields: [sourcePrimitiveId], references: [id], onDelete: Cascade)
  targetPrimitive   KnowledgePrimitive @relation("RequiresPrerequisites", fields: [targetPrimitiveId], references: [id], onDelete: Cascade)

  @@unique([sourcePrimitiveId, targetPrimitiveId, relationshipType])
  @@index([sourcePrimitiveId])
  @@index([targetPrimitiveId])
  @@index([relationshipType])
  @@index([strength])
  @@index([confidence])
}

model MasteryCriterionRelationship {
  id                Int                       @id @default(autoincrement())
  sourceCriterionId Int
  targetCriterionId Int
  relationshipType  CriterionRelationshipType
  strength          Float                     @default(1.0)
  confidence        Float                     @default(0.8)
  source            RelationshipSource        @default(AI_GENERATED)
  metadata          Json?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  sourceCriterion   MasteryCriterion          @relation("CriterionPrerequisiteFor", fields: [sourceCriterionId], references: [id], onDelete: Cascade)
  targetCriterion   MasteryCriterion          @relation("CriterionRequiresPrerequisites", fields: [targetCriterionId], references: [id], onDelete: Cascade)

  @@unique([sourceCriterionId, targetCriterionId, relationshipType])
  @@index([sourceCriterionId])
  @@index([targetCriterionId])
  @@index([relationshipType])
  @@index([strength])
  @@index([confidence])
}

model Question {
  id                       Int                       @id @default(autoincrement())
  questionSetId            Int
  totalMarksAvailable      Int                       @default(1) @map("marksAvailable")
  aiGenerated              Boolean                   @default(false)
  answer                   String?
  autoMark                 Boolean                   @default(false)
  conceptTags              String[]
  createdAt                DateTime                  @default(now())
  currentMasteryScore      Float?
  difficultyScore          Float?
  imageUrls                String[]
  inCat                    String?
  lastAnswerCorrect        Boolean?
  markingCriteria          Json?
  masteryCriterionId       Int?
  options                  String[]
  questionType             String
  selfMark                 Boolean                   @default(false)
  text                     String
  timesAnsweredCorrectly   Int                       @default(0)
  timesAnsweredIncorrectly Int                       @default(0)
  updatedAt                DateTime                  @updatedAt
  insightCatalysts         InsightCatalyst[]
  masteryCriterion         MasteryCriterion?         @relation(fields: [masteryCriterionId], references: [id])
  questionSet              QuestionSet               @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
  questionSetStudySessions QuestionSetStudySession[] @relation("QuestionToQuestionSetStudySession")

  @@index([questionSetId])
  @@index([masteryCriterionId])
}

model QuestionSet {
  id                       Int                       @id @default(autoincrement())
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  isPinned                 Boolean                   @default(false)
  isTracked                Boolean                   @default(true)
  generatedFromBlueprintId Int?
  instructions             String?
  name                     String
  questions                Question[]
  generatedFromBlueprint   LearningBlueprint?        @relation(fields: [generatedFromBlueprintId], references: [id])
  questionSetStudySessions QuestionSetStudySession[]
  scheduledReviews         ScheduledReview[]

  @@index([generatedFromBlueprintId])
}

model UserMemory {
  id                Int                @id @default(autoincrement())
  primaryGoal       String?
  userId            Int                @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  cognitiveApproach CognitiveApproach?
  explanationStyles ExplanationStyle[]
  interactionStyle  InteractionStyle?
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  createdAt DateTime @default(now())
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum UueStage {
  UNDERSTAND
  USE
  EXPLORE
}

enum AssessmentType {
  QUESTION_BASED
  EXPLANATION_BASED
  APPLICATION_BASED
  COMPARISON_BASED
  CREATION_BASED
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}

enum RelationshipType {
  PREREQUISITE
  RELATED
  SIMILAR
  ADVANCES_TO
  DEMONSTRATES
  CONTRADICTS
  SYNONYMOUS
  PART_OF
}

enum CriterionRelationshipType {
  PREREQUISITE
  ADVANCES_TO
  RELATED
  SIMILAR
  PART_OF
  DEMONSTRATES
  SYNONYMOUS
}

enum RelationshipSource {
  AI_GENERATED
  USER_CREATED
  EXPERT_VERIFIED
  SYSTEM_INFERRED
}

enum TrackingIntensity {
  DENSE
  NORMAL
  SPARSE
}

enum MasteryThresholdLevel {
  SURVEY
  PROFICIENT
  EXPERT
}

enum CognitiveApproach {
  TOP_DOWN
  BOTTOM_UP
  ADAPTIVE
}

enum ExplanationStyle {
  ANALOGY_DRIVEN
  PRACTICAL_EXAMPLES
  TEXTUAL_DETAILED
}

enum InteractionStyle {
  DIRECT
  SOCRATIC
}

enum PrimitiveRelationshipType {
  PRIMARY
  SECONDARY
  CONTEXTUAL
}

enum RelationshipStrength {
  WEAK
  MODERATE
  STRONG
}

model UserPreferences {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  learningStyle   String   @default("VISUAL")
  experienceLevel String   @default("BEGINNER")
  autoAdjustment  Boolean  @default(true)
  lastUpdated     DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  masteryOptions  Json?    @default("{}")

  @@index([userId])
}

model UserSectionPreferences {
  id             Int              @id @default(autoincrement())
  userId         Int              @unique
  sectionId      Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  difficulty     String           @default("MEDIUM")
  timeAllocation Int              @default(30)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  masteryOptions Json?            @default("{}")
  section        BlueprintSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([userId, sectionId])
  @@index([userId])
  @@index([sectionId])
}

model UserCriterionPreferences {
  id             Int              @id @default(autoincrement())
  userId         Int              @unique
  criterionId    Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  difficulty     String           @default("MEDIUM")
  timeAllocation Int              @default(15)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  criterion      MasteryCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  masteryOptions Json?            @default("{}")

  @@unique([userId, criterionId])
  @@index([userId])
  @@index([criterionId])
}

model UserFeedback {
  id          Int               @id @default(autoincrement())
  userId      Int
  feedback    String
  rating      Int               @default(0)
  criterionId Int?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  criterion   MasteryCriterion? @relation(fields: [criterionId], references: [id])

  @@index([userId])
  @@index([rating])
}
