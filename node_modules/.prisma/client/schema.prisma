generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the User model
model User {
  id                 Int                     @id @default(autoincrement())
  email              String                  @unique
  password           String
  folders            Folder[]
  questionSetReviews UserQuestionSetReview[]
  questionAnswers    UserQuestionAnswer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the Folder model
model Folder {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  questionSets QuestionSet[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// Define the QuestionSet model
model QuestionSet {
  id        Int        @id @default(autoincrement())
  name      String
  folderId  Int
  folder    Folder     @relation(fields: [folderId], references: [id])
  questions Question[]

  // Spaced Repetition fields
  overallMasteryScore Float                   @default(0) // Overall mastery (0-100)
  understandScore     Float                   @default(0) // Understanding score (0-100)
  useScore            Float                   @default(0) // Application score (0-100)
  exploreScore        Float                   @default(0) // Exploration score (0-100)
  forgettingScore     Float                   @default(0) // Forgetting curve score (0-100)
  nextReviewAt        DateTime? // When this set should be reviewed next
  currentIntervalDays Float? // Current interval in days
  lastReviewedAt      DateTime? // When this set was last reviewed
  reviewCount         Int                     @default(0) // Number of times this set has been reviewed
  masteryOverTime     Json? // Timeseries of mastery scores
  userReviews         UserQuestionSetReview[] // User's review history for this set

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([folderId])
  @@index([nextReviewAt])
}

// Define the Question model
model Question {
  id           Int      @id @default(autoincrement())
  text         String // Renamed from 'question'
  answer       String? // Make answer nullable
  options      String[] // For multiple-choice, etc. Now a required list (can be empty)
  questionType String // e.g., 'multiple-choice', 'short-answer', 'flashcard'

  // U-U-E categorization
  uueFocus    String   @default("Understand") // Understand, Use, or Explore
  conceptTags String[] // Tags for fundamental concepts this question covers

  // Individual question performance tracking
  lastAnswerCorrect  Boolean? // Was the last answer correct?
  timesAnswered      Int      @default(0) // Total times this question was answered
  timesAnsweredWrong Int      @default(0) // Times this question was answered incorrectly
  difficultyScore    Float    @default(0.5) // Calculated difficulty (0-1)

  questionSetId Int
  questionSet   QuestionSet          @relation(fields: [questionSetId], references: [id])
  userAnswers   UserQuestionAnswer[] // User's answer history for this question

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([questionSetId])
  @@index([uueFocus])
}

// Track user's reviews of question sets
model UserQuestionSetReview {
  id            Int         @id @default(autoincrement())
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  questionSetId Int
  questionSet   QuestionSet @relation(fields: [questionSetId], references: [id])

  // Review metrics
  understandScore Float // Understanding score for this review (0-100)
  useScore        Float // Application score for this review (0-100)
  exploreScore    Float // Exploration score for this review (0-100)
  overallScore    Float // Overall score for this review (0-100)
  timeSpent       Int // Time spent on review in seconds
  completedAt     DateTime @default(now())

  @@index([userId])
  @@index([questionSetId])
  @@index([completedAt])
}

// Track user's answers to individual questions
model UserQuestionAnswer {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])

  // Answer data
  userAnswer    String // User's submitted answer
  isCorrect     Boolean // Whether the answer was correct
  scoreAchieved Float    @default(0) // Score achieved for this answer (0-100)
  confidence    Int? // User's confidence level (1-5) if provided
  timeSpent     Int // Time spent answering in seconds
  answeredAt    DateTime @default(now())

  @@index([userId])
  @@index([questionId])
  @@index([answeredAt])
}
