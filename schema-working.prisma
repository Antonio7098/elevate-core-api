model KnowledgePrimitive {
  id        Int      @id @default(autoincrement())
  userId    Int      // Every primitive must belong to a user
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  // ... other fields to define the primitive itself
  
  // --- Spaced Repetition Fields ---
  masteryCriteria MasteryCriterion[]
  isTracking      Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MasteryCriterion {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  primitiveId Int
  primitive   KnowledgePrimitive @relation(fields: [primitiveId], references: [id])
  
  description String // e.g., "Can state the definition of Photosynthesis"
  ueeLevel    String   // "Understand", "Use", or "Explore"
  
  questions   Question[] // Questions that test this criterion
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// New model to track a user's progress on a specific primitive
model UserPrimitiveProgress {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  
  primitiveId Int
  primitive   KnowledgePrimitive @relation(fields: [primitiveId], references: [id])
  
  currentUeeLevel String   @default("Understand")
  nextReviewAt    DateTime?
  lastReviewedAt  DateTime?
  
  // Other SR fields like interval, ease factor, etc.

  // The question that was answered to level up to the current UEE level
  answeredQuestionId Int?
  answeredQuestion   Question? @relation(fields: [answeredQuestionId], references: [id])
  
  @@unique([userId, primitiveId])
}

// New model to track a user's mastery of a specific criterion
model UserCriterionMastery {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  criterionId     Int
  criterion       MasteryCriterion @relation(fields: [criterionId], references: [id])
  isMastered      Boolean  @default(false)
  masteredAt      DateTime?
  masteringQuestionId Int? // The question that led to mastery of this criterion
  masteringQuestion Question? @relation(fields: [masteringQuestionId], references: [id])

  @@unique([userId, criterionId])
}


// Update to the Question model
model Question {
  id                         Int                         @id @default(autoincrement())
  answer                     String?
  questionSetId              Int
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  options                    String[]
  questionType               String
  text                       String
  conceptTags                String[]
  lastAnswerCorrect          Boolean?
  // uueFocus                   String                      @default("Understand") // Removed, handled by MasteryCriterion.ueeLevel
  totalMarksAvailable        Int                         @default(1) @map("marksAvailable")
  markingCriteria            Json?
  currentMasteryScore        Float?
  difficultyScore            Float?
  timesAnsweredCorrectly     Int                         @default(0)
  timesAnsweredIncorrectly   Int                         @default(0)
  selfMark                   Boolean                     @default(false)
  autoMark                   Boolean                     @default(false)
  aiGenerated                Boolean                     @default(false)
  inCat                      String?
  imageUrls                  String[]
  questionSet                QuestionSet                 @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
  userAnswers                UserQuestionAnswer[]
  insightCatalysts           InsightCatalyst[]
  questionSetStudySessions   QuestionSetStudySession[]

  // New relation to MasteryCriterion
  masteryCriterionId         Int?
  masteryCriterion           MasteryCriterion? @relation(fields: [masteryCriterionId], references: [id])

  @@index([questionSetId])
  @@index([masteryCriterionId]) // New index
}

model UserQuestionAnswer {
  id                        Int                      @id @default(autoincrement())
  userId                    Int
  questionId                Int
  isCorrect                 Boolean
  confidence                Int?
  timeSpent                 Int
  answeredAt                DateTime                 @default(now())
  userAnswerText            String?
  scoreAchieved             Int
  questionSetId             Int? // Optional, for legacy or non-SR question sets
  primitiveId               Int? // New: Link to KnowledgePrimitive
  masteryCriterionId        Int? // New: Link to MasteryCriterion
  user                      User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question                  Question                 @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionSet               QuestionSet?             @relation(fields: [questionSetId], references: [id])
  questionSetStudySessionId Int? // Re-evaluate if still needed for SR tracking
  questionSetStudySession   QuestionSetStudySession? @relation(fields: [questionSetStudySessionId], references: [id])
  primitive                 KnowledgePrimitive?      @relation(fields: [primitiveId], references: [id])
  masteryCriterion          MasteryCriterion?        @relation(fields: [masteryCriterionId], references: [id])

  @@index([userId])
  @@index([questionId])
  @@index([questionSetId])
  @@index([primitiveId]) // New index
  @@index([masteryCriterionId]) // New index
  @@index([answeredAt])
  @@index([questionSetStudySessionId])
}

model UserStudySession {
  id                       Int                       @id @default(autoincrement())
  userId                   Int
  sessionStartedAt         DateTime?
  sessionEndedAt           DateTime                  @default(now())
  timeSpentSeconds         Int
  answeredQuestionsCount   Int
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @default(now()) @updatedAt

  // questionSetStudySessions QuestionSetStudySession[] // Deprecate or refactor
  user                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionEndedAt])
}

model QuestionSetStudySession {
  id                    Int        @id @default(autoincrement())
  userId                Int
  user                  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId             Int
  session               UserStudySession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  questionSetId         Int
  questionSet           QuestionSet @relation(fields: [questionSetId], references: [id], onDelete: Cascade)

  // Session-specific performance snapshot
  sessionMarksAchieved  Int        // Sum of marks achieved for questions from this set in this session
  sessionMarksAvailable Int        // Sum of marks available for questions from this set in this session
  questionsAnswered     Question[]           // Direct references to questions answered in this session
  userQuestionAnswers   UserQuestionAnswer[] // The specific answers given in this session for this set

  srStageBefore         Int // The SR stage of the QuestionSet before this session
  createdAt             DateTime   @default(now())

  // Deprecate or refactor this model. Its purpose will be replaced by UserPrimitiveProgress and UserCriterionMastery for SR tracking.
  // If kept, it would only track study sessions for non-SR QuestionSet's.

  @@unique([sessionId, questionSetId])
  @@index([userId])
  @@index([questionSetId])
}

model Note {
  id               Int               @id @default(autoincrement())
  title            String
  content          Json
  plainText        String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userId           Int
  folderId         Int?
  questionSetId    Int? // Optional, for legacy or non-SR question sets
  primitiveId      Int? // New: Link to KnowledgePrimitive
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder           Folder?           @relation(fields: [folderId], references: [id], onDelete: SetNull)
  questionSet      QuestionSet?      @relation(fields: [questionSetId], references: [id], onDelete: SetNull)
  primitive        KnowledgePrimitive? @relation(fields: [primitiveId], references: [id])

  // Relation to LearningBlueprint
  generatedFromBlueprintId Int?
  generatedFromBlueprint   LearningBlueprint? @relation(fields: [generatedFromBlueprintId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([folderId])
  @@index([questionSetId])
  @@index([primitiveId]) // New index
  @@index([generatedFromBlueprintId])
}

model InsightCatalyst {
  id           Int       @id @default(autoincrement())
  type         String
  text         String
  explanation  String?
  imageUrls    String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       Int
  noteId       Int?
  questionId   Int? // Optional, for legacy or non-SR questions
  primitiveId  Int? // New: Link to KnowledgePrimitive
  masteryCriterionId Int? // New: Link to MasteryCriterion
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  note         Note?     @relation(fields: [noteId], references: [id], onDelete: SetNull)
  question     Question? @relation(fields: [questionId], references: [id], onDelete: SetNull)
  primitive    KnowledgePrimitive? @relation(fields: [primitiveId], references: [id])
  masteryCriterion MasteryCriterion? @relation(fields: [masteryCriterionId], references: [id])

  @@index([userId])
  @@index([noteId])
  @@index([questionId])
  @@index([primitiveId]) // New index
  @@index([masteryCriterionId]) // New index
}

// New model for scheduled reviews
model ScheduledReview {
  id            Int         @id @default(autoincrement())
  reviewDate    DateTime
  type          String // "AUTO" or "MANUAL"
  status        String      @default("PENDING") // "PENDING" or "COMPLETED"
  userId        Int
  questionSetId Int? // Optional, for legacy or non-SR question sets
  primitiveId   Int? // New: Link to KnowledgePrimitive
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionSet   QuestionSet? @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
  primitive     KnowledgePrimitive? @relation(fields: [primitiveId], references: [id])
  createdAt     DateTime    @default(now())

  @@index([userId, reviewDate])
  @@index([primitiveId]) // New index
}

model QuestionSet {
  id                         Int                         @id @default(autoincrement())
  name                       String
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  // currentIntervalDays        Float? // Deprecated
  // exploreScore               Float                       @default(0) // Deprecated
  // lastReviewedAt             DateTime? // Deprecated
  // nextReviewAt               DateTime? // Deprecated
  // reviewCount                Int                         @default(0) // Deprecated
  // understandScore            Float                       @default(0) // Deprecated
  // useScore                   Float                       @default(0) // Deprecated
  // currentForgottenPercentage Float? // Deprecated
  // currentTotalMasteryScore   Float                       @default(0) // Deprecated
  // currentUUESetStage         String                      @default("Explore") // Deprecated
  // forgettingCurveParams      Json? // Deprecated
  // masteryHistory             Json[] // Deprecated
  instructions               String?
  // isTracked                  Boolean                     @default(true) // Deprecated
  isPinned                   Boolean                     @default(false)
  folderId                   Int?
  folder                     Folder?                     @relation(fields: [folderId], references: [id], onDelete: SetNull)
  questions                  Question[]
  notes                      Note[]
  userAnswers                UserQuestionAnswer[]
  scheduledReviews           ScheduledReview[]
  questionSetStudySessions   QuestionSetStudySession[]

  // New fields for adaptive SR - Deprecated
  // srStage                    Int                         @default(0) // Deprecated
  // easeFactor                 Float                       @default(2.5) // Deprecated
  // lapses                     Int                         @default(0) // Deprecated
  // trackingMode               String                      @default("AUTO") // Deprecated

  // Relation to LearningBlueprint
  generatedFromBlueprintId   Int?
  generatedFromBlueprint     LearningBlueprint?          @relation(fields: [generatedFromBlueprintId], references: [id], onDelete: SetNull)

  @@index([folderId])
  @@index([generatedFromBlueprintId])
}

model User {
  id                       Int                       @id @default(autoincrement())
  email                    String                    @unique
  password                 String
  name                     String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  dailyStudyTimeMinutes    Int                       @default(0)
  folders                  Folder[]
  questionAnswers          UserQuestionAnswer[]
  studySessions            UserStudySession[]
  questionSetStudySessions QuestionSetStudySession[]
  notes                    Note[]
  insightCatalysts         InsightCatalyst[]
  scheduledReviews         ScheduledReview[]
  userMemory               UserMemory?
  learningBlueprints       LearningBlueprint[]
  knowledgePrimitives      KnowledgePrimitive[] // New: Link to KnowledgePrimitive
  masteryCriteria          MasteryCriterion[] // New: Link to MasteryCriterion
  userPrimitiveProgresses  UserPrimitiveProgress[] // New: Link to UserPrimitiveProgress
  userCriterionMasteries   UserCriterionMastery[] // New: Link to UserCriterionMastery

  @@index([email])
}

model Folder {
  id                  Int           @id @default(autoincrement())
  name                String
  description         String?
  userId              Int
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  currentMasteryScore Float?
  masteryHistory      Json[]
  parentId            Int?
  imageUrls           String[]
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionSets        QuestionSet[]
  notes               Note[]
  parent              Folder?       @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children            Folder[]      @relation("FolderHierarchy")
  isPinned            Boolean       @default(false)

  @@index([userId])
  @@index([parentId])
}

model LearningBlueprint {
  id                    Int           @id @default(autoincrement())
  sourceText            String
  blueprintJson         Json
  sourceId              String?       // AI API's UUID for vector database operations
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  userId                Int
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  generatedNotes        Note[]
  generatedQuestionSets QuestionSet[]

  @@index([userId])
}

// Enums for UserMemory
enum CognitiveApproach {
  TOP_DOWN
  BOTTOM_UP
  ADAPTIVE
}

enum ExplanationStyle {
  ANALOGY_DRIVEN
  PRACTICAL_EXAMPLES
  TEXTUAL_DETAILED
}

enum InteractionStyle {
  DIRECT
  SOCRATIC
}

model UserMemory {
  id                Int                 @id @default(autoincrement())
  cognitiveApproach CognitiveApproach?
  explanationStyles ExplanationStyle[]
  interactionStyle  InteractionStyle?
  primaryGoal       String?
  userId            Int                 @unique
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([userId])
}