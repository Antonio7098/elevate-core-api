// This is your new blueprint-centric Prisma schema file
// Replaces the old folder/question set system with blueprint sections

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// CORE USER MODEL
// ============================================================================

model User {
  id                       Int                       @id @default(autoincrement())
  email                    String                    @unique
  password                 String
  name                     String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  dailyStudyTimeMinutes    Int                       @default(0)
  
  // Blueprint-centric relations
  blueprintSections        BlueprintSection[]
  noteSections             NoteSection[]
  masteryCriteria          MasteryCriterion[]
  questionInstances        QuestionInstance[]
  knowledgePrimitives      KnowledgePrimitive[]
  userPrimitiveProgresses  UserPrimitiveProgress[]
  userCriterionMasteries   UserCriterionMastery[]
  userQuestionAnswers      UserQuestionAnswer[]
  userStudySessions        UserStudySession[]
  questionSetStudySessions QuestionSetStudySession[]
  insightCatalysts         InsightCatalyst[]
  scheduledReviews         ScheduledReview[]
  userMemory               UserMemory?
  pinnedReviews            PinnedReview[]
  learningBlueprints       LearningBlueprint[]
  userBucketPreferences    UserBucketPreferences?
  userPrimitiveDailySummaries UserPrimitiveDailySummary[]
  userLearningAnalytics    UserLearningAnalytics?
  userMemoryInsights       UserMemoryInsight[]
  learningPaths            LearningPath[]
  learningPathSteps        LearningPathStep[]
  verificationTokens       VerificationToken[]

  @@index([email])
}

// ============================================================================
// BLUEPRINT-CENTRIC MODELS (NEW)
// ============================================================================

model LearningBlueprint {
  id                    Int                 @id @default(autoincrement())
  sourceText            String
  blueprintJson         Json
  title                 String?
  description           String?
  sourceId              String?             // AI API's UUID for vector database operations
  userId                Int
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  // Relations
  user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  blueprintSections     BlueprintSection[]
  knowledgePrimitives   KnowledgePrimitive[]

  @@index([userId])
}

model BlueprintSection {
  id                    Int                   @id @default(autoincrement())
  title                 String                // Section name
  description           String?               // Section description
  blueprintId           Int                   // Reference to parent blueprint
  parentSectionId       Int?                  // For hierarchical nesting
  depth                 Int                   @default(0) // Nesting depth
  orderIndex            Int                   @default(0) // Display order
  difficulty            DifficultyLevel       @default(BEGINNER)
  estimatedTimeMinutes  Int?                 // Estimated study time for this section
  userId                Int                   // Owner
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  // Relations
  blueprint             LearningBlueprint     @relation(fields: [blueprintId], references: [id], onDelete: Cascade)
  parent                BlueprintSection?     @relation("SectionHierarchy", fields: [parentSectionId], references: [id])
  children              BlueprintSection[]    @relation("SectionHierarchy")
  notes                 NoteSection[]
  knowledgePrimitives   KnowledgePrimitive[]
  masteryCriteria       MasteryCriterion[]
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Indexes for performance
  @@index([blueprintId])
  @@index([parentSectionId])
  @@index([userId])
  @@index([depth])
  @@unique([blueprintId, orderIndex])
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model NoteSection {
  id                    Int                   @id @default(autoincrement())
  title                 String                // Note title
  content               String                // Note content
  contentBlocks         Json?                 // Structured content blocks (BlockNote)
  contentHtml           String?               // HTML content
  plainText             String?               // Plain text content
  contentVersion        Int                   @default(2)
  blueprintSectionId    Int                   // Links to blueprint section
  userId                Int                   // Owner
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  // Relations
  blueprintSection      BlueprintSection      @relation(fields: [blueprintSectionId], references: [id], onDelete: Cascade)
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  insightCatalysts      InsightCatalyst[]
  
  // Indexes
  @@index([blueprintSectionId])
  @@index([userId])
  @@index([createdAt])
}

model MasteryCriterion {
  id                    Int                   @id @default(autoincrement())
  title                 String                // "What is a derivative?" - The question family
  description           String?               // "Understand the basic concept of derivatives"
  weight                Float                 @default(1.0) // Importance weight
  uueStage              UueStage              @default(UNDERSTAND) // FOUNDATIONAL: UUE stage for SR and learning pathways
  complexityScore       Float?                // AI-calculated complexity (1-10)
  knowledgePrimitiveId  String                // Links to knowledge primitive
  blueprintSectionId    Int                   // Links to blueprint section
  userId                Int                   // Owner
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  // Enhanced Fields
  assessmentType        AssessmentType        @default(QUESTION_BASED)
  masteryThreshold      Float                 @default(0.8) // Score needed to master
  timeLimit             Int?                  // Time limit in seconds
  attemptsAllowed       Int                   @default(3) // Number of attempts allowed
  
  // Relations
  knowledgePrimitive    KnowledgePrimitive    @relation(fields: [knowledgePrimitiveId], references: [primitiveId], onDelete: Cascade)
  blueprintSection      BlueprintSection      @relation(fields: [blueprintSectionId], references: [id], onDelete: Cascade)
  questionInstances     QuestionInstance[]    // Direct question variations (no QuestionFamily layer)
  userCriterionMasteries UserCriterionMastery[]
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Learning Pathway Relations (NEW - Sprint 51)
  prerequisiteFor       MasteryCriterionRelationship[] @relation("CriterionPrerequisiteFor", fields: [id], references: [sourceCriterionId])
  requiresPrerequisites MasteryCriterionRelationship[] @relation("CriterionRequiresPrerequisites", fields: [id], references: [targetCriterionId])
  
  // Relations for existing models
  questions             Question[]
  insightCatalysts      InsightCatalyst[]
  userQuestionAnswers   UserQuestionAnswer[]
  
  @@index([knowledgePrimitiveId])
  @@index([blueprintSectionId])
  @@index([userId])
  @@index([uueStage])
  @@index([weight])
  @@index([complexityScore])
}

enum UueStage {
  UNDERSTAND
  USE
  EXPLORE
}

enum AssessmentType {
  QUESTION_BASED         // Multiple choice, fill-in-blank
  EXPLANATION_BASED      // Written explanations
  APPLICATION_BASED      // Practical applications
  COMPARISON_BASED       // Compare and contrast
  CREATION_BASED         // Create new content
}

model QuestionInstance {
  id                    Int                   @id @default(autoincrement())
  questionText          String                // Specific question variation
  answer                String                // Correct answer
  explanation           String?               // Answer explanation
  context               String?               // Additional context
  difficulty            QuestionDifficulty    @default(MEDIUM)
  masteryCriterionId    Int                   // Direct link to mastery criterion
  userId                Int                   // Owner
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  // Relations
  masteryCriterion      MasteryCriterion      @relation(fields: [masteryCriterionId], references: [id], onDelete: Cascade)
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAnswers           UserQuestionAnswer[]
  
  // Indexes
  @@index([masteryCriterionId])
  @@index([userId])
  @@index([difficulty])
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}

// ============================================================================
// KNOWLEDGE PRIMITIVE AND RELATED MODELS
// ============================================================================

model KnowledgePrimitive {
  id                        Int                       @id @default(autoincrement())
  primitiveId               String                    @unique // Unique identifier for the primitive
  title                     String
  description               String?
  primitiveType             String // e.g., "proposition", "entity", "process"
  difficultyLevel           String // e.g., "beginner", "intermediate", "advanced"
  estimatedTimeMinutes      Int?
  userId                    Int
  blueprintId               Int // Reference to the LearningBlueprint
  blueprintSectionId        Int? // NEW: Reference to BlueprintSection
  trackingIntensity         TrackingIntensity @default(NORMAL)
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  
  // Premium Knowledge Graph Fields
  conceptTags               String[]                  @default([]) // For semantic grouping
  prerequisiteIds           String[]                  @default([]) // Direct prerequisites
  relatedConceptIds         String[]                  @default([]) // Related concepts
  complexityScore           Float?                    // AI-calculated complexity (1-10)
  estimatedPrerequisites    Int?                      // Number of concepts needed before this
  isCoreConcept            Boolean                   @default(false) // Essential for domain mastery
  
  // Relations
  user                      User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  blueprint                 LearningBlueprint         @relation(fields: [blueprintId], references: [id], onDelete: Cascade)
  blueprintSection          BlueprintSection?         @relation(fields: [blueprintSectionId], references: [id], onDelete: SetNull)
  masteryCriteria           MasteryCriterion[]
  userPrimitiveProgresses   UserPrimitiveProgress[]
  userCriterionMasteries    UserCriterionMastery[]
  pinnedReviews            PinnedReview[]
  userQuestionAnswers      UserQuestionAnswer[]
  scheduledReviews         ScheduledReview[]
  insightCatalysts         InsightCatalyst[]
  dailySummaries           UserPrimitiveDailySummary[]
  
  // Premium Relationship Tracking
  prerequisiteFor          KnowledgePrimitive[]       @relation("Prerequisites")
  prerequisites            KnowledgePrimitive[]       @relation("Prerequisites")
  relatedConcepts          KnowledgePrimitive[]       @relation("RelatedConcepts")
  relatedToConcepts        KnowledgePrimitive[]       @relation("RelatedConcepts")
  learningPathSteps        LearningPathStep[]
  
  // Knowledge Graph Relationships (NEW - Sprint 51)
  prerequisiteForRelations KnowledgeRelationship[]    @relation("PrerequisiteFor")
  requiresPrerequisites    KnowledgeRelationship[]    @relation("RequiresPrerequisites")

  @@index([userId])
  @@index([blueprintId])
  @@index([blueprintSectionId])
  @@index([primitiveId])
  @@index([conceptTags]) // Premium: Fast semantic search
  @@index([isCoreConcept]) // Premium: Core concept filtering
  @@index([complexityScore]) // Premium: Complexity-based sorting
}

model UserCriterionMastery {
  id                    Int      @id @default(autoincrement())
  userId                Int
  criterionId           Int
  isMastered            Boolean  @default(false)
  masteryScore          Float    @default(0.0)
  lastAttempt           DateTime @default(now())
  attempts              Int      @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user                  User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  masteryCriterion      MasteryCriterion     @relation(fields: [criterionId], references: [id], onDelete: Cascade)

  @@unique([userId, criterionId])
  @@index([userId])
  @@index([criterionId])
}

model UserQuestionAnswer {
  id                Int      @id @default(autoincrement())
  userId            Int
  questionId        Int      // Now references QuestionInstance
  isCorrect         Boolean
  answerText        String?
  timeSpentSeconds  Int?
  createdAt         DateTime @default(now())

  // Relations
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionInstance  QuestionInstance @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([questionId])
  @@index([createdAt])
}

// ============================================================================
// STUDY SESSION AND PROGRESS MODELS
// ============================================================================

model UserPrimitiveProgress {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  
  primitiveId Int
  primitive   KnowledgePrimitive @relation(fields: [primitiveId], references: [id])
  
  currentUeeLevel String   @default("Understand")
  nextReviewAt    DateTime?
  lastReviewedAt  DateTime?
  
  // Other SR fields like interval, ease factor, etc.
  interval        Float    @default(1.0)
  easeFactor     Float    @default(2.5)
  lapses         Int      @default(0)
  
  @@unique([userId, primitiveId])
  @@index([userId])
  @@index([primitiveId])
  @@index([nextReviewAt])
}

model UserStudySession {
  id                       Int                       @id @default(autoincrement())
  userId                   Int
  sessionStartedAt         DateTime?
  sessionEndedAt           DateTime                  @default(now())
  timeSpentSeconds         Int
  answeredQuestionsCount   Int
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @default(now()) @updatedAt
  
  user                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionSetStudySessions QuestionSetStudySession[]
  
  @@index([userId])
  @@index([sessionEndedAt])
}

model QuestionSetStudySession {
  id                    Int        @id @default(autoincrement())
  userId                Int
  user                  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId             Int
  session               UserStudySession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  questionSetId         Int
  questionSet           QuestionSet @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
  
  // Session-specific performance snapshot
  sessionMarksAchieved  Int        // Sum of marks achieved for questions from this set in this session
  sessionMarksAvailable Int        // Sum of marks available for questions from this set in this session
  questionsAnswered     Question[]           // Direct references to questions answered in this session
  userQuestionAnswers   UserQuestionAnswer[] // The specific answers given in this session for this set
  
  srStageBefore         Int // The SR stage of the QuestionSet before this session
  createdAt             DateTime   @default(now())
  
  @@unique([sessionId, questionSetId])
  @@index([userId])
  @@index([questionSetId])
}

// ============================================================================
// INSIGHT AND REVIEW MODELS
// ============================================================================

model InsightCatalyst {
  id           Int       @id @default(autoincrement())
  type         String
  text         String
  explanation  String?
  imageUrls    String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       Int
  noteId       Int?
  questionId   Int? // Optional, for legacy or non-SR questions
  primitiveId  Int? // New: Link to KnowledgePrimitive
  masteryCriterionId Int? // New: Link to MasteryCriterion
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  note         NoteSection? @relation(fields: [noteId], references: [id], onDelete: SetNull)
  question     Question? @relation(fields: [questionId], references: [id], onDelete: SetNull)
  primitive    KnowledgePrimitive? @relation(fields: [primitiveId], references: [id])
  masteryCriterion MasteryCriterion? @relation(fields: [masteryCriterionId], references: [id])
  
  @@index([userId])
  @@index([noteId])
  @@index([questionId])
  @@index([primitiveId]) // New index
  @@index([masteryCriterionId]) // New index
}

model ScheduledReview {
  id            Int         @id @default(autoincrement())
  reviewDate    DateTime
  type          String // "AUTO" or "MANUAL"
  status        String      @default("PENDING") // "PENDING" or "COMPLETED"
  userId        Int
  questionSetId Int? // Optional, for legacy or non-SR question sets
  primitiveId   Int? // New: Link to KnowledgePrimitive
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionSet   QuestionSet? @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
  primitive     KnowledgePrimitive? @relation(fields: [primitiveId], references: [id])
  createdAt     DateTime    @default(now())
  
  @@index([userId, reviewDate])
  @@index([primitiveId]) // New index
}

model PinnedReview {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  primitiveId Int?
  primitive KnowledgePrimitive? @relation(fields: [primitiveId], references: [id])
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([primitiveId])
}

// ============================================================================
// USER PREFERENCES AND ANALYTICS
// ============================================================================

model UserBucketPreferences {
  id                    Int      @id @default(autoincrement())
  userId                Int      @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bucketSize            Int      @default(10)
  reviewInterval        Int      @default(1)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([userId])
}

model UserPrimitiveDailySummary {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  primitiveId Int
  primitive   KnowledgePrimitive @relation(fields: [primitiveId], references: [id])
  date        DateTime @db.Date
  summary     Json
  createdAt   DateTime @default(now())
  
  @@unique([userId, primitiveId, date])
  @@index([userId])
  @@index([primitiveId])
  @@index([date])
}

model UserLearningAnalytics {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
}

model UserMemoryInsight {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  insight   String
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([createdAt])
}

// ============================================================================
// LEARNING PATH MODELS
// ============================================================================

model LearningPath {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  steps       LearningPathStep[]

  @@index([userId])
}

model LearningPathStep {
  id            Int          @id @default(autoincrement())
  learningPathId Int
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  primitiveId    Int
  primitive      KnowledgePrimitive @relation(fields: [primitiveId], references: [id])
  orderIndex     Int
  createdAt      DateTime    @default(now())
  
  @@unique([learningPathId, orderIndex])
  @@index([learningPathId])
  @@index([primitiveId])
}

// ============================================================================
// KNOWLEDGE GRAPH RELATIONSHIP MODELS (NEW - Sprint 51)
// ============================================================================

model KnowledgeRelationship {
  id                    Int                   @id @default(autoincrement())
  sourcePrimitiveId     Int                   // Source knowledge primitive
  targetPrimitiveId     Int                   // Target knowledge primitive
  relationshipType      RelationshipType       // Type of relationship
  strength              Float                 @default(1.0) // Relationship strength 0-1
  confidence            Float                 @default(0.8) // AI confidence in relationship
  source                RelationshipSource     @default(AI_GENERATED)
  metadata              Json?                 // Additional relationship data
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  // Relations
  sourcePrimitive       KnowledgePrimitive    @relation("PrerequisiteFor", fields: [sourcePrimitiveId], references: [id], onDelete: Cascade)
  targetPrimitive       KnowledgePrimitive    @relation("RequiresPrerequisites", fields: [targetPrimitiveId], references: [id], onDelete: Cascade)
  
  @@unique([sourcePrimitiveId, targetPrimitiveId, relationshipType])
  @@index([sourcePrimitiveId])
  @@index([targetPrimitiveId])
  @@index([relationshipType])
  @@index([strength])
  @@index([confidence])
}

model MasteryCriterionRelationship {
  id                    Int                   @id @default(autoincrement())
  sourceCriterionId     Int                   // Source mastery criterion
  targetCriterionId     Int                   // Target mastery criterion
  relationshipType      CriterionRelationshipType // Type of relationship
  strength              Float                 @default(1.0) // Relationship strength 0-1
  confidence            Float                 @default(0.8) // AI confidence in relationship
  source                RelationshipSource     @default(AI_GENERATED)
  metadata              Json?                 // Additional relationship data
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  // Relations
  sourceCriterion       MasteryCriterion      @relation("CriterionPrerequisiteFor", fields: [sourceCriterionId], references: [id], onDelete: Cascade)
  targetCriterion       MasteryCriterion      @relation("CriterionRequiresPrerequisites", fields: [targetCriterionId], references: [id], onDelete: Cascade)
  
  @@unique([sourceCriterionId, targetCriterionId, relationshipType])
  @@index([sourceCriterionId])
  @@index([targetCriterionId])
  @@index([relationshipType])
  @@index([strength])
  @@index([confidence])
}

// ============================================================================
// ENUMS
// ============================================================================

enum RelationshipType {
  PREREQUISITE           // Must be learned before
  RELATED                // Conceptually related
  SIMILAR                // Similar concepts
  ADVANCES_TO            // Builds upon
  DEMONSTRATES           // Shows application of
  CONTRADICTS            // Opposes or contradicts
  SYNONYMOUS             // Same concept, different name
  PART_OF                // Component of larger concept
}

enum CriterionRelationshipType {
  PREREQUISITE           // Must be mastered before
  ADVANCES_TO            // Builds upon this criterion
  RELATED                // Conceptually related
  SIMILAR                // Similar mastery requirements
  PART_OF                // Component of larger criterion
  DEMONSTRATES           // Shows application of this criterion
  SYNONYMOUS             // Same concept, different criterion
}

enum RelationshipSource {
  AI_GENERATED           // Discovered by AI analysis
  USER_CREATED           // Manually created by user
  EXPERT_VERIFIED        // Validated by domain expert
  SYSTEM_INFERRED        // Inferred from usage patterns
}

enum TrackingIntensity {
  DENSE   // More frequent reviews (0.75× interval)
  NORMAL  // Standard review frequency
  SPARSE  // Less frequent reviews (1.5× interval)
}

enum MasteryThresholdLevel {
  SURVEY      // 60%+ mastery
  PROFICIENT  // 80%+ mastery
  EXPERT      // 95%+ mastery
}

// Enums for UserMemory
enum CognitiveApproach {
  TOP_DOWN
  BOTTOM_UP
  ADAPTIVE
}

enum ExplanationStyle {
  ANALOGY_DRIVEN
  PRACTICAL_EXAMPLES
  TEXTUAL_DETAILED
}

enum InteractionStyle {
  DIRECT
  SOCRATIC
}

// ============================================================================
// LEGACY MODELS (MINIMAL - FOR COMPATIBILITY)
// ============================================================================

// Minimal Question model for compatibility with existing code
model Question {
  id                         Int                         @id @default(autoincrement())
  answer                     String?
  questionSetId              Int
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  options                    String[]
  questionType               String
  text                       String
  conceptTags                String[]
  lastAnswerCorrect          Boolean?
  totalMarksAvailable        Int                         @default(1) @map("marksAvailable")
  markingCriteria            Json?
  currentMasteryScore        Float?
  difficultyScore            Float?
  timesAnsweredCorrectly     Int                         @default(0)
  timesAnsweredIncorrectly   Int                         @default(0)
  selfMark                   Boolean                     @default(false)
  autoMark                   Boolean                     @default(false)
  aiGenerated                Boolean                     @default(false)
  inCat                      String?
  imageUrls                  String[]
  
  // Relations
  questionSet                QuestionSet                 @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
  userAnswers                UserQuestionAnswer[]
  insightCatalysts           InsightCatalyst[]
  questionSetStudySessions   QuestionSetStudySession[]
  
  // New relation to MasteryCriterion
  masteryCriterionId         Int?
  masteryCriterion           MasteryCriterion? @relation(fields: [masteryCriterionId], references: [id])
  
  @@index([questionSetId])
  @@index([masteryCriterionId])
}

// Minimal QuestionSet model for compatibility
model QuestionSet {
  id                         Int                       @id @default(autoincrement())
  name                       String
  createdAt                  DateTime                  @default(now())
  updatedAt                  DateTime                  @updatedAt
  instructions               String?
  isPinned                   Boolean                   @default(false)
  
  // Relations
  questions                  Question[]
  userAnswers                UserQuestionAnswer[]
  scheduledReviews           ScheduledReview[]
  questionSetStudySessions   QuestionSetStudySession[]
  
  // Relation to LearningBlueprint
  generatedFromBlueprintId   Int?
  generatedFromBlueprint     LearningBlueprint?        @relation(fields: [generatedFromBlueprintId], references: [id], onDelete: SetNull)
  
  @@index([generatedFromBlueprintId])
}

// Minimal UserMemory model for compatibility
model UserMemory {
  id                Int                 @id @default(autoincrement())
  cognitiveApproach CognitiveApproach?
  explanationStyles ExplanationStyle[]
  interactionStyle  InteractionStyle?
  primaryGoal       String?
  userId            Int                 @unique
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([userId])
}

// Minimal VerificationToken model for compatibility
model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires   DateTime
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([token])
}
