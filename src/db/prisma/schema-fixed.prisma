// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model KnowledgePrimitive {
  id                        Int                       @id @default(autoincrement())
  primitiveId               String                    @unique // Unique identifier for the primitive
  title                     String
  description               String?
  primitiveType             String // e.g., "fact", "concept", "process"
  difficultyLevel           String // e.g., "beginner", "intermediate", "advanced"
  estimatedTimeMinutes      Int?
  userId                    Int
  blueprintId               Int // Reference to the LearningBlueprint
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  user                      User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  masteryCriteria           MasteryCriterion[]
  userPrimitiveProgresses   UserPrimitiveProgress[]
  userCriterionMasteries    UserCriterionMastery[]

  @@index([userId])
  @@index([blueprintId])
  @@index([primitiveId])
}

model MasteryCriterion {
  id                        Int                       @id @default(autoincrement())
  criterionId               String                    @unique // Unique identifier for the criterion
  title                     String
  description               String?
  ueeLevel                  String // "UNDERSTAND", "USE", "EXPLORE"
  isRequired                Boolean                   @default(true)
  userId                    Int
  primitiveId               String // Reference to the parent KnowledgePrimitive
  knowledgePrimitive        KnowledgePrimitive        @relation(fields: [primitiveId], references: [primitiveId], onDelete: Cascade)
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  user                      User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userCriterionMasteries    UserCriterionMastery[]

  @@index([userId])
  @@index([primitiveId])
  @@index([criterionId])
}

model UserPrimitiveProgress {
  id                    Int      @id @default(autoincrement())
  userId                Int
  primitiveId           String   // Reference to the primitive in the blueprint JSON
  blueprintId           Int      // Reference to the LearningBlueprint
  masteryLevel          String   @default("NOT_STARTED") // NOT_STARTED, UNDERSTAND, USE, EXPLORE
  lastReviewedAt        DateTime?
  nextReviewAt          DateTime?
  reviewCount           Int      @default(0)
  successfulReviews     Int      @default(0)
  difficultyMultiplier  Float    @default(1.0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user                  User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  knowledgePrimitive    KnowledgePrimitive   @relation(fields: [primitiveId], references: [primitiveId], onDelete: Cascade)

  @@unique([userId, primitiveId, blueprintId])
  @@index([userId])
  @@index([primitiveId])
  @@index([blueprintId])
}

model UserCriterionMastery {
  id                    Int      @id @default(autoincrement())
  userId                Int
  criterionId           String   // Reference to the criterion in the blueprint JSON
  primitiveId           String   // Reference to the parent primitive
  blueprintId           Int      // Reference to the LearningBlueprint
  isMastered            Boolean  @default(false)
  masteredAt            DateTime?
  lastAttemptedAt       DateTime?
  attemptCount          Int      @default(0)
  successfulAttempts    Int      @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user                  User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  knowledgePrimitive    KnowledgePrimitive   @relation(fields: [primitiveId], references: [primitiveId], onDelete: Cascade)
  masteryCriterion      MasteryCriterion     @relation(fields: [criterionId], references: [criterionId], onDelete: Cascade)

  @@unique([userId, criterionId, primitiveId, blueprintId])
  @@index([userId])
  @@index([criterionId])
  @@index([primitiveId])
  @@index([blueprintId])
}

model UserQuestionAnswer {
  id            Int      @id @default(autoincrement())
  userId        Int
  questionSetId Int
  questionId    Int
  userAnswer    String?
  isCorrect     Boolean?
  marksAwarded  Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionSet QuestionSet @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
  question    Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([questionSetId])
  @@index([questionId])
}

model UserStudySession {
  id            Int      @id @default(autoincrement())
  userId        Int
  questionSetId Int
  startedAt     DateTime @default(now())
  completedAt   DateTime?
  totalQuestions Int     @default(0)
  correctAnswers Int     @default(0)
  totalMarks     Int     @default(0)
  marksAwarded   Int     @default(0)

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionSet QuestionSet @relation(fields: [questionSetId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([questionSetId])
}

model QuestionSetStudySession {
  id                Int      @id @default(autoincrement())
  userId            Int
  questionSetId     Int
  startedAt         DateTime @default(now())
  completedAt       DateTime?
  totalQuestions    Int      @default(0)
  correctAnswers    Int      @default(0)
  totalMarks        Int      @default(0)
  marksAwarded      Int      @default(0)
  difficultyLevel   String?
  masteryScore      Float?
  timeSpentMinutes  Int?

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionSet QuestionSet @relation(fields: [questionSetId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([questionSetId])
}

model ScheduledReview {
  id            Int      @id @default(autoincrement())
  userId        Int
  questionSetId Int
  scheduledFor  DateTime
  completed     Boolean  @default(false)
  completedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionSet QuestionSet @relation(fields: [questionSetId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([questionSetId])
  @@index([scheduledFor])
}

model Note {
  id                        Int      @id @default(autoincrement())
  title                     String
  content                   String
  userId                    Int
  folderId                  Int?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  generatedFromBlueprintId  Int?
  imageUrls                 String[]
  isPinned                  Boolean  @default(false)

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder            Folder?            @relation(fields: [folderId], references: [id], onDelete: SetNull)
  generatedFromBlueprint LearningBlueprint? @relation(fields: [generatedFromBlueprintId], references: [id], onDelete: SetNull)
  insightCatalysts  InsightCatalyst[]

  @@index([userId])
  @@index([folderId])
  @@index([generatedFromBlueprintId])
}

model InsightCatalyst {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  userId    Int
  noteId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([noteId])
}

model Question {
  id             Int     @id @default(autoincrement())
  questionSetId  Int
  questionText   String
  answerText     String?
  marksAvailable Int     @default(1)

  questionSet         QuestionSet          @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
  userQuestionAnswers UserQuestionAnswer[]

  @@index([questionSetId])
}

model QuestionSet {
  id                       Int                       @id @default(autoincrement())
  title                    String
  userId                   Int
  folderId                 Int?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  marksAvailable           Int                       @default(0)
  generatedFromBlueprintId Int?
  imageUrls                String[]
  isPinned                 Boolean                   @default(false)

  user                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder                   Folder?                   @relation(fields: [folderId], references: [id], onDelete: SetNull)
  generatedFromBlueprint   LearningBlueprint?        @relation(fields: [generatedFromBlueprintId], references: [id], onDelete: SetNull)
  questions                Question[]
  userQuestionAnswers      UserQuestionAnswer[]
  userStudySessions        UserStudySession[]
  questionSetStudySessions QuestionSetStudySession[]
  scheduledReviews         ScheduledReview[]

  @@index([userId])
  @@index([folderId])
  @@index([generatedFromBlueprintId])
}

model User {
  id                       Int                       @id @default(autoincrement())
  email                    String                    @unique
  password                 String
  name                     String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  dailyStudyTimeMinutes    Int                       @default(0)
  folders                  Folder[]
  questionAnswers          UserQuestionAnswer[]
  studySessions            UserStudySession[]
  questionSetStudySessions QuestionSetStudySession[]
  notes                    Note[]
  insightCatalysts         InsightCatalyst[]
  scheduledReviews         ScheduledReview[]
  userMemory               UserMemory?
  learningBlueprints       LearningBlueprint[]
  knowledgePrimitives      KnowledgePrimitive[]
  masteryCriteria          MasteryCriterion[]
  userPrimitiveProgresses  UserPrimitiveProgress[]
  userCriterionMasteries   UserCriterionMastery[]
  questionSets             QuestionSet[]

  @@index([email])
}

model Folder {
  id                  Int           @id @default(autoincrement())
  name                String
  description         String?
  userId              Int
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  currentMasteryScore Float?
  masteryHistory      Json[]
  parentId            Int?
  imageUrls           String[]
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionSets        QuestionSet[]
  notes               Note[]
  parent              Folder?       @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children            Folder[]      @relation("FolderHierarchy")
  isPinned            Boolean       @default(false)

  @@index([userId])
  @@index([parentId])
}

model LearningBlueprint {
  id                    Int           @id @default(autoincrement())
  sourceText            String
  blueprintJson         Json
  sourceId              String?       // AI API's UUID for vector database operations
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  userId                Int
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  generatedNotes        Note[]
  generatedQuestionSets QuestionSet[]

  @@index([userId])
}

// Enums for UserMemory
enum CognitiveApproach {
  TOP_DOWN
  BOTTOM_UP
  ADAPTIVE
}

enum ExplanationStyle {
  ANALOGY_DRIVEN
  PRACTICAL_EXAMPLES
  TEXTUAL_DETAILED
}

enum InteractionStyle {
  DIRECT
  SOCRATIC
}

model UserMemory {
  id                Int                 @id @default(autoincrement())
  cognitiveApproach CognitiveApproach?
  explanationStyles ExplanationStyle[]
  interactionStyle  InteractionStyle?
  primaryGoal       String?
  userId            Int                 @unique
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([userId])
}
