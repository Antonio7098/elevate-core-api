generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the User model
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  folders   Folder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the Folder model
model Folder {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  questionSets QuestionSet[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId])
}

// Define the QuestionSet model
model QuestionSet {
  id        Int      @id @default(autoincrement())
  name      String
  folderId  Int
  folder    Folder   @relation(fields: [folderId], references: [id])
  questions Question[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([folderId])
}

// Define the Question model
model Question {
  id            Int         @id @default(autoincrement())
  text          String      // Renamed from 'question'
  answer        String?     // Make answer nullable
  options       String[]    // For multiple-choice, etc. Now a required list (can be empty)
  questionType  String      // e.g., 'multiple-choice', 'short-answer', 'flashcard'
  masteryScore  Int         @default(0)
  nextReviewAt  DateTime?   // For spaced repetition scheduling
  questionSetId Int
  questionSet   QuestionSet @relation(fields: [questionSetId], references: [id])

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([questionSetId])
}