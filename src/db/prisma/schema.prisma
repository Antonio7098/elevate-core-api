generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          Int                         @id @default(autoincrement())
  email                       String                      @unique
  password                    String
  createdAt                   DateTime                    @default(now())
  updatedAt                   DateTime                    @updatedAt
  dailyStudyTimeMinutes       Int                         @default(0) // DISCUSS Remove
  name                        String?
  plan                        String                      @default("free")
  stripeCustomerId            String?                     @unique
  subscriptionId              String?                     @unique
  subscriptionStatus          String?
  subscriptionEndDate         DateTime?
  learningStyle               String                      @default("VISUAL") \\ DISCUSS Can this not be an enum?
  experienceLevel             String                      @default("BEGINNER") \\ DISCUSS Enum, and more like age range or something more concrete
  autoAdjustment             Boolean                     @default(true) CLARIFY What is this?
  lastUpdated                 DateTime                    @default(now())
  blueprintSections           BlueprintSection[]
  insightCatalysts            InsightCatalyst[]
  knowledgePrimitives         KnowledgePrimitive[]
  learningBlueprints          LearningBlueprint[]
  learningPaths               LearningPath[]
  masteryCriteria             MasteryCriterion[]
  noteSections                NoteSection[]
  pinnedReviews               PinnedReview[]
  questionInstances           QuestionInstance[]
  questionSetStudySessions    QuestionSetStudySession[]
  scheduledReviews            ScheduledReview[]
  userBucketPreferences       UserBucketPreferences?
  userCriterionMasteries      UserCriterionMastery[]
  userLearningAnalytics       UserLearningAnalytics[]
  userMemory                  UserMemory?
  userMemoryInsights          UserMemoryInsight[]
  userPrimitiveDailySummaries UserPrimitiveDailySummary[]
  userPrimitiveProgresses     UserPrimitiveProgress[]
  userQuestionAnswers         UserQuestionAnswer[]
  userStudySessions           UserStudySession[]
  verificationTokens          VerificationToken[]
  userPreferences             UserPreferences? \\ CLARIFY What is this
  userSectionPreferences      UserSectionPreferences[]
  userCriterionPreferences    UserCriterionPreferences[]
  userFeedback                UserFeedback[]

  @@index([email])
}

// PROPOSE User model seems like it can be tidied up a lot!

model LearningBlueprint {
  id                    Int                  @id @default(autoincrement())
  sourceText            String // DISCUSS We need to add dealing with new section additions with new sources. Options to organise source content better in blueprint
  blueprintJson         Json
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  userId                Int
  sourceId              String? // DISCUSS Is there a need for source text as well?
  description           String? // DISCUSS Maybe change to overview?
  title                 String?
  blueprintSections     BlueprintSection[]
  knowledgePrimitives   KnowledgePrimitive[] // DISCUSS Is there a need for this, since we can access through the blueprint sections. IS it legacy? If there is, is there a mechanism for updating when new primitives are added? ANd is this not necessary for mastery criterion, questions as well?
  generatedNotes        NoteSection[]
  user                  User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  generatedQuestionSets QuestionSet[] // REMOVE This is legacy code!!
  userPrimitiveProgresses UserPrimitiveProgress[]

  @@index([userId])
}

model BlueprintSection {
  id                     Int                    @id @default(autoincrement())
  title                  String
  name                   String
  description            String? // DISCUSS Overview better?
  blueprintId            Int
  parentSectionId        Int?
  depth                  Int                    @default(0)
  orderIndex             Int                    @default(0)
  difficulty             DifficultyLevel        @default(BEGINNER) // DUISCUSS We need a more objective, possibly relative to other content, metric
  estimatedTimeMinutes   Int? // DISCUSS Time to what? I think we can get rid of this.m 
  userId                 Int
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  blueprint              LearningBlueprint      @relation(fields: [blueprintId], references: [id], onDelete: Cascade)
  parent                 BlueprintSection?      @relation("SectionHierarchy", fields: [parentSectionId], references: [id])
  children               BlueprintSection[]     @relation("SectionHierarchy")
  user                   User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  knowledgePrimitives    KnowledgePrimitive[]
  masteryCriteria        MasteryCriterion[] // NOTE for ai api: we will need some way of asessing all prerequisites every time a new criterion is added
  notes                  NoteSection[]
  userCriterionMasteries UserCriterionMastery[] // DISCUSS No userPrimitiveProgress or any primitive related fields? Why criterion masteries and not primitve ones?
  userSectionPreferences UserSectionPreferences[] // CLARIFY What is this?

  @@unique([blueprintId, parentSectionId, orderIndex])
  @@index([blueprintId])
  @@index([parentSectionId])
  @@index([userId])
  @@index([depth])

  // PROPOSE Needs some linking to source text (chunks, line number etc...)
}

model NoteSection {
  id                 Int               @id @default(autoincrement())
  title              String
  content            String
  contentBlocks      Json?
  contentHtml        String?
  plainText          String? // MAKE SURE That there are cascading updates between these three content types
  contentVersion     Int               @default(2) // CLARIFY What does this mean?
  blueprintSectionId Int // PROPOSE We need to automatically pick up changes in blueprints and suggest updating the notes as well
  userId             Int
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  insightCatalysts   InsightCatalyst[]
  blueprintSection   BlueprintSection  @relation(fields: [blueprintSectionId], references: [id], onDelete: Cascade)
  generatedFromBlueprint LearningBlueprint? @relation(fields: [generatedFromBlueprintId], references: [id]) // DISCUSS This is redundant due to the blueprintSectionID??
  generatedFromBlueprintId Int? // DISCUSS This is redundant due to the blueprintSectionID??
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([blueprintSectionId])
  @@index([userId])generatedFromBlueprint
  @@index([createdAt])

  // NOTE Maybe some notes about the style and instructions that were passed into making the notes? I think we need to work on creating these options.
}

model MasteryCriterion {
  id                     Int                            @id @default(autoincrement())
  criterionId            Int                            @default(autoincrement())

  title                  String
  description            String? // PROPOSE Make this more descriptive like "lerning objective" or something
  userId                 Int
  createdAt              DateTime                       @default(now())
  updatedAt              DateTime                       @updatedAt
  weight                 Float                          @default(1.0) // DISCUSS This wil have to change now we have multi primitive linking. I was thinking the weight could be based on the connection type eg. "primary", "secondary", etc... This was present in the ai api but I dont see it in the junction table here
  assessmentType         AssessmentType                 @default(QUESTION_BASED)
  attemptsAllowed        Int                            @default(3) // REMOVE Redundant. Remove
  blueprintSectionId     Int
  complexityScore        Float? // DISCUSS Subjective. We need something concrete, relative to rest of material, or remove this.
  knowledgePrimitiveId   String // CLARIFY We have moved to multi primitive linking, using the junction table. Is this necessary? If so, it needs to be changed to String[]
  masteryThreshold       Float                          @default(0.8) // DISCUSS Is this not supposed to be "SURVEY", ...
  timeLimit              Int? // DISCUSS Redundant, remove
  uueStage               UueStage                       @default(UNDERSTAND)
  difficulty             Float                          @default(0.5) // DISCUSS Again with the subjectivity
  estimatedPrimitiveCount Int                           @default(1) // CLARIFY Explain why this is needed
  relationshipComplexity  Float                         @default(1.0) // DISCUSS What this is and why this is needed
  maxPrimitives          Int                            @default(10) // DISCUSS Maybe this is what you meant by complexity? IS it the amount of connected concepts?
  insightCatalysts       InsightCatalyst[]
  blueprintSection       BlueprintSection               @relation(fields: [blueprintSectionId], references: [id], onDelete: Cascade) // Redundant. Is linked to sections through primitives

  knowledgePrimitive     KnowledgePrimitive             @relation(fields: [knowledgePrimitiveId], references: [primitiveId], onDelete: Cascade) // DISCUSS We have multi primitive linking now!

  user                   User                           @relation(fields: [userId], references: [id], onDelete: Cascade)

  prerequisiteFor        MasteryCriterionRelationship[] @relation("CriterionPrerequisiteFor")

  requiresPrerequisites  MasteryCriterionRelationship[] @relation("CriterionRequiresPrerequisites")

  questions              Question[] // DISCUSS Legacy!! Remove
  questionInstances      QuestionInstance[]
  userCriterionMasteries UserCriterionMastery[]
  userQuestionAnswers    UserQuestionAnswer[]
  primitiveRelationships MasteryCriterionPrimitive[]
  userCriterionPreferences UserCriterionPreferences[]
  userFeedback           UserFeedback[]

  @@index([knowledgePrimitiveId])
  @@index([blueprintSectionId])
  @@index([userId])
  @@index([uueStage])
  @@index([weight])
  @@index([complexityScore])
}

// New junction table for multi-primitive mastery criteria
model MasteryCriterionPrimitive {
  id               Int                        @id @default(autoincrement())
  criterionId      Int
  primitiveId      String
  relationshipType PrimitiveRelationshipType  @default(PRIMARY)
  weight           Float                      @default(1.0) // DISCUSS Could be based on the relationship type?
  strength         Float                      @default(0.8) // CLARIFY What this means
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt
  
  masteryCriterion MasteryCriterion          @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  knowledgePrimitive KnowledgePrimitive      @relation(fields: [primitiveId], references: [primitiveId], onDelete: Cascade)
  
  @@unique([criterionId, primitiveId])
  @@index([criterionId])
  @@index([primitiveId])
  @@index([relationshipType])
}

model QuestionInstance {
  id                 Int                  @id @default(autoincrement())
  questionText       String
  answer             String // CHANGE Model answer
  explanation        String?
  context            String? // CLARIFY Is this the context from the source text?
  difficulty         QuestionDifficulty   @default(MEDIUM) // REMOVE Once again, subjective!! Remove unless we can come up with something more grounded or relative
  masteryCriterionId Int
  userId             Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  masteryCriterion   MasteryCriterion     @relation(fields: [masteryCriterionId], references: [id], onDelete: Cascade)
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAnswers        UserQuestionAnswer[]

  @@index([masteryCriterionId])
  @@index([userId])
  @@index([difficulty])

  // ADD Weshould have mark based questions! eg. 3/4 marks on this attempt! QuestionInstanced need marksAvailable and markingCriteria! And make sure that the ai api knows to create them properly! ie. s56
}

model KnowledgePrimitive {
  id                                   Int                         @id @default(autoincrement())
  primitiveId                          String                      @unique
  title                                String
  description                          String? // DISCUSS Make this more desctiptive?
  primitiveType                        String // DISCUSS Maybe an enum? We need to generate types for lots of different source types
  difficultyLevel                      String // REMOVE Subjective!!
  estimatedTimeMinutes                 Int? // REMOVE Redundant!!
  userId                               Int
  blueprintId                          Int // CLARIFY Is this necessary when we have blueprint section
  trackingIntensity                    TrackingIntensity           @default(NORMAL)
  createdAt                            DateTime                    @default(now())
  updatedAt                            DateTime                    @updatedAt
  complexityScore                      Float? // CLARIFY What this means!! Subjective!!
  conceptTags                          String[]                    @default([])
  estimatedPrerequisites               Int?
  isCoreConcept                        Boolean                     @default(false) // CLARIFY What this means
  prerequisiteIds                      String[]                    @default([]) // DISCUSS Maybe a junction table for this
  relatedConceptIds                    String[]                    @default([]) // DISCUSS Maybe a junction table for this
  blueprintSectionId                   Int?String
  insightCatalysts                     InsightCatalyst[]
  blueprint                            LearningBlueprint           @relation(fields: [blueprintId], references: [id], onDelete: Cascade)
  blueprintSection                     BlueprintSection?           @relation(fields: [blueprintSectionId], references: [id])
  user                                 User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  prerequisiteForRelations             KnowledgeRelationship[]     @relation("PrerequisiteFor")
  requiresPrerequisites                KnowledgeRelationship[]     @relation("RequiresPrerequisites")
  learningPathSteps                    LearningPathStep[]
  masteryCriteria                      MasteryCriterion[]
  pinnedReviews                        PinnedReview[]
  scheduledReviews                     ScheduledReview[]
  dailySummaries                       UserPrimitiveDailySummary[] // CLARIFY What this is
  userPrimitiveProgresses              UserPrimitiveProgress[]
  userQuestionAnswers                  UserQuestionAnswer[]
  KnowledgePrimitive_Prerequisites_A   KnowledgePrimitive[]        @relation("Prerequisites") // CLARUFY What this is??
  KnowledgePrimitive_Prerequisites_B   KnowledgePrimitive[]        @relation("Prerequisites")
  KnowledgePrimitive_RelatedConcepts_A KnowledgePrimitive[]        @relation("RelatedConcepts")
  KnowledgePrimitive_RelatedConcepts_B KnowledgePrimitive[]        @relation("RelatedConcepts")
  primitiveRelationships               MasteryCriterionPrimitive[]

  @@index([conceptTags])
  @@index([isCoreConcept])
  @@index([complexityScore])

  @@index([userId])
  @@index([blueprintId])
  @@index([blueprintSectionId])
  @@index([primitiveId])
}

model UserCriterionMastery {
  id                     String            @id @default(cuid())
  userId                 Int
  isMastered             Boolean           @default(false) // DISCUSS Mastered when masteryScore is above the threshold. How is thi updated when mastery score is? WHat if the threshold changes?
  blueprintSectionId     Int
  consecutiveFailures    Int               @default(0)
  consecutiveIntervals   Int               @default(0)
  currentIntervalStep    Int               @default(0)
  lastReviewedAt         DateTime?
  lastThresholdCheckDate DateTime? // CLARIFY WHat this is
  lastTwoAttempts        Float[]onMastery
  id                     String            @id @default(cuid())
  userId                 Int
  isMastered             Boolean           @default(false) // REMOVE Repeat!
  blueprintSectionI // CLARIFY Typo?
  lastAttempt            DateTime?
  attempts               Int               @default(0) // ------ PROPOSE This section seems bloated ------
  attemptHistory         Json              @default("[]")
  attemptCount           Int               @default(0)
  successfulAttempts     Int               @default(0) // ------ PROPOSE This section seems bloated ------
  criterionId            Int               @default(0)
  masteredAt             DateTime?
  lastAttemptedAt        DateTime?
  masteryCriterionId     Int
  masteryScore           Float             @default(0.0)
  nextReviewAt           DateTime?
  reviewCount            Int               @default(0) // REMOVE Repeat!
  successfulReviews      Int               @default(0) // REMOVE Repeat!
  trackingIntensity      TrackingIntensity @default(NORMAL)
  uueStage               UueStage          @default(UNDERSTAND)
  primitiveId            String?
  blueprintId            Int?
  updatedAt              DateTime          @updatedAt
  blueprintSection       BlueprintSection  @relation(fields: [blueprintSectionId], references: [id], onDelete: Cascade)
  masteryCriterion       MasteryCriterion  @relation(fields: [masteryCriterionId], references: [id], onDelete: Cascade)
  user                   User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, masteryCriterionId])
  @@unique([userId, criterionId, primitiveId, blueprintId])
  @@index([userId])
  @@index([masteryCriterionId])
  @@index([blueprintSectionId])
  @@index([uueStage])
  @@index([lastAttempt])
}

model UserQuestionAnswer {
  id                 Int                 @id @default(autoincrement())
  userId             Int
  questionId         Int
  isCorrect          Boolean // DISCUSS Necessary for mark based questions (which they all are)
  createdAt          DateTime            @default(now())
  answerText         String?
  masteryCriterionId Int?
  timeSpentSeconds   Int?
  primitiveId        Int?
  masteryCriterion   MasteryCriterion?   @relation(fields: [masteryCriterionId], references: [id])
  knowledgePrimitive KnowledgePrimitive? @relation(fields: [primitiveId], references: [id])
  questionInstance   QuestionInstance    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([questionId])
  @@index([createdAt])
  @@index([masteryCriterionId])
  @@index([primitiveId])

  // ADD Weshould have mark based questions! eg. 3/4 marks on this attempt! QuestionInstanced need marksAvailable and markingCriteria!
}

model UserPrimitiveProgress {
  id              Int                @id @default(autoincrement())
  userId          Int
  lastReviewedAt  DateTime?
  nextReviewAt    DateTime?
  currentUeeLevel String             @default("Understand")
  easeFactor      Float              @default(2.5) // REMOVE No ease factor rubbish! We infer the difficulty from the history. DISCUSS Some mechanism for detecting struggling with a primitive and taking appropriate acction
  interval        Float              @default(1.0) // CLARIFY What this is
  lapses          Int                @default(0) // CLARIFY What this is
  reviewCount     Int                @default(0)
  successfulReviews Int              @default(0)
  masteryLevel   String             @default("NOT_STARTED") // CLARIFY What this is
  trackingIntensity TrackingIntensity @default(NORMAL)
  primitiveId     String
  blueprintId     Int? // DISCUSS No blueprint section ID?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  primitive       KnowledgePrimitive @relation(fields: [primitiveId], references: [primitiveId])
  blueprint       LearningBlueprint? @relation(fields: [blueprintId], references: [id])
  user            User               @relation(fields: [userId], references: [id])

  @@unique([userId, primitiveId])
  @@unique([userId, primitiveId, blueprintId])
  @@index([userId])
  @@index([primitiveId])
  @@index([nextReviewAt])
}

model UserStudySession {
  id                       Int                       @id @default(autoincrement())
  userId                   Int
  answeredQuestionsCount   Int
  createdAt                DateTime                  @default(now())
  sessionEndedAt           DateTime                  @default(now())
  sessionStartedAt         DateTime?
  timeSpentSeconds         Int
  updatedAt                DateTime                  @default(now()) @updatedAt
  questionSetStudySessions QuestionSetStudySession[] // REMOVE Legacy code! DISCUSS This can be UserQuestionAnswers?
  user                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionEndedAt])
}

model QuestionSetStudySession {
  id                    Int              @id @default(autoincrement())
  userId                Int
  questionSetId         Int
  createdAt             DateTime         @default(now())
  sessionId             Int
  sessionMarksAchieved  Int
  sessionMarksAvailable Int
  srStageBefore         Int
  questionSet           QuestionSet      @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
  session               UserStudySession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user                  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionsAnswered     Question[]       @relation("QuestionToQuestionSetStudySession")

  @@unique([sessionId, questionSetId])
  @@index([userId])
  @@index([questionSetId])
} // REMOVE Legacy code!

model InsightCatalyst {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  userId             Int
  noteId             Int? // PROPOSE Needs updating to blueprint centric, with note section
  explanation        String?
  imageUrls          String[]
  masteryCriterionId Int?
  questionId         Int? // PROPOSE Needs updating to blueprint centric system
  text               String
  type               String
  primitiveId        Int?
  masteryCriterion   MasteryCriterion?   @relation(fields: [masteryCriterionId], references: [id])
  note               NoteSection?        @relation(fields: [noteId], references: [id])
  primitive          KnowledgePrimitive? @relation(fields: [primitiveId], references: [id])
  question           Question?           @relation(fields: [questionId], references: [id])
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([noteId])
  @@index([questionId])
  @@index([primitiveId])
  @@index([masteryCriterionId])
}

model ScheduledReview {
  id            Int                 @id @default(autoincrement())
  userId        Int
  questionSetId Int? // REMOVE Legacy!! PROPOSE Needs to be linked to a primitive
  createdAt     DateTime            @default(now())
  reviewDate    DateTime
  status        String              @default("PENDING")
  type          String
  primitiveId   Int?
  primitive     KnowledgePrimitive? @relation(fields: [primitiveId], references: [id])
  questionSet   QuestionSet?        @relation(fields: [questionSetId], references: [id], onDelete: Cascade) // REMOVE Legacy!
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, reviewDate])
  @@index([primitiveId])
}

model PinnedReview {
  id          Int                 @id @default(autoincrement())
  userId      Int
  createdAt   DateTime            @default(now())
  reviewAt    DateTime            @default(now())
  primitiveId String? 
  updatedAt   DateTime            @updatedAt
  primitive   KnowledgePrimitive? @relation(fields: [primitiveId], references: [primitiveId])

  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, primitiveId])
  @@index([userId])
  @@index([primitiveId])
  @@index([reviewAt])
  // DISCUSS MAybe we can make questions, and criterion pinnable as well?
}

model UserBucketPreferences {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  bucketSize     Int      @default(10)
  reviewInterval Int      @default(1)
  criticalSize   Int      @default(10)
  coreSize       Int      @default(15)
  plusSize       Int      @default(5)
  masteryThresholdLevel String @default("PROFICIENT")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])

  // DISCUSS Is there a need for indivicual bucket sizes if they are filled sequentially? Maybe a total number of questions/marks/minutes(estimate) per day- study time?
}

model UserPrimitiveDailySummary {
  id          Int                @id @default(autoincrement())
  userId      Int
  createdAt   DateTime           @default(now())
  date        DateTime           @db.Date
  summary     Json
  primitiveId String
  weightedMasteryScore Float    @default(0.0)
  masteryLevel String           @default("NOT_STARTED")
  canProgressToNext Boolean     @default(false)
  nextReviewAt DateTime?
  primitiveTitle String?
  totalCriteria Int              @default(0)
  masteredCriteria Int           @default(0)
  lastCalculated DateTime       @default(now())
  primitive   KnowledgePrimitive @relation(fields: [primitiveId], references: [primitiveId])
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, primitiveId, date])
  @@index([userId])
  @@index([primitiveId])
  @@index([date])
  @@index([lastCalculated])

  // DISCUSS The need for this?
}

model UserLearningAnalytics {
  id                    Int      @id @default(autoincrement())
  userId                Int
  date                  DateTime @default(now())
  totalStudyTimeMinutes Int      @default(0)
  conceptsReviewed      Int      @default(0)
  conceptsMastered      Int      @default(0)
  averageMasteryScore   Float    @default(0)
  learningEfficiency    Float?
  focusAreas            String[] @default([])
  achievements          String[] @default([])
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])

  // DISCUSS How to enhance this
}

model UserMemoryInsight {
  id                Int      @id @default(autoincrement())
  userId            Int
  insightType       String // DISCUSS Could be an enum?
  title             String
  content           String
  relatedPrimitiveIds String[] @default([]) // DISCUSS Linking criterion, question instances, blueprint sections. Would be usefyl for knowledge tree
  confidenceScore   Float
  isActionable      Boolean  @default(true) // CLARIFY The need?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, insightType])
  @@index([userId, confidenceScore])
}

model LearningPath {
  id                    Int                @id @default(autoincrement())
  userId                Int
  pathName              String
  description           String?
  targetMasteryLevel    String
  estimatedDurationDays Int?
  isActive              Boolean            @default(true)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  user                  User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  steps                 LearningPathStep[]

  @@index([userId, isActive])

  // CLARIFY What this is??
}

model LearningPathStep {
  id                    Int                @id @default(autoincrement())
  learningPathId        Int
  primitiveId           String
  stepOrder             Int
  isCompleted           Boolean            @default(false)
  completedAt           DateTime?
  estimatedTimeMinutes  Int?
  learningPath          LearningPath       @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  primitive             KnowledgePrimitive @relation(fields: [primitiveId], references: [primitiveId], onDelete: Cascade)

  @@unique([learningPathId, stepOrder])
  @@index([learningPathId, isCompleted])
  @@index([learningPathId])
  @@index([primitiveId])

  // CLARIFY What this is??
}

model KnowledgeRelationship {
  id                Int                @id @default(autoincrement())
  sourcePrimitiveId Int
  targetPrimitiveId Int
  relationshipType  RelationshipType
  strength          Float              @default(1.0)
  confidence        Float              @default(0.8)
  source            RelationshipSource @default(AI_GENERATED)
  metadata          Json? // CLARIFY What this will be
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  sourcePrimitive   KnowledgePrimitive @relation("PrerequisiteFor", fields: [sourcePrimitiveId], references: [id], onDelete: Cascade)
  targetPrimitive   KnowledgePrimitive @relation("RequiresPrerequisites", fields: [targetPrimitiveId], references: [id], onDelete: Cascade)

  @@unique([sourcePrimitiveId, targetPrimitiveId, relationshipType])
  @@index([sourcePrimitiveId])
  @@index([targetPrimitiveId])
  @@index([relationshipType])
  @@index([strength])
  @@index([confidence])

  // CLARIFY THis is not linked in the primitive model? Is this just for the knowledge graph?
}

model MasteryCriterionRelationship {
  id                Int                       @id @default(autoincrement())
  sourceCriterionId Int
  targetCriterionId Int
  relationshipType  CriterionRelationshipType
  strength          Float                     @default(1.0)
  confidence        Float                     @default(0.8)
  source            RelationshipSource        @default(AI_GENERATED)
  metadata          Json?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  sourceCriterion   MasteryCriterion          @relation("CriterionPrerequisiteFor", fields: [sourceCriterionId], references: [id], onDelete: Cascade)
  targetCriterion   MasteryCriterion          @relation("CriterionRequiresPrerequisites", fields: [targetCriterionId], references: [id], onDelete: Cascade)

  @@unique([sourceCriterionId, targetCriterionId, relationshipType])
  @@index([sourceCriterionId])
  @@index([targetCriterionId])
  @@index([relationshipType])
  @@index([strength])
  @@index([confidence])
}

model Question {
  id                       Int                       @id @default(autoincrement())
  questionSetId            Int
  totalMarksAvailable      Int                       @default(1) @map("marksAvailable")
  aiGenerated              Boolean                   @default(false)
  answer                   String?
  autoMark                 Boolean                   @default(false)
  conceptTags              String[]
  createdAt                DateTime                  @default(now())
  currentMasteryScore      Float?
  difficultyScore          Float?
  imageUrls                String[]
  inCat                    String?
  lastAnswerCorrect        Boolean?
  markingCriteria          Json?
  masteryCriterionId       Int?
  options                  String[]
  questionType             String
  selfMark                 Boolean                   @default(false)
  text                     String
  timesAnsweredCorrectly   Int                       @default(0)
  timesAnsweredIncorrectly Int                       @default(0)
  updatedAt                DateTime                  @updatedAt
  insightCatalysts         InsightCatalyst[]
  masteryCriterion         MasteryCriterion?         @relation(fields: [masteryCriterionId], references: [id])
  questionSet              QuestionSet               @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
  questionSetStudySessions QuestionSetStudySession[] @relation("QuestionToQuestionSetStudySession")

  @@index([questionSetId])
  @@index([masteryCriterionId])
} // REMOVE Legacy!

model QuestionSet {
  id                       Int                       @id @default(autoincrement())
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  isPinned                 Boolean                   @default(false)
  isTracked                Boolean                   @default(true)
  generatedFromBlueprintId Int?
  instructions             String?
  name                     String
  questions                Question[]
  generatedFromBlueprint   LearningBlueprint?        @relation(fields: [generatedFromBlueprintId], references: [id])
  questionSetStudySessions QuestionSetStudySession[]
  scheduledReviews         ScheduledReview[]

  @@index([generatedFromBlueprintId])
} // REMOVE Legacy!

model UserMemory {
  id                Int                @id @default(autoincrement())
  primaryGoal       String?
  userId            Int                @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  cognitiveApproach CognitiveApproach?
  explanationStyles ExplanationStyle[]
  interactionStyle  InteractionStyle?
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])

  // PROPOSE How this can be enhanced. Definitely could do with some enums
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  createdAt DateTime @default(now())
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum UueStage {
  UNDERSTAND
  USE
  EXPLORE
}

enum AssessmentType {
  QUESTION_BASED
  EXPLANATION_BASED
  APPLICATION_BASED
  COMPARISON_BASED
  CREATION_BASED
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}

enum RelationshipType {
  PREREQUISITE
  RELATED
  SIMILAR
  ADVANCES_TO
  DEMONSTRATES
  CONTRADICTS
  SYNONYMOUS
  PART_OF
}

enum CriterionRelationshipType {
  PREREQUISITE
  ADVANCES_TO
  RELATED
  SIMILAR
  PART_OF
  DEMONSTRATES
  SYNONYMOUS
}

enum RelationshipSource {
  AI_GENERATED
  USER_CREATED
  EXPERT_VERIFIED
  SYSTEM_INFERRED
}

enum TrackingIntensity {
  DENSE
  NORMAL
  SPARSE
}

enum MasteryThresholdLevel {
  SURVEY
  PROFICIENT
  EXPERT
}

enum CognitiveApproach {
  TOP_DOWN
  BOTTOM_UP
  ADAPTIVE
}

enum ExplanationStyle {
  ANALOGY_DRIVEN
  PRACTICAL_EXAMPLES
  TEXTUAL_DETAILED
}

enum InteractionStyle {
  DIRECT
  SOCRATIC
}

enum PrimitiveRelationshipType {
  PRIMARY
  SECONDARY
  CONTEXTUAL
}

enum RelationshipStrength {
  WEAK
  MODERATE
  STRONG
}

model UserPreferences {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  learningStyle  String   @default("VISUAL")
  experienceLevel String  @default("BEGINNER")
  autoAdjustment Boolean  @default(true)
  lastUpdated    DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  masteryOptions Json?    @default("{}")

  @@index([userId])

  // DISCUSS This seems to be replicated in the user model. Which to keep?
}

model UserSectionPreferences {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  sectionId      Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  difficulty     String   @default("MEDIUM") // REMOVE or make less subjective!
  timeAllocation Int      @default(30) // REMOVE WHat does this even mean??
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  masteryOptions Json?    @default("{}")
  section        BlueprintSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sectionId])
  @@unique([userId, sectionId])

`// CLARIFY Is this linked to in the blueprint section?
}

model UserCriterionPreferences {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  criterionId    Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  difficulty     String   @default("MEDIUM")
  timeAllocation Int      @default(15)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  criterion      MasteryCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)

  @@index([userId])
  masteryOptions Json?    @default("{}")
  @@index([criterionId])
  @@unique([userId, criterionId])

  // CLARIFY WHat the point of this is??
}

model UserFeedback {
  id          Int      @id @default(autoincrement())
  userId      Int
  feedback    String
  rating      Int      @default(0)
  criterionId Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  criterion   MasteryCriterion? @relation(fields: [criterionId], references: [id])

  @@index([userId])
  @@index([rating])

  // PROPOSE How to enhance this to be any general feedback about the app, so can choose what page or functionality  or category it apples to
}


