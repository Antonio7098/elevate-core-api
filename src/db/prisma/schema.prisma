generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                  @id @default(autoincrement())
  email                 String               @unique
  password              String
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  dailyStudyTimeMinutes Int                  @default(30)
  folders               Folder[]
  questionAnswers       UserQuestionAnswer[]
  studySessions         UserStudySession[]
}

model Folder {
  id                  Int           @id @default(autoincrement())
  name                String
  description         String?
  userId              Int
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  currentMasteryScore Float?
  masteryHistory      Json[]
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionSets        QuestionSet[]

  @@index([userId])
}

model QuestionSet {
  id                         Int                  @id @default(autoincrement())
  name                       String
  folderId                   Int
  createdAt                  DateTime             @default(now())
  updatedAt                  DateTime             @updatedAt
  currentIntervalDays        Float?               @default(1)
  exploreScore               Float                @default(0)
  lastReviewedAt             DateTime?
  nextReviewAt               DateTime?
  reviewCount                Int                  @default(0)
  understandScore            Float                @default(0)
  useScore                   Float                @default(0)
  currentForgottenPercentage Float?
  currentTotalMasteryScore   Float                @default(0)
  currentUUESetStage         String               @default("Understand")
  forgettingCurveParams      Json?
  masteryHistory             Json[]
  questions                  Question[]
  folder                     Folder               @relation(fields: [folderId], references: [id], onDelete: Cascade)
  userAnswers                UserQuestionAnswer[]

  @@index([folderId])
  @@index([nextReviewAt])
}

model Question {
  id                       Int                  @id @default(autoincrement())
  answer                   String?
  questionSetId            Int
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  options                  String[]
  questionType             String
  text                     String
  conceptTags              String[]
  lastAnswerCorrect        Boolean?
  uueFocus                 String               @default("Understand")
  totalMarksAvailable      Int                  @default(1) @map("marksAvailable") // Using existing field with a new name
  markingCriteria          Json?                // New field for storing marking criteria
  currentMasteryScore      Float?
  difficultyScore          Float?
  timesAnsweredCorrectly   Int                  @default(0)
  timesAnsweredIncorrectly Int                  @default(0)
  questionSet              QuestionSet          @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
  userAnswers              UserQuestionAnswer[]

  @@index([questionSetId])
  @@index([uueFocus])
}

model UserQuestionAnswer {
  id                 Int               @id @default(autoincrement())
  userId             Int
  questionId         Int
  isCorrect          Boolean
  confidence         Int?
  timeSpent          Int
  answeredAt         DateTime          @default(now())
  scoreAchieved      Float
  createdAt          DateTime          @default(now())
  feedbackFromAI     String?
  questionSetId      Int?
  updatedAt          DateTime          @default(now()) @updatedAt
  userAnswerText     String?
  uueFocusTested     String?
  userStudySessionId Int?
  question           Question          @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionSet        QuestionSet?      @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  studySession       UserStudySession? @relation(fields: [userStudySessionId], references: [id])

  @@index([userId])
  @@index([questionId])
  @@index([questionSetId])
  @@index([answeredAt])
  @@index([userStudySessionId])
}

model UserStudySession {
  id                     Int                  @id @default(autoincrement())
  userId                 Int
  sessionStartedAt       DateTime?
  sessionEndedAt         DateTime             @default(now())
  timeSpentSeconds       Int
  answeredQuestionsCount Int
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @default(now()) @updatedAt
  userQuestionAnswers    UserQuestionAnswer[]
  user                   User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionEndedAt])
}
